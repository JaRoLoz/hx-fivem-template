package shared;

@:native("_G")
extern class Citizen {
	static var source(default, null):Int;
	static function Wait(ms:Int):Void;
	static function CreateThread(callback:Void->Void):Void;
	static function TriggerEvent(eventName:String, ...args:Dynamic):Void;
	static function AddEventHandler(eventName:String, cb:(...Dynamic) -> Void):Void;
	static function TriggerServerEvent(eventName:String, ...args:Dynamic):Void;
	static function RegisterNetEvent(eventName:String, cb:(...Dynamic) -> Void):Void;
	static function SendNUIMessage(message:Dynamic):Void;
	static function SetNuiFocus(hasFocus:Bool, hasCursor:Bool):Void;
	static function SetNuiFocusKeepInput(keepInput:Bool):Void;
	static function RegisterNuiCallback(cbName:String, cb:(Dynamic, (Dynamic) -> Void) -> Void):Void;
}

@:native("_G.json")
extern class Json {
	static function decode(json:String):Dynamic;
	static function encode(value:Dynamic):String;
}

class Vector3 {
	extern public var x:Float;
	extern public var y:Float;
	extern public var z:Float;
}

@:native("_G")
extern class Natives {
	static function vector3(x:Float, y:Float, z:Float):Vector3;
	static function AppCloseBlock():Void;
	static function AppClearBlock():Void;
	static function AppCloseApp():Void;
	static function AppDataValid():Bool;
	static function AppGetInt(property:String):Int;
	static function AppGetDeletedFileStatus():Int;
	static function AppDeleteAppData(appName:String):Bool;
	static function AppGetFloat(property:String):Float;
	static function AppSaveData():Void;
	static function AppHasLinkedSocialClubAccount():Bool;
	static function AppGetString(property:String):String;
	static function AppHasSyncedData(appName:String):Bool;
	static function AppSetInt(property:String, value:Int):Void;
	static function AppSetBlock(blockName:String):Void;
	static function AppSetApp(appName:String):Void;
	static function AppSetFloat(property:String, value:Float):Void;
	static function AppSetString(property:String, value:String):Void;
	static function AddScriptToRandomPed(name:String, model:Int, p2:Float, p3:Float):Void;
	static function EnableScriptBrainSet(brainSet:Int):Void;
	static function DisableScriptBrainSet(brainSet:Int):Void;
	static function IsWorldPointWithinBrainActivationRange():Bool;
	static function IsObjectWithinBrainActivationRange(object:Dynamic):Bool;
	static function RegisterObjectScriptBrain(scriptName:String, modelHash:Int, p2:Int, activationRange:Float, p4:Int, p5:Int):Void;
	static function RegisterWorldPointScriptBrain(scriptName:String, activationRange:Float, p2:Int):Void;
	static function AddEntityToAudioMixGroup(entity:Int, groupName:String, p2:Float):Void;
	static function AddPedToConversation(index:Int, ped:Int, p2:String):Void;
	static function ActivateAudioSlowmoMode(p0:String):Void;
	static function AddLineToConversation(index:Int, p1:String, p2:String, p3:Int, p4:Int, p5:Bool, p6:Bool, p7:Bool, p8:Bool, p9:Int, p10:Bool, p11:Bool,
		p12:Bool):Void;
	static function BlipSiren(vehicle:Int):Void;
	static function CanPedSpeak(ped:Int, speechName:String, unk:Bool):Bool;
	static function BlockDeathJingle(toggle:Bool):Void;
	static function AudioIsScriptedMusicPlaying():Bool;
	static function CancelMusicEvent(eventName:String):Bool;
	static function ClearAmbientZoneListState(p0:Int, p1:Bool):Void;
	static function CancelCurrentPoliceReport():Void;
	static function ClearAllBrokenGlass():Void;
	static function CreateNewScriptedConversation():Void;
	static function ClearAmbientZoneState(zoneName:String, p1:Bool):Void;
	static function DeactivateAudioSlowmoMode(p0:String):Void;
	static function ClearCustomRadioTrackList(radioStation:String):Void;
	static function DistantCopCarSirens(value:Bool):Void;
	static function DoesPlayerVehHaveRadio():Bool;
	static function DisablePedPainAudio(ped:Int, toggle:Bool):Void;
	static function EnableStallWarningSounds(vehicle:Int, toggle:Bool):Void;
	static function ForceRadioTrackListPosition(radioStation:String, trackListName:String, milliseconds:Int):Void;
	static function FindRadioStationIndex(stationNameHash:Int):Int;
	static function EnableVehicleExhaustPops(vehicle:Int, toggle:Bool):Void;
	static function ForceVehicleEngineAudio(vehicle:Int, audioName:String):Void;
	static function FreezeMicrophone():Void;
	static function GetAmbientVoiceNameHash(ped:Int):Int;
	static function FreezeRadioStation(radioStation:String):Void;
	static function GetMusicPlaytime():Int;
	static function GetCurrentScriptedConversationLine():Int;
	static function GetAudibleMusicTrackTextId():Int;
	static function GetCurrentRadioTrackName(radioStationName:String):Int;
	static function GetPlayerRadioStationGenre():Int;
	static function GetCurrentRadioTrackPlaybackTime(radioStationName:String):Int;
	static function GetIsPreloadedConversationReady():Bool;
	static function GetNetworkIdFromSoundId(soundId:Int):Int;
	static function GetNumUnlockedRadioStations():Int;
	static function GetSoundId():Int;
	static function GetPlayerRadioStationIndex():Int;
	static function GetPlayerRadioStationName():String;
	static function GetVehicleDefaultHorn(vehicle:Int):Int;
	static function GetSoundIdFromNetworkId(netId:Int):Int;
	static function GetStreamPlayTime():Int;
	static function HasSoundFinished(soundId:Int):Bool;
	static function GetRadioStationName(radioStation:Int):String;
	static function GetVehicleDefaultHornVariation(vehicle:Int):Int;
	static function GetVehicleDefaultHornIgnoreMods(vehicle:Int):Int;
	static function HasMultiplayerAudioDataLoaded():Bool;
	static function InterruptConversation(p0:Int, p1:Int, p2:Int):Void;
	static function HintAmbientAudioBank(p0:Int, p1:Int):Int;
	static function HintScriptAudioBank(p0:Int, p1:Int):Int;
	static function HasMultiplayerAudioDataUnloaded():Bool;
	static function InterruptConversationAndPause(ped:Int, p1:String, p2:String):Void;
	static function IsAmbientZoneEnabled(ambientZone:String):Bool;
	static function IsAlarmPlaying(alarmName:String):Bool;
	static function IsAnySpeechPlaying(ped:Int):Bool;
	static function IsAmbientSpeechDisabled(ped:Int):Bool;
	static function IsAnimalVocalizationPlaying(pedHandle:Int):Bool;
	static function IsAudioSceneActive(scene:String):Bool;
	static function IsHornActive(vehicle:Int):Bool;
	static function IsAmbientSpeechPlaying(ped:Int):Bool;
	static function IsMissionCompletePlaying():Bool;
	static function IsMissionCompleteReadyForUi():Bool;
	static function IsMobilePhoneRadioActive():Bool;
	static function IsMusicOneshotPlaying():Bool;
	static function IsMobilePhoneCallOngoing():Bool;
	static function IsGameInControlOfMusic():Bool;
	static function IsMissionNewsStoryUnlocked(newsStory:Int):Bool;
	static function IsPedInCurrentConversation(ped:Int):Bool;
	static function IsRadioFadedOut():Bool;
	static function IsPlayerVehRadioEnable():Bool;
	static function IsPedRingtonePlaying(ped:Int):Bool;
	static function IsRadioRetuning():Bool;
	static function IsScriptedConversationLoaded():Bool;
	static function IsScriptedConversationOngoing():Bool;
	static function IsRadioStationVisible(radioStation:String):Bool;
	static function IsStreamPlaying():Bool;
	static function IsVehicleAudiblyDamaged(vehicle:Int):Bool;
	static function IsScriptedSpeechPlaying(p0:Int):Bool;
	static function IsVehicleRadioEnabled(vehicle:Int):Bool;
	static function IsVehicleRadioLoud(vehicle:Int):Bool;
	static function LinkStaticEmitterToEntity(emitterName:String, entity:Int):Void;
	static function LoadStreamWithStartOffset(streamName:String, startOffset:Int, soundSet:String):Bool;
	static function LockRadioStation(radioStationName:String, toggle:Bool):Void;
	static function LoadStream(streamName:String, soundSet:String):Bool;
	static function LockRadioStationTrackList(radioStation:String, trackListName:String):Void;
	static function OverrideMicrophoneSettings(hash:Int, toggle:Bool):Void;
	static function OverridePlayerGroundMaterial(hash:Int, toggle:Bool):Void;
	static function OverrideUnderwaterStream(p0:Int, p1:Bool):Void;
	static function OverrideTrevorRage(voiceEffect:String):Void;
	static function OverrideVehHorn(vehicle:Int, _override:Bool, hornHash:Int):Void;
	static function PauseScriptedConversation(p0:Bool):Void;
	static function PlayEndCreditsMusic(play:Bool):Void;
	static function PlayAmbientSpeechFromPositionNative(speechName:String, voiceName:String, x:Float, y:Float, z:Float, speechParam:String):Void;
	static function PlayAnimalVocalization(pedHandle:Int, p1:Int, speechName:String):Void;
	static function PlayPedAmbientSpeechAndCloneNative(ped:Int, speechName:String, speechParam:String):Void;
	static function PlayDeferredSoundFrontend(soundName:String, soundsetName:String):Void;
	static function PlayMissionCompleteAudio(audioName:String):Void;
	static function PlayPedAmbientSpeechWithVoiceNative(ped:Int, speechName:String, voiceName:String, speechParam:String, p4:Bool):Void;
	static function PlayPedAmbientSpeechNative(ped:Int, speechName:String, speechParam:String):Void;
	static function PlaySoundFrontend(soundId:Int, audioName:String, audioRef:String, p3:Bool):Void;
	static function PlayPedRingtone(ringtoneName:String, ped:Int, p2:Bool):Void;
	static function PlayPain(ped:Int, painID:Int, p1:Int):Void;
	static function PlaySound(soundId:Int, audioName:String, audioRef:String, p3:Bool, p4:Int, p5:Bool):Void;
	static function PlayStreamFromVehicle(vehicle:Int):Void;
	static function PlaySoundFromCoord(soundId:Int, audioName:String, x:Float, y:Float, z:Float, audioRef:String, isNetwork:Bool, range:Int, p8:Bool):Void;
	static function PlayPoliceReport(name:String, p1:Float):Int;
	static function PlayStreamFromPosition(x:Float, y:Float, z:Float):Void;
	static function PlayStreamFromObject(object:Dynamic):Void;
	static function PlaySynchronizedAudioEvent(p0:Int):Bool;
	static function PlaySoundFromEntity(soundId:Int, audioName:String, entity:Int, audioRef:String, isNetwork:Bool, p5:Int):Void;
	static function PlayStreamFrontend():Void;
	static function PlayVehicleDoorCloseSound(vehicle:Int, doorIndex:Int):Void;
	static function PrepareAlarm(alarmName:String):Bool;
	static function PlayStreamFromPed(ped:Int):Void;
	static function PreloadScriptConversation(p0:Bool, p1:Bool, p2:Bool, p3:Bool):Void;
	static function PrepareSynchronizedAudioEventForScene(p0:Int, p1:Int):Bool;
	static function PlayVehicleDoorOpenSound(vehicle:Int, doorIndex:Int):Void;
	static function PreloadScriptPhoneConversation(p0:Bool, p1:Bool):Void;
	static function PrepareMusicEvent(eventName:String):Bool;
	static function PreloadVehicleAudio(model:Int):Void;
	static function PrepareSynchronizedAudioEvent(p0:String, p1:Int):Int;
	static function RegisterScriptWithAudio(p0:Int):Void;
	static function RecordBrokenGlass(x:Float, y:Float, z:Float, radius:Float):Void;
	static function ReleaseAmbientAudioBank():Void;
	static function ReleaseMissionAudioBank():Void;
	static function ReleaseWeaponAudio():Void;
	static function ReleaseScriptAudioBank():Void;
	static function ReleaseSoundId(soundId:Int):Void;
	static function ReleaseNamedScriptAudioBank(audioBank:String):Void;
	static function RequestAmbientAudioBank(p0:String, p1:Bool):Bool;
	static function RemovePortalSettingsOverride(p0:String):Void;
	static function RequestMissionAudioBank(p0:String, p1:Bool):Bool;
	static function RemoveEntityFromAudioMixGroup(entity:Int, p1:Float):Void;
	static function ResetPedAudioFlags(ped:Int):Void;
	static function RequestScriptAudioBank(p0:String, p1:Bool):Bool;
	static function RestartScriptedConversation():Void;
	static function ResetTrevorRage():Void;
	static function SetAggressiveHorns(toggle:Bool):Void;
	static function SetAmbientZoneListStatePersistent(ambientZone:String, p1:Bool, p2:Bool):Void;
	static function SetAmbientVoiceName(ped:Int, name:String):Void;
	static function SetAudioFlag(flagName:String, toggle:Bool):Void;
	static function SetAmbientZoneListState(p0:String, p1:Bool, p2:Bool):Void;
	static function SetAmbientVoiceNameHash(ped:Int, hash:Int):Void;
	static function SetAmbientZoneState(zoneName:String, p1:Bool, p2:Bool):Void;
	static function SetAnimalMood(animal:Int, mood:Int):Void;
	static function SetAmbientZoneStatePersistent(ambientZone:String, p1:Bool, p2:Bool):Void;
	static function SetAudioVehiclePriority(vehicle:Int, p1:Int):Void;
	static function SetAudioSceneVariable(scene:String, variable:String, value:Float):Void;
	static function SetAudioSpecialEffectMode(mode:Int):Void;
	static function SetFrontendRadioActive(active:Bool):Void;
	static function SetAudioScriptCleanupTime(time:Int):Void;
	static function SetCustomRadioTrackList(radioStation:String, trackListName:String, p2:Bool):Void;
	static function SetEmitterRadioStation(emitterName:String, radioStation:String):Void;
	static function SetCutsceneAudioOverride(name:String):Void;
	static function SetGpsActive(active:Bool):Void;
	static function SetHornEnabled(vehicle:Int, toggle:Bool):Void;
	static function SetInitialPlayerStation(radioStation:String):Void;
	static function SetMicrophonePosition(p0:Bool, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, x3:Float, y3:Float, z3:Float):Void;
	static function SetMobilePhoneRadioState(state:Bool):Void;
	static function SetPedAudioFootstepQuiet(ped:Int, toggle:Bool):Void;
	static function SetMobileRadioEnabledDuringGameplay(toggle:Bool):Void;
	static function SetPedAudioFootstepLoud(ped:Int, toggle:Bool):Void;
	static function SetPedAudioGender(ped:Int, p1:Bool):Void;
	static function SetPedIsDrunk(ped:Int, toggle:Bool):Void;
	static function SetPedTalk(ped:Int):Void;
	static function SetPedScream(ped:Int):Void;
	static function SetPlayerAngry(ped:Int, toggle:Bool):Void;
	static function SetPedVoiceGroup(ped:Int, voiceGroupHash:Int):Void;
	static function SetPortalSettingsOverride(p0:String, p1:String):Void;
	static function SetPedVoiceGroupRace(ped:Int, voiceGroupHash:Int):Void;
	static function SetRadioStationIsVisible(radioStation:String, toggle:Bool):Void;
	static function SetRadioAutoUnfreeze(toggle:Bool):Void;
	static function SetRadioStationMusicOnly(radioStation:String, toggle:Bool):Void;
	static function SetRadioFrontendFadeTime(fadeTime:Float):Void;
	static function SetRadioToStationIndex(radioStation:Int):Void;
	static function SetRadioToStationName(stationName:String):Void;
	static function SetRadioTrack(radioStation:String, radioTrack:String):Void;
	static function SetRadioTrackMix(radioStationName:String, mixName:String, p2:Int):Void;
	static function SetScriptUpdateDoorAudio(doorHash:Int, toggle:Bool):Void;
	static function SetSynchronizedAudioEventPositionThisFrame(p0:String, p1:Int):Void;
	static function SetSirenKeepOn(vehicle:Int, toggle:Bool):Void;
	static function SetStaticEmitterEnabled(emitterName:String, toggle:Bool):Void;
	static function SetSirenWithNoDriver(vehicle:Int, toggle:Bool):Void;
	static function SetVariableOnSound(soundId:Int, variableName:String, value:Float):Void;
	static function SetUserRadioControlEnabled(toggle:Bool):Void;
	static function SetVariableOnCutsceneAudio(variableName:String, value:Float):Void;
	static function SetVariableOnStream(p0:String, p1:Float):Void;
	static function SetVehHasRadioOverride(vehicle:Int):Void;
	static function SetVariableOnUnderWaterStream(variableName:String, value:Float):Void;
	static function SetVehicleAudioBodyDamageFactor(vehicle:Int, intensity:Float):Void;
	static function SetVehRadioStation(vehicle:Int, radioStation:String):Void;
	static function SetVehicleAudioEngineDamageFactor(vehicle:Int, damageFactor:Float):Void;
	static function SetVehicleBoostActive(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleHornVariation(vehicle:Int, value:Int):Void;
	static function SetVehicleStartupRevSound(vehicle:Int, p1:String, p2:String):Void;
	static function SetVehicleRadioLoud(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleRadioEnabled(vehicle:Int, toggle:Bool):Void;
	static function SkipRadioForward():Void;
	static function StartAlarm(alarmName:String, p2:Bool):Void;
	static function SkipToNextScriptedConversationLine():Void;
	static function SoundVehicleHornThisFrame(vehicle:Int):Void;
	static function StartAudioScene(scene:String):Bool;
	static function StartPreloadedConversation():Void;
	static function StartScriptPhoneConversation(p0:Bool, p1:Bool):Void;
	static function StartScriptConversation(p0:Bool, p1:Bool, p2:Bool, p3:Bool):Void;
	static function StopAlarm(alarmName:String, toggle:Bool):Void;
	static function StopAllAlarms(stop:Bool):Void;
	static function StopAudioScenes():Void;
	static function StopAudioScene(scene:String):Void;
	static function StopCurrentPlayingSpeech(ped:Int):Void;
	static function StopCurrentPlayingAmbientSpeech(ped:Int):Void;
	static function StopPedRingtone(ped:Int):Void;
	static function StopCutsceneAudio():Void;
	static function StopScriptedConversation(p0:Bool):Int;
	static function StopPedSpeaking(ped:Int, shaking:Bool):Void;
	static function StopSynchronizedAudioEvent(p0:Int):Bool;
	static function StopStream():Void;
	static function TriggerMusicEvent(eventName:String):Bool;
	static function StopSound(soundId:Int):Void;
	static function TriggerSiren(vehicle:Int):Void;
	static function UnfreezeRadioStation(radioStation:String):Void;
	static function UnlockMissionNewsStory(newsStory:Int):Void;
	static function UnregisterScriptWithAudio():Void;
	static function UnlockRadioStationTrackList(radioStation:String, trackListName:String):Void;
	static function UpdateLsur(enableMixes:Bool):Void;
	static function UseSirenAsHorn(vehicle:Int, toggle:Bool):Void;
	static function AddToClockTime(hours:Int, minutes:Int, seconds:Int):Void;
	static function AdvanceClockTimeTo(hour:Int, minute:Int, second:Int):Void;
	static function GetClockDayOfMonth():Int;
	static function GetClockHours():Int;
	static function GetClockMonth():Int;
	static function GetClockDayOfWeek():Int;
	static function GetClockYear():Int;
	static function GetClockMinutes():Int;
	static function GetClockSeconds():Int;
	static function GetLocalTime(year:Int, month:Int, day:Int, hour:Int, minute:Int, second:Int):Void;
	static function GetUtcTime(year:Int, month:Int, day:Int, hour:Int, minute:Int, second:Int):Void;
	static function GetMillisecondsPerGameMinute():Int;
	static function GetPosixTime(year:Int, month:Int, day:Int, hour:Int, minute:Int, second:Int):Void;
	static function SetClockDate(day:Int, month:Int, year:Int):Void;
	static function PauseClock(toggle:Bool):Void;
	static function SetClockTime(hour:Int, minute:Int, second:Int):Void;
	static function CanRequestAssetsForCutsceneEntity():Bool;
	static function CanSetEnterStateForRegisteredEntity(cutsceneEntName:String, modelHash:Int):Bool;
	static function GetCutFileNumSections(cutsceneName:String):Int;
	static function CanSetExitStateForCamera(p0:Bool):Bool;
	static function DoesCutsceneEntityExist(cutsceneEntName:String, modelHash:Int):Bool;
	static function CanSetExitStateForRegisteredEntity(cutsceneEntName:String, modelHash:Int):Bool;
	static function GetCutsceneEndTime():Int;
	static function GetCutsceneTotalDuration():Int;
	static function GetCutsceneSectionPlaying():Int;
	static function GetCutsceneTime():Int;
	static function HasCutsceneCutThisFrame():Bool;
	static function GetEntityIndexOfCutsceneEntity(cutsceneEntName:String, modelHash:Int):Int;
	static function GetEntityIndexOfRegisteredEntity(cutsceneEntName:String, modelHash:Int):Int;
	static function HasCutFileLoaded(cutsceneName:String):Bool;
	static function HasCutsceneFinished():Bool;
	static function HasCutsceneLoaded():Bool;
	static function HasThisCutsceneLoaded(cutsceneName:String):Bool;
	static function IsCutsceneActive():Bool;
	static function IsCutscenePlaybackFlagSet(flag:Int):Bool;
	static function IsCutscenePlaying():Bool;
	static function RegisterSynchronisedScriptSpeech():Void;
	static function RemoveCutFile(cutsceneName:String):Void;
	static function RegisterEntityForCutscene(cutsceneEntity:Int, cutsceneEntName:String, p2:Int, modelHash:Int, p4:Int):Void;
	static function RemoveCutscene():Void;
	static function RequestCutsceneWithPlaybackList(cutsceneName:String, playbackFlags:Int, flags:Int):Void;
	static function RequestCutFile(cutsceneName:String):Void;
	static function RequestCutscene(cutsceneName:String, flags:Int):Void;
	static function SetCutsceneCanBeSkipped(p0:Bool):Void;
	static function SetCutscenePedComponentVariation(cutsceneEntName:String, componentId:Int, drawableId:Int, textureId:Int, modelHash:Int):Void;
	static function SetCutsceneOrigin(x:Float, y:Float, z:Float, heading:Float, p4:Int):Void;
	static function SetCutsceneEntityStreamingFlags(cutsceneEntName:String, p1:Int, p2:Int):Void;
	static function SetCutscenePedComponentVariationFromPed(cutsceneEntName:String, ped:Int, modelHash:Int):Void;
	static function StartCutscene(flags:Int):Void;
	static function SetCutsceneFadeValues(p0:Bool, p1:Bool, p2:Bool, p3:Bool):Void;
	static function SetCutscenePedPropVariation(cutsceneEntName:String, componentId:Int, drawableId:Int, textureId:Int, modelHash:Int):Void;
	static function StartCutsceneAtCoords(x:Float, y:Float, z:Float, flags:Int):Void;
	static function WasCutsceneSkipped():Bool;
	static function SetCutsceneTriggerArea(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float):Void;
	static function StopCutsceneImmediately():Void;
	static function StopCutscene(p0:Bool):Void;
	static function AddCamSplineNodeUsingCameraFrame(cam:Int, cam2:Int, p2:Int, p3:Int):Void;
	static function AddCamSplineNode(camera:Int, x:Float, y:Float, z:Float, xRot:Float, yRot:Float, zRot:Float, length:Int, p8:Int, transitionType:Int):Void;
	static function AddCamSplineNodeUsingCamera(cam:Int, cam2:Int, length:Int, p3:Int):Void;
	static function AddCamSplineNodeUsingGameplayFrame(cam:Int, p1:Int, p2:Int):Void;
	static function AnimatedShakeCam(cam:Int, p1:String, p2:String, p3:String, amplitude:Float):Void;
	static function AnimateGameplayCamZoom(p0:Float, distance:Float):Void;
	static function AnimatedShakeScriptGlobal(p0:String, p1:String, p2:String, p3:Float):Void;
	static function AttachCamToPedBone(cam:Int, ped:Int, boneIndex:Int, xOffset:Float, yOffset:Float, zOffset:Float, isRelative:Bool):Void;
	static function AttachCamToEntity(cam:Int, entity:Int, xOffset:Float, yOffset:Float, zOffset:Float, isRelative:Bool):Void;
	static function AttachCamToPedBone2(cam:Int, ped:Int, boneIndex:Int, p3:Float, p4:Float, p5:Float, p6:Float, p7:Float, p8:Float, p9:Bool):Void;
	static function AttachCamToVehicleBone(cam:Int, vehicle:Int, boneIndex:Int, relativeRotation:Bool, rotX:Float, rotY:Float, rotZ:Float, offX:Float,
		offY:Float, offZ:Float, fixedDirection:Bool):Void;
	static function ClampGameplayCamYaw(minimum:Float, maximum:Float):Void;
	static function ClampGameplayCamPitch(minimum:Float, maximum:Float):Void;
	static function CreateCam(camName:String, active:Bool):Int;
	static function CreateCamera(camHash:Int, active:Bool):Int;
	static function CreateCameraWithParams(camHash:Int, posX:Float, posY:Float, posZ:Float, rotX:Float, rotY:Float, rotZ:Float, fov:Float, active:Bool,
		rotationOrder:Int):Int;
	static function CreateCamWithParams(camName:String, posX:Float, posY:Float, posZ:Float, rotX:Float, rotY:Float, rotZ:Float, fov:Float, active:Bool,
		rotationOrder:Int):Int;
	static function DisableAimCamThisUpdate():Void;
	static function CustomMenuCoordinates(p0:Float):Void;
	static function DestroyAllCams(bScriptHostCam:Bool):Void;
	static function DetachCam(cam:Int):Void;
	static function CreateCinematicShot(p0:Int, p1:Int, p2:Int, entity:Int):Void;
	static function DisableFirstPersonCamThisFrame():Void;
	static function DisableCamCollisionForObject(entity:Int):Void;
	static function DisableCamCollisionForEntity(entity:Int):Void;
	static function DestroyCam(cam:Int, bScriptHostCam:Bool):Void;
	static function DisableVehicleFirstPersonCamThisFrame():Void;
	static function DoScreenFadeIn(duration:Int):Void;
	static function EnableCrosshairThisFrame():Void;
	static function DoScreenFadeOut(duration:Int):Void;
	static function GetCamAnimCurrentPhase(cam:Int):Float;
	static function GetCamFarDof(cam:Int):Float;
	static function GetCamActiveViewModeContext():Int;
	static function DoesCamExist(cam:Int):Bool;
	static function GetCamNearClip(cam:Int):Float;
	static function GetCamFarClip(cam:Int):Float;
	static function ForceCinematicRenderingThisUpdate(p0:Bool):Void;
	static function GetCamCoord(cam:Int):Vector3;
	static function GetCamNearDof(cam:Int):Float;
	static function GetCamDofStrength(cam:Int):Float;
	static function GetCamFov(cam:Int):Float;
	static function GetCamSplineNodeIndex(cam:Int):Int;
	static function GetCamRot(cam:Int, rotationOrder:Int):Vector3;
	static function GetCamViewModeForContext(context:Int):Int;
	static function GetCamSplinePhase(cam:Int):Float;
	static function GetFinalRenderedCamFarClip():Float;
	static function GetCamSplineNodePhase(cam:Int):Float;
	static function GetFinalRenderedCamCoord():Vector3;
	static function GetDebugCamera():Int;
	static function GetFinalRenderedCamFov():Float;
	static function GetFinalRenderedCamMotionBlurStrength():Float;
	static function GetFinalRenderedCamNearDof():Float;
	static function GetFinalRenderedCamRot(rotationOrder:Int):Vector3;
	static function GetFinalRenderedCamFarDof():Float;
	static function GetFinalRenderedInWhenFriendlyRot(player:Int, rotationOrder:Int):Vector3;
	static function GetFinalRenderedInWhenFriendlyFov(player:Int):Float;
	static function GetFinalRenderedCamNearClip():Float;
	static function GetFirstPersonAimCamZoomFactor():Float;
	static function GetFollowVehicleCamViewMode():Int;
	static function GetGameplayCamRelativeHeading():Float;
	static function GetFollowPedCamViewMode():Int;
	static function GetFollowVehicleCamZoomLevel():Int;
	static function GetFocusPedOnScreen(p0:Float, p1:Int, p2:Float, p3:Float, p4:Float, p5:Float, p6:Float, p7:Int, p8:Int):Int;
	static function GetGameplayCamRelativePitch():Float;
	static function GetGameplayCamCoord():Vector3;
	static function GetFollowPedCamZoomLevel():Int;
	static function GetRenderingCam():Int;
	static function GetGameplayCamFov():Float;
	static function GetGameplayCamRot(rotationOrder:Int):Vector3;
	static function IsBonnetCinematicCamRendering():Bool;
	static function InvalidateIdleCam():Void;
	static function InvalidateVehicleIdleCam():Void;
	static function IsAimCamActive():Bool;
	static function IsCamRendering(cam:Int):Bool;
	static function IsAimCamThirdPersonActive():Bool;
	static function IsCamActive(cam:Int):Bool;
	static function IsCinematicCamInputActive():Bool;
	static function IsCamPlayingAnim(cam:Int, animName:String, animDictionary:String):Bool;
	static function IsCamInterpolating(cam:Int):Bool;
	static function IsCinematicCamRendering():Bool;
	static function IsCamShaking(cam:Int):Bool;
	static function IsCamSplinePaused(p0:Int):Bool;
	static function IsCinematicIdleCamRendering():Bool;
	static function IsGameplayCamLookingBehind():Bool;
	static function IsCinematicCamShaking():Bool;
	static function IsFirstPersonAimCamActive():Bool;
	static function IsGameplayCamRendering():Bool;
	static function IsCinematicShotActive(p0:Int):Bool;
	static function IsFollowPedCamActive():Bool;
	static function IsGameplayCamShaking():Bool;
	static function IsScreenFadedOut():Bool;
	static function IsFollowVehicleCamActive():Bool;
	static function IsInVehicleCamDisabled():Bool;
	static function IsScreenFadedIn():Bool;
	static function IsSphereVisible(x:Float, y:Float, z:Float, radius:Float):Bool;
	static function IsGameplayHintActive():Bool;
	static function IsScriptGlobalShaking():Bool;
	static function IsScreenFadingOut():Bool;
	static function IsScreenFadingIn():Bool;
	static function OverrideCamSplineMotionBlur(cam:Int, p1:Int, p2:Float, p3:Float):Void;
	static function OverrideCamSplineVelocity(cam:Int, p1:Int, p2:Float, p3:Float):Void;
	static function PlayCamAnim(cam:Int, animName:String, animDictionary:String, x:Float, y:Float, z:Float, xRot:Float, yRot:Float, zRot:Float, p9:Bool,
		p10:Int):Bool;
	static function PlaySynchronizedCamAnim(camera:Int, scene:Int, animName:String, animDictionary:String):Bool;
	static function PointCamAtCoord(cam:Int, x:Float, y:Float, z:Float):Void;
	static function SetCamActive(cam:Int, active:Bool):Void;
	static function PointCamAtEntity(cam:Int, entity:Int, offsetX:Float, offsetY:Float, offsetZ:Float, p5:Bool):Void;
	static function PointCamAtPedBone(cam:Int, ped:Int, boneIndex:Int, x:Float, y:Float, z:Float, p6:Bool):Void;
	static function RenderScriptCams(render:Bool, ease:Bool, easeTime:Int, p3:Bool, p4:Bool):Void;
	static function SetCamAnimCurrentPhase(cam:Int, phase:Float):Void;
	static function SetCamAffectsAiming(cam:Int, toggle:Bool):Void;
	static function ReplayFreeCamGetMaxRange():Float;
	static function SetCamDebugName(camera:Int, name:String):Void;
	static function SetCamCoord(cam:Int, posX:Float, posY:Float, posZ:Float):Void;
	static function SetCamActiveWithInterp(camTo:Int, camFrom:Int, duration:Int, easeLocation:Int, easeRotation:Int):Void;
	static function SetCamDofFocalLengthMultiplier(camera:Int, multiplier:Float):Void;
	static function SetCamDofFocusDistanceBias(camera:Int, p1:Float):Void;
	static function SetCamDofFnumberOfLens(camera:Int, p1:Float):Void;
	static function SetCamDofMaxNearInFocusDistance(camera:Int, p1:Float):Void;
	static function SetCamDofMaxNearInFocusDistanceBlendLevel(camera:Int, p1:Float):Void;
	static function SetCamFarDof(cam:Int, farDOF:Float):Void;
	static function SetCamDofPlanes(cam:Int, p1:Float, p2:Float, p3:Float, p4:Float):Void;
	static function SetCamDofStrength(cam:Int, dofStrength:Float):Void;
	static function SetCamMotionBlurStrength(cam:Int, strength:Float):Void;
	static function SetCamFov(cam:Int, fieldOfView:Float):Void;
	static function SetCamEffect(p0:Int):Void;
	static function SetCamFarClip(cam:Int, farClip:Float):Void;
	static function SetCamNearDof(cam:Int, nearDOF:Float):Void;
	static function SetCamInheritRollVehicle(cam:Int, p1:Bool):Void;
	static function SetCamShakeAmplitude(cam:Int, amplitude:Float):Void;
	static function SetCamSplineNodeExtraFlags(cam:Int, p1:Int, flags:Int):Void;
	static function SetCamNearClip(cam:Int, nearClip:Float):Void;
	static function SetCamSplineNodeEase(cam:Int, p1:Int, p2:Int, p3:Float):Void;
	static function SetCamSplineSmoothingStyle(cam:Int, smoothingStyle:Int):Void;
	static function SetCamRot(cam:Int, rotX:Float, rotY:Float, rotZ:Float, rotationOrder:Int):Void;
	static function SetCamParams(cam:Int, posX:Float, posY:Float, posZ:Float, rotX:Float, rotY:Float, rotZ:Float, fieldOfView:Float, transitionSpeed:Int,
		p9:Int, p10:Int, rotationOrder:Int):Void;
	static function SetCamSplinePhase(cam:Int, p1:Float):Void;
	static function SetCamViewModeForContext(context:Int, viewMode:Int):Void;
	static function SetCamUseShallowDofMode(cam:Int, toggle:Bool):Void;
	static function SetCamSplineDuration(cam:Int, timeDuration:Int):Void;
	static function SetCamSplineNodeVelocityScale(cam:Int, p1:Int, scale:Float):Void;
	static function SetCinematicModeActive(toggle:Bool):Void;
	static function SetFirstPersonAimCamNearClipThisUpdate(distance:Float):Void;
	static function SetCinematicButtonActive(p0:Bool):Void;
	static function SetCinematicCamShakeAmplitude(p0:Float):Void;
	static function SetCinematicNewsChannelActiveThisUpdate():Void;
	static function SetFlyCamMaxHeight(cam:Int, height:Float):Void;
	static function SetFirstPersonAimCamZoomFactor(zoomFactor:Float):Void;
	static function SetFlyCamHorizontalResponse(cam:Int, p1:Float, p2:Float, p3:Float):Void;
	static function SetFirstPersonCamPitchRange(minAngle:Float, maxAngle:Float):Void;
	static function SetFollowPedCamThisUpdate(camName:String, p1:Int):Bool;
	static function SetFlyCamCoordAndConstrain(cam:Int, x:Float, y:Float, z:Float):Void;
	static function SetFlyCamVerticalSpeedMultiplier(cam:Int, p1:Float, p2:Float, p3:Float):Void;
	static function SetFollowPedCamViewMode(viewMode:Int):Void;
	static function SetFollowVehicleCamZoomLevel(zoomLevel:Int):Void;
	static function SetFollowTurretSeatCam(seatIndex:Int):Void;
	static function SetGameplayCamFollowPedThisUpdate(ped:Int):Void;
	static function SetGameplayCamRawPitch(pitch:Float):Void;
	static function SetFollowVehicleCamViewMode(viewMode:Int):Void;
	static function SetGameplayCamRawYaw(yaw:Float):Void;
	static function SetGameplayCamHash(camName:String):Void;
	static function SetGameplayCamRelativeHeading(heading:Float):Void;
	static function SetGameplayCamShakeAmplitude(amplitude:Float):Void;
	static function SetGameplayCamRelativeRotation(roll:Float, pitch:Float, yaw:Float):Void;
	static function SetGameplayCamRelativePitch(angle:Float, scalingFactor:Float):Void;
	static function SetGameplayHintAnimCloseup(toggle:Bool):Void;
	static function SetGameplayCamVehicleCamera(vehicleName:String):Void;
	static function SetGameplayCoordHint(x:Float, y:Float, z:Float, duration:Int, blendOutDuration:Int, blendInDuration:Int, unk:Int):Void;
	static function SetGameplayHintAnimOffsetx(xOffset:Float):Void;
	static function SetGameplayCamVehicleCameraName(vehicleModel:Int):Void;
	static function SetGameplayHintBaseOrbitPitchOffset(value:Float):Void;
	static function SetGameplayEntityHint(entity:Int, xOffset:Float, yOffset:Float, zOffset:Float, p4:Bool, p5:Int, p6:Int, p7:Int, p8:Int):Void;
	static function SetGameplayHintFollowDistanceScalar(value:Float):Void;
	static function SetGameplayHintAnimOffsety(yOffset:Float):Void;
	static function SetGameplayHintFov(FOV:Float):Void;
	static function SetGameplayPedHint(p0:Int, x1:Float, y1:Float, z1:Float, p4:Bool, duration:Int, blendOutDuration:Int, blendInDuration:Int):Void;
	static function SetInVehicleCamStateThisUpdate(p0:Int, p1:Int):Void;
	static function SetGameplayObjectHint(p0:Int, p1:Float, p2:Float, p3:Float, p4:Bool, p5:Int, p6:Int, p7:Int):Void;
	static function SetThirdPersonAimCamNearClipThisUpdate(distance:Float):Void;
	static function SetUseHiDof():Void;
	static function SetGameplayVehicleHint(vehicle:Int, offsetX:Float, offsetY:Float, offsetZ:Float, p4:Bool, time:Int, easeInTime:Int, easeOutTime:Int):Void;
	static function SetUseHiDofInCutscene():Void;
	static function SetWidescreenBorders(p0:Bool, p1:Int):Void;
	static function ShakeCam(cam:Int, type:String, amplitude:Float):Void;
	static function ShakeCinematicCam(p0:String, p1:Float):Void;
	static function ShakeScriptGlobal(p0:String, p1:Float):Void;
	static function StopCamShaking(cam:Int, p1:Bool):Void;
	static function ShakeGameplayCam(shakeName:String, intensity:Float):Void;
	static function StopCamPointing(cam:Int):Void;
	static function StopCinematicShot(p0:Int):Void;
	static function StopCinematicCamShaking(p0:Bool):Void;
	static function StopRenderingScriptCamsUsingCatchUp(render:Bool, p1:Float, p2:Int):Void;
	static function StopCutsceneCamShaking():Void;
	static function StopGameplayHint(p0:Bool):Void;
	static function StopGameplayCamShaking(bStopImmediately:Bool):Void;
	static function StopScriptGlobalShaking(p0:Bool):Void;
	static function UseStuntCameraThisFrame():Void;
	static function DataarrayAddFloat(arrayData:Int, value:Float):Void;
	static function DataarrayAddBool(arrayData:Int, value:Bool):Void;
	static function DataarrayAddInt(arrayData:Int, value:Int):Void;
	static function DataarrayGetBool(arrayData:Int, arrayIndex:Int):Bool;
	static function DataarrayAddDict(arrayData:Int):Int;
	static function DataarrayGetCount(arrayData:Int):Int;
	static function DataarrayAddString(arrayData:Int, value:String):Void;
	static function DataarrayAddVector(arrayData:Int, valueX:Float, valueY:Float, valueZ:Float):Void;
	static function DataarrayGetDict(arrayData:Int, arrayIndex:Int):Int;
	static function DataarrayGetInt(arrayData:Int, arrayIndex:Int):Int;
	static function DataarrayGetFloat(arrayData:Int, arrayIndex:Int):Float;
	static function DataarrayGetType(arrayData:Int, arrayIndex:Int):Int;
	static function DataarrayGetString(arrayData:Int, arrayIndex:Int):String;
	static function DatadictCreateArray(objectData:Int, key:String):Int;
	static function DatadictGetArray(objectData:Int, key:String):Int;
	static function DataarrayGetVector(arrayData:Int, arrayIndex:Int):Vector3;
	static function DatadictCreateDict(objectData:Int, key:String):Int;
	static function DatadictGetInt(objectData:Int, key:String):Int;
	static function DatadictGetBool(objectData:Int, key:String):Bool;
	static function DatadictGetDict(objectData:Int, key:String):Int;
	static function DatadictGetVector(objectData:Int, key:String):Vector3;
	static function DatadictGetString(objectData:Int, key:String):String;
	static function DatadictGetFloat(objectData:Int, key:String):Float;
	static function DatadictGetType(objectData:Int, key:String):Int;
	static function DatadictSetBool(objectData:Int, key:String, value:Bool):Void;
	static function DatadictSetFloat(objectData:Int, key:String, value:Float):Void;
	static function DatadictSetString(objectData:Int, key:String, value:String):Void;
	static function DatadictSetInt(objectData:Int, key:String, value:Int):Void;
	static function DatafileDelete():Void;
	static function DatadictSetVector(objectData:Int, key:String, valueX:Float, valueY:Float, valueZ:Float):Void;
	static function DatafileClearWatchList():Void;
	static function DatafileCreate():Void;
	static function DatafileHasLoadedFileData(p0:Int):Bool;
	static function DatafileDeleteRequestedFile(p0:Int):Bool;
	static function DatafileFlushMissionHeader():Void;
	static function DatafileHasValidFileData(p0:Int):Bool;
	static function DatafileIsValidRequestId(index:Int):Bool;
	static function DatafileIsSavePending():Bool;
	static function DatafileSelectActiveFile(p0:Int):Bool;
	static function DatafileSelectCreatorStats(p0:Int):Bool;
	static function DatafileGetFileDict():String;
	static function DatafileSelectUgcData(p0:Int):Bool;
	static function DatafileLoadOfflineUgc(filename:String):Bool;
	static function DatafileSelectUgcStats(p0:Int, p1:Bool):Bool;
	static function DatafileUpdateSaveToCloud(p0:Bool):Bool;
	static function DatafileStoreMissionHeader():Void;
	static function DatafileStartSaveToCloud(filename:String):Bool;
	static function DatafileSelectUgcPlayerData(p0:Int):Bool;
	static function DatafileWatchRequestId(id:Int):Void;
	static function UgcCreateMission(contentName:String, description:String, tagsCsv:String, contentTypeName:String, publish:Bool):Bool;
	static function UgcCreateContent(data:String, dataCount:Int, contentName:String, description:String, tagsCsv:String, contentTypeName:String,
		publish:Bool):Bool;
	static function UgcSetPlayerData(contentId:String, rating:Float, contentTypeName:String):Bool;
	static function UgcUpdateContent(contentId:String, data:Int, dataCount:Int, contentName:String, description:String, tagsCsv:String,
		contentTypeName:String):Bool;
	static function UgcUpdateMission(contentId:String, contentName:String, description:String, tagsCsv:String, contentTypeName:String):Bool;
	static function DecorExistOn(entity:Int, propertyName:String):Bool;
	static function DecorGetBool(entity:Int, propertyName:String):Bool;
	static function DecorGetFloat(entity:Int, propertyName:String):Float;
	static function DecorRegister(propertyName:String, type:Int):Void;
	static function DecorRegisterLock():Void;
	static function DecorIsRegisteredAsType(propertyName:String, type:Int):Bool;
	static function DecorGetInt(entity:Int, propertyName:String):Int;
	static function DecorRemove(entity:Int, propertyName:String):Bool;
	static function DecorSetBool(entity:Int, propertyName:String, value:Bool):Bool;
	static function DecorSetFloat(entity:Int, propertyName:String, value:Float):Bool;
	static function DecorSetInt(entity:Int, propertyName:String, value:Int):Bool;
	static function DecorSetTime(entity:Int, propertyName:String, timestamp:Int):Bool;
	static function HasCloudRequestsFinished(variable:Bool, unused:Int):Bool;
	static function GetExtraContentPackHasBeenInstalled():Bool;
	static function GetIsLoadingScreenActive():Bool;
	static function IsDlcPresent(dlcHash:Int):Bool;
	static function OnEnterMp():Void;
	static function OnEnterSp():Void;
	static function AddShockingEventAtPosition(eventType:Int, x:Float, y:Float, z:Float, duration:Float):Int;
	static function ClearDecisionMakerEventResponse(name:Int, eventType:Int):Void;
	static function AddShockingEventForEntity(eventType:Int, entity:Int, duration:Float):Int;
	static function BlockDecisionMakerEvent(name:Int, eventType:Int):Void;
	static function RemoveAllShockingEvents(p0:Bool):Void;
	static function RemoveShockingEvent(event:Int):Bool;
	static function RemoveShockingEventSpawnBlockingAreas():Void;
	static function SuppressAgitationEventsNextFrame():Void;
	static function SuppressShockingEventsNextFrame():Void;
	static function IsShockingEventInSphere(eventType:Int, x:Float, y:Float, z:Float, radius:Float):Bool;
	static function SuppressShockingEventTypeNextFrame(eventType:Int):Void;
	static function UnblockDecisionMakerEvent(name:Int, eventType:Int):Void;
	static function SetDecisionMaker(ped:Int, name:Int):Void;
	static function ApplyForceToEntityCenterOfMass(entity:Int, forceType:Int, x:Float, y:Float, z:Float, p5:Bool, isDirectionRel:Bool, isForceRel:Bool,
		p8:Bool):Void;
	static function ApplyForceToEntity(entity:Int, forceType:Int, x:Float, y:Float, z:Float, offX:Float, offY:Float, offZ:Float, boneIndex:Int,
		isDirectionRel:Bool, ignoreUpVec:Bool, isForceRel:Bool, p12:Bool, p13:Bool):Void;
	static function AttachEntityBoneToEntityBone(entity1:Int, entity2:Int, entityBone:Int, entityBone2:Int, p4:Bool, p5:Bool):Void;
	static function AttachEntityBoneToEntityBonePhysically(entity1:Int, entity2:Int, entityBone:Int, entityBone2:Int, p4:Bool, p5:Bool):Void;
	static function AttachEntityToEntity(entity1:Int, entity2:Int, boneIndex:Int, xPos:Float, yPos:Float, zPos:Float, xRot:Float, yRot:Float, zRot:Float,
		p9:Bool, useSoftPinning:Bool, collision:Bool, isPed:Bool, rotationOrder:Int, syncRot:Bool):Void;
	static function ClearEntityLastDamageEntity(entity:Int):Void;
	static function CreateModelHideExcludingScriptObjects(x:Float, y:Float, z:Float, radius:Float, model:Int, p5:Bool):Void;
	static function AttachEntityToEntityPhysically(entity1:Int, entity2:Int, boneIndex1:Int, boneIndex2:Int, xPos1:Float, yPos1:Float, zPos1:Float,
		xPos2:Float, yPos2:Float, zPos2:Float, xRot:Float, yRot:Float, zRot:Float, breakForce:Float, fixedRot:Bool, p15:Bool, collision:Bool, teleport:Bool,
		p18:Int):Void;
	static function CreateModelSwap(x:Float, y:Float, z:Float, radius:Float, originalModel:Int, newModel:Int, p6:Bool):Void;
	static function CreateModelHide(x:Float, y:Float, z:Float, radius:Float, model:Int, p5:Bool):Void;
	static function CreateForcedObject(x:Float, y:Float, z:Float, p3:Int, modelHash:Int, p5:Bool):Void;
	static function DeleteEntity(entity:Int):Void;
	static function DoesEntityExist(entity:Int):Bool;
	static function DoesEntityBelongToThisScript(entity:Int, p2:Bool):Bool;
	static function DoesEntityHaveAnimDirector(entity:Int):Bool;
	static function DetachEntity(entity:Int, _dynamic:Bool, collision:Bool):Void;
	static function EnableEntityUnk(entity:Int):Void;
	static function DoesEntityHaveDrawable(entity:Int):Bool;
	static function DoesEntityHavePhysics(entity:Int):Bool;
	static function DoesEntityHaveSkeletonData(entity:Int):Bool;
	static function FindAnimEventPhase(animDictionary:String, animName:String, p2:String, p3:Int, p4:Int):Bool;
	static function ForceEntityAiAndAnimationUpdate(entity:Int):Void;
	static function GetCollisionNormalOfLastHitForEntity(entity:Int):Vector3;
	static function GetEntityAlpha(entity:Int):Int;
	static function FreezeEntityPosition(entity:Int, toggle:Bool):Void;
	static function GetEntityBoneCount(entity:Int):Int;
	static function GetEntityAnimTotalTime(entity:Int, animDict:String, animName:String):Float;
	static function GetEntityAnimCurrentTime(entity:Int, animDict:String, animName:String):Float;
	static function GetAnimDuration(animDict:String, animName:String):Float;
	static function GetEntityBoneIndexByName(entity:Int, boneName:String):Int;
	static function GetEntityBonePosition2(entity:Int, boneIndex:Int):Vector3;
	static function GetEntityAttachedTo(entity:Int):Int;
	static function GetEntityCanBeDamaged(entity:Int):Bool;
	static function GetEntityBoneRotationLocal(entity:Int, boneIndex:Int):Vector3;
	static function GetEntityCoords(entity:Int, alive:Bool):Vector3;
	static function GetEntityForwardX(entity:Int):Float;
	static function GetEntityBoneRotation(entity:Int, boneIndex:Int):Vector3;
	static function GetEntityForwardVector(entity:Int):Vector3;
	static function GetEntityCollisionDisabled(entity:Int):Bool;
	static function GetEntityHeight(entity:Int, X:Float, Y:Float, Z:Float, atTop:Bool, inWorldCoords:Bool):Float;
	static function GetEntityForwardY(entity:Int):Float;
	static function GetEntityHealth(entity:Int):Int;
	static function GetEntityHeading(entity:Int):Float;
	static function GetEntityMaxHealth(entity:Int):Int;
	static function GetEntityHeightAboveGround(entity:Int):Float;
	static function GetEntityModel(entity:Int):Int;
	static function GetEntityMatrix(entity:Int, forwardVector:Vector3, rightVector:Vector3, upVector:Vector3, position:Vector3):Void;
	static function GetEntityLodDist(entity:Int):Int;
	static function GetEntityPitch(entity:Int):Float;
	static function GetEntityPickup(entity:Int, modelHash:Int):Int;
	static function GetEntityPhysicsHeading(entity:Int):Float;
	static function GetEntityProofs(entity:Int, bulletProof:Bool, fireProof:Bool, explosionProof:Bool, collisionProof:Bool, meleeProof:Bool, steamProof:Bool,
		p7:Bool, drownProof:Bool):Bool;
	static function GetEntityPopulationType(entity:Int):Int;
	static function GetEntityRoll(entity:Int):Float;
	static function GetEntityRotationVelocity(entity:Int):Vector3;
	static function GetEntityQuaternion(entity:Int, x:Float, y:Float, z:Float, w:Float):Void;
	static function GetEntityRotation(entity:Int, rotationOrder:Int):Vector3;
	static function GetEntitySpeedVector(entity:Int, relative:Bool):Vector3;
	static function GetLastMaterialHitByEntity(entity:Int):Int;
	static function GetNearestPlayerToEntityOnTeam(entity:Int, team:Int):Int;
	static function GetEntitySpeed(entity:Int):Float;
	static function GetEntityScript(entity:Int, script:Int):String;
	static function GetEntityUprightValue(entity:Int):Float;
	static function GetEntityType(entity:Int):Int;
	static function GetPedIndexFromEntityIndex(entity:Int):Int;
	static function GetEntitySubmergedLevel(entity:Int):Float;
	static function GetEntityVelocity(entity:Int):Vector3;
	static function GetNearestPlayerToEntity(entity:Int):Int;
	static function GetObjectIndexFromEntityIndex(entity:Int):Dynamic;
	static function GetWorldPositionOfEntityBone(entity:Int, boneIndex:Int):Vector3;
	static function GetOffsetFromEntityGivenWorldCoords(entity:Int, posX:Float, posY:Float, posZ:Float):Vector3;
	static function GetOffsetFromEntityInWorldCoords(entity:Int, offsetX:Float, offsetY:Float, offsetZ:Float):Vector3;
	static function HasEntityAnimFinished(entity:Int, animDict:String, animName:String, p3:Int):Bool;
	static function GetVehicleIndexFromEntityIndex(entity:Int):Int;
	static function HasCollisionLoadedAroundEntity(entity:Int):Bool;
	static function HasAnimEventFired(entity:Int, actionHash:Int):Bool;
	static function HasEntityBeenDamagedByAnyObject(entity:Int):Bool;
	static function HasEntityBeenDamagedByEntity(entity1:Int, entity2:Int, p2:Bool):Bool;
	static function HasEntityClearLosToEntity(entity1:Int, entity2:Int, flags:Int):Bool;
	static function HasEntityBeenDamagedByAnyPed(entity:Int):Bool;
	static function HasEntityBeenDamagedByAnyVehicle(entity:Int):Bool;
	static function HasEntityCollidedWithAnything(entity:Int):Bool;
	static function IsAnEntity(handle:Int):Bool;
	static function HasEntityClearLosToEntity2(entity1:Int, entity2:Int, traceType:Int):Int;
	static function HasEntityClearLosToEntityInFront(entity1:Int, entity2:Int):Bool;
	static function IsEntityAPed(entity:Int):Bool;
	static function IsEntityAVehicle(entity:Int):Bool;
	static function IsEntityAMissionEntity(entity:Int):Bool;
	static function IsEntityAtEntity(entity1:Int, entity2:Int, xSize:Float, ySize:Float, zSize:Float, p5:Bool, p6:Bool, p7:Int):Bool;
	static function IsEntityAnObject(entity:Int):Bool;
	static function IsEntityAttachedToAnyObject(entity:Int):Bool;
	static function IsEntityAttached(entity:Int):Bool;
	static function IsEntityAtCoord(entity:Int, xPos:Float, yPos:Float, zPos:Float, xSize:Float, ySize:Float, zSize:Float, p7:Bool, p8:Bool, p9:Int):Bool;
	static function IsEntityAttachedToAnyPed(entity:Int):Bool;
	static function IsEntityAttachedToAnyVehicle(entity:Int):Bool;
	static function IsEntityInAir(entity:Int):Bool;
	static function IsEntityDead(entity:Int):Bool;
	static function IsEntityAttachedToEntity(from:Int, to:Int):Bool;
	static function IsEntityInWater(entity:Int):Bool;
	static function IsEntityInZone(entity:Int, zone:String):Bool;
	static function IsEntityOccluded(entity:Int):Bool;
	static function IsEntityOnScreen(entity:Int):Bool;
	static function IsEntityStatic(entity:Int):Bool;
	static function IsEntityTouchingEntity(entity:Int, targetEntity:Int):Bool;
	static function IsEntityInAngledArea(entity:Int, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, width:Float, debug:Bool, includez:Bool,
		p10:Int):Bool;
	static function IsEntityVisible(entity:Int):Bool;
	static function IsEntityTouchingModel(entity:Int, modelHash:Int):Bool;
	static function IsEntityUpright(entity:Int, angle:Float):Bool;
	static function IsEntityInArea(entity:Int, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, p7:Bool, p8:Bool, p9:Int):Bool;
	static function IsEntityPlayingAnim(entity:Int, animDict:String, animName:String, taskFlag:Int):Bool;
	static function IsEntityVisibleToScript(entity:Int):Bool;
	static function IsEntityUpsidedown(entity:Int):Bool;
	static function IsEntityWaitingForWorldCollision(entity:Int):Bool;
	static function RemoveModelHide(x:Float, y:Float, z:Float, radius:Float, model:Int, p5:Bool):Void;
	static function PlayEntityAnim(entity:Int, animName:String, animDict:String, p3:Float, loop:Bool, stayInAnim:Bool, p6:Bool, delta:Float, bitset:Int):Bool;
	static function PlaySynchronizedEntityAnim(entity:Int, syncedScene:Int, animation:String, propName:String, p4:Float, p5:Float, p6:Int, p7:Float):Bool;
	static function ProcessEntityAttachments(entity:Int):Void;
	static function PlaySynchronizedMapEntityAnim(p0:Float, p1:Float, p2:Float, p3:Float, p4:Int, p5:Int, p6:Int, p7:Int, p8:Float, p9:Float, p10:Int,
		p11:Float):Bool;
	static function RemoveForcedObject(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function SetEntityAlpha(entity:Int, alphaLevel:Int, skin:Bool):Void;
	static function RemoveModelSwap(x:Float, y:Float, z:Float, radius:Float, originalModel:Int, newModel:Int, p6:Bool):Void;
	static function ResetEntityAlpha(entity:Int):Void;
	static function SetEntityAngularVelocity(entity:Int, x:Float, y:Float, z:Float):Void;
	static function SetCanClimbOnEntity(entity:Int, toggle:Bool):Void;
	static function SetEntityCanBeDamaged(entity:Int, toggle:Bool):Void;
	static function SetCanAutoVaultOnEntity(entity:Int, toggle:Bool):Void;
	static function SetEntityAsMissionEntity(entity:Int, p1:Bool, p2:Bool):Void;
	static function SetEntityAlwaysPrerender(entity:Int, toggle:Bool):Void;
	static function SetEntityCollision(entity:Int, toggle:Bool, keepPhysics:Bool):Void;
	static function SetEntityAnimSpeed(entity:Int, animDictionary:String, animName:String, speedMultiplier:Float):Void;
	static function SetEntityAnimCurrentTime(entity:Int, animDictionary:String, animName:String, time:Float):Void;
	static function SetEntityCanBeDamagedByRelationshipGroup(entity:Int, bCanBeDamaged:Bool, relGroup:Int):Void;
	static function SetEntityCoordsWithoutPlantsReset(entity:Int, xPos:Float, yPos:Float, zPos:Float, alive:Bool, deadFlag:Bool, ragdollFlag:Bool,
		clearArea:Bool):Void;
	static function SetEntityAsNoLongerNeeded(entity:Int):Void;
	static function SetEntityCleanupByEngine(entity:Int, toggle:Bool):Void;
	static function SetEntityCompletelyDisableCollision(entity:Int, toggle:Bool, keepPhysics:Bool):Void;
	static function SetEntityHasGravity(entity:Int, toggle:Bool):Void;
	static function SetEntityDecalsDisabled(entity:Int, p1:Bool):Void;
	static function SetEntityCanBeTargetedWithoutLos(entity:Int, toggle:Bool):Void;
	static function SetEntityCoordsNoOffset(entity:Int, xPos:Float, yPos:Float, zPos:Float, alive:Bool, deadFlag:Bool, ragdollFlag:Bool):Void;
	static function SetEntityHealth(entity:Int, health:Int):Void;
	static function SetEntityInvincible(entity:Int, toggle:Bool):Void;
	static function SetEntityHeading(entity:Int, heading:Float):Void;
	static function SetEntityCoords(entity:Int, xPos:Float, yPos:Float, zPos:Float, alive:Bool, deadFlag:Bool, ragdollFlag:Bool, clearArea:Bool):Void;
	static function SetEntityLoadCollisionFlag(entity:Int, toggle:Bool):Void;
	static function SetEntityMaxHealth(entity:Int, value:Int):Void;
	static function SetEntityLights(entity:Int, toggle:Bool):Void;
	static function SetEntityDynamic(entity:Int, toggle:Bool):Void;
	static function SetEntityMotionBlur(entity:Int, toggle:Bool):Void;
	static function SetEntityLodDist(entity:Int, value:Int):Void;
	static function SetEntityNoCollisionEntity(entity1:Int, entity2:Int, thisFrameOnly:Bool):Void;
	static function SetEntityIsTargetPriority(entity:Int, p1:Bool, p2:Float):Void;
	static function SetEntityOnlyDamagedByRelationshipGroup(entity:Int, p1:Bool, relationshipHash:Int):Void;
	static function SetEntityOnlyDamagedByPlayer(entity:Int, toggle:Bool):Void;
	static function SetEntityMaxSpeed(entity:Int, speed:Float):Void;
	static function SetEntityRecordsCollisions(entity:Int, toggle:Bool):Void;
	static function SetEntityRenderScorched(entity:Int, toggle:Bool):Void;
	static function SetEntityTrafficlightOverride(entity:Int, state:Int):Void;
	static function SetEntityProofs(entity:Int, bulletProof:Bool, fireProof:Bool, explosionProof:Bool, collisionProof:Bool, meleeProof:Bool, steamProof:Bool,
		p7:Bool, drownProof:Bool):Void;
	static function SetEntityVelocity(entity:Int, x:Float, y:Float, z:Float):Void;
	static function SetEntityRotation(entity:Int, pitch:Float, roll:Float, yaw:Float, rotationOrder:Int, p5:Bool):Void;
	static function SetEntityQuaternion(entity:Int, x:Float, y:Float, z:Float, w:Float):Void;
	static function SetEntityVisible(entity:Int, toggle:Bool, unk:Bool):Void;
	static function SetObjectAsNoLongerNeeded(object:Dynamic):Void;
	static function StopEntityAnim(entity:Int, animation:String, animGroup:String, p3:Float):Int;
	static function StopSynchronizedEntityAnim(entity:Int, p1:Float, p2:Bool):Bool;
	static function SetVehicleAsNoLongerNeeded(vehicle:Int):Void;
	static function SetPedAsNoLongerNeeded(ped:Int):Void;
	static function StopSynchronizedMapEntityAnim(p0:Float, p1:Float, p2:Float, p3:Float, p4:Int, p5:Float):Bool;
	static function WouldEntityBeOccluded(entityModelHash:Int, x:Float, y:Float, z:Float, p4:Bool):Bool;
	static function GetDlcVehicleData(dlcVehicleIndex:Int, outData:Int):Bool;
	static function DoesShopPedApparelHaveRestrictionTag(componentHash:Int, restrictionTagHash:Int, componentId:Int):Bool;
	static function GetDlcVehicleFlags(dlcVehicleIndex:Int):Int;
	static function GetDlcVehicleModLockHash(hash:Int):Int;
	static function GetDlcWeaponComponentData(dlcWeaponIndex:Int, dlcWeapCompIndex:Int, ComponentDataPtr:Int):Bool;
	static function GetDlcWeaponComponentDataSp(dlcWeaponIndex:Int, dlcWeapCompIndex:Int, ComponentDataPtr:Int):Bool;
	static function GetDlcVehicleModel(dlcVehicleIndex:Int):Int;
	static function GetHashNameForComponent(entity:Int, componentId:Int, drawableVariant:Int, textureVariant:Int):Int;
	static function GetForcedComponent(componentHash:Int, forcedComponentIndex:Int, nameHash:Int, enumValue:Int, componentType:Int):Void;
	static function GetDlcWeaponData(dlcWeaponIndex:Int, outData:Int):Bool;
	static function GetDlcWeaponDataSp(dlcWeaponIndex:Int, outData:Int):Bool;
	static function GetNumDlcVehicles():Int;
	static function GetHashNameForProp(entity:Int, componentId:Int, propIndex:Int, propTextureIndex:Int):Int;
	static function GetNumDlcWeaponComponentsSp(dlcWeaponIndex:Int):Int;
	static function GetForcedProp(componentHash:Int, forcedPropIndex:Int, nameHash:Int, enumValue:Int, anchorPoint:Int):Void;
	static function GetNumDlcWeaponsSp():Int;
	static function GetNumDlcWeapons():Int;
	static function GetShopPedApparelForcedPropCount(componentHash:Int):Int;
	static function GetNumDlcWeaponComponents(dlcWeaponIndex:Int):Int;
	static function GetShopPedApparelForcedComponentCount(componentHash:Int):Int;
	static function GetNumTattooShopDlcItems(character:Int):Int;
	static function GetShopPedApparelVariantComponentCount(componentHash:Int):Int;
	static function GetShopPedComponent(componentHash:Int, outComponent:Int):Void;
	static function GetShopPedOutfit(p0:Int, p1:Int):Void;
	static function GetShopPedApparelVariantPropCount(propHash:Int):Int;
	static function GetShopPedOutfitLocate(p0:Int):Int;
	static function GetShopPedProp(componentHash:Int, outProp:Int):Void;
	static function GetShopPedOutfitPropVariant(outfitHash:Int, variantIndex:Int, outPropVariant:Int):Bool;
	static function GetShopPedOutfitComponentVariant(outfit:Int, slot:Int, outComponentVariant:Int):Bool;
	static function GetShopPedQueryProp(componentId:Int, outProp:Int):Void;
	static function GetShopPedQueryOutfit(outfitIndex:Int, outfit:Int):Void;
	static function GetShopPedQueryComponent(componentId:Int, outComponent:Int):Void;
	static function IsContentItemLocked(itemHash:Int):Bool;
	static function GetVariantComponent(componentHash:Int, variantComponentIndex:Int, nameHash:Int, enumValue:Int, componentType:Int):Void;
	static function GetTattooShopDlcItemData(characterType:Int, decorationIndex:Int, outComponent:Int):Bool;
	static function InitShopPedProp(outProp:Int):Void;
	static function InitShopPedComponent(outComponent:Int):Void;
	static function IsDlcVehicleMod(hash:Int):Bool;
	static function GetVariantProp(componentHash:Int, variantPropIndex:Int, nameHash:Int, enumValue:Int, anchorPoint:Int):Void;
	static function LoadContentChangeSetGroup(hash:Int):Void;
	static function UnloadContentChangeSetGroup(hash:Int):Void;
	static function SetupShopPedApparelQuery(p0:Int, p1:Int, p2:Int, p3:Int):Int;
	static function SetupShopPedOutfitQuery(character:Int, p1:Bool):Int;
	static function SetupShopPedApparelQueryTu(character:Int, p1:Int, p2:Int, p3:Bool, p4:Int, componentId:Int):Int;
	static function GetClosestFirePos(outPosition:Vector3, x:Float, y:Float, z:Float):Bool;
	static function AddExplosion(x:Float, y:Float, z:Float, explosionType:Int, damageScale:Float, isAudible:Bool, isInvisible:Bool, cameraShake:Float):Void;
	static function AddOwnedExplosion(ped:Int, x:Float, y:Float, z:Float, explosionType:Int, damageScale:Float, isAudible:Bool, isInvisible:Bool,
		cameraShake:Float):Void;
	static function GetEntityInsideExplosionArea(explosionType:Int, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, radius:Float):Int;
	static function IsEntityOnFire(entity:Int):Bool;
	static function AddExplosionWithUserVfx(x:Float, y:Float, z:Float, explosionType:Int, explosionFx:Int, damageScale:Float, isAudible:Bool,
		isInvisible:Bool, cameraShake:Float):Void;
	static function GetNumberOfFiresInRange(x:Float, y:Float, z:Float, radius:Float):Int;
	static function IsExplosionActiveInArea(explosionType:Int, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float):Bool;
	static function GetEntityInsideExplosionSphere(explosionType:Int, x:Float, y:Float, z:Float, radius:Float):Int;
	static function IsExplosionInSphere(explosionType:Int, x:Float, y:Float, z:Float, radius:Float):Bool;
	static function IsExplosionInArea(explosionType:Int, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float):Bool;
	static function StartEntityFire(entity:Int):Int;
	static function IsExplosionInAngledArea(explosionType:Int, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, width:Float):Bool;
	static function SetFireSpreadRate(p0:Float):Void;
	static function StopEntityFire(entity:Int):Void;
	static function StopFireInRange(x:Float, y:Float, z:Float, radius:Float):Void;
	static function RemoveScriptFire(fireHandle:Int):Void;
	static function StartScriptFire(X:Float, Y:Float, Z:Float, maxChildren:Int, isGasFire:Bool):Int;
	static function AddEntityIcon(entity:Int, icon:String):Int;
	static function AddPetrolDecal(x:Float, y:Float, z:Float, groundLvl:Float, width:Float, transparency:Float):Int;
	static function AddPetrolTrailDecalInfo(x:Float, y:Float, z:Float, p3:Float):Void;
	static function AddDecal(decalType:Int, posX:Float, posY:Float, posZ:Float, p4:Float, p5:Float, p6:Float, p7:Float, p8:Float, p9:Float, width:Float,
		height:Float, rCoef:Float, gCoef:Float, bCoef:Float, opacity:Float, timeout:Float, p17:Bool, p18:Bool, p19:Bool):Int;
	static function AddOilDecal(x:Float, y:Float, z:Float, groundLvl:Float, width:Float, transparency:Float):Int;
	static function AddTcmodifierOverride(modifierName1:String, modifierName2:String):Void;
	static function AnimpostfxIsRunning(effectName:String):Bool;
	static function AnimpostfxPlay(effectName:String, duration:Int, looped:Bool):Void;
	static function AnimpostfxStop(effectName:String):Void;
	static function AttachTvAudioToEntity(entity:Int):Void;
	static function AnimpostfxStopAll():Void;
	static function BeginTakeMissionCreatorPhoto():Bool;
	static function BeginScaleformMovieMethodOnFrontendHeader(functionName:String):Bool;
	static function BeginScaleformMovieMethod(scaleform:Int, methodName:String):Bool;
	static function AddVehicleCrewEmblem(vehicle:Int, ped:Int, boneIndex:Int, x1:Float, x2:Float, x3:Float, y1:Float, y2:Float, y3:Float, z1:Float, z2:Float,
		z3:Float, scale:Float, p13:Int, alpha:Int):Bool;
	static function BeginTakeHighQualityPhoto():Bool;
	static function BeginScaleformScriptHudMovieMethod(hudComponent:Int, methodName:String):Bool;
	static function AnimpostfxGetUnk(effectName:String):Float;
	static function CallScaleformMovieMethod(scaleform:Int, method:String):Void;
	static function AnimpostfxStopAndDoUnk(effectName:String):Void;
	static function CallScaleformMovieMethodWithString(scaleform:Int, methodName:String, param1:String, param2:String, param3:String, param4:String,
		param5:String):Void;
	static function CallScaleformMovieMethodWithNumberAndString(scaleform:Int, methodName:String, floatParam1:Float, floatParam2:Float, floatParam3:Float,
		floatParam4:Float, floatParam5:Float, stringParam1:String, stringParam2:String, stringParam3:String, stringParam4:String, stringParam5:String):Void;
	static function CascadeShadowsInitSession():Void;
	static function BeginScaleformMovieMethodOnFrontend(functionName:String):Bool;
	static function CascadeShadowsClearShadowSampleType():Void;
	static function CascadeShadowsSetCascadeBoundsScale(p0:Float):Void;
	static function BeginTextCommandScaleformString(textLabel:String):Void;
	static function CascadeShadowsEnableEntityTracker(toggle:Bool):Void;
	static function CallScaleformMovieMethodWithNumber(scaleform:Int, methodName:String, param1:Float, param2:Float, param3:Float, param4:Float,
		param5:Float):Void;
	static function CascadeShadowsSetShadowSampleType(type:String):Void;
	static function CascadeShadowsSetCascadeBounds(p0:Int, p1:Bool, p2:Float, p3:Float, p4:Float, p5:Float, p6:Bool, p7:Float):Void;
	static function CascadeShadowsSetDynamicDepthMode(p0:Bool):Void;
	static function CascadeShadowsSetAircraftMode(p0:Bool):Void;
	static function CascadeShadowsSetEntityTrackerScale(p0:Float):Void;
	static function ClearDrawOrigin():Void;
	static function ClearTvChannelPlaylist(tvChannel:Int):Void;
	static function CascadeShadowsSetDynamicDepthValue(p0:Float):Void;
	static function ClearExtraTimecycleModifier():Void;
	static function ClearTimecycleModifier():Void;
	static function CreateTrackedPoint():Int;
	static function CreateCheckpoint(type:Int, posX1:Float, posY1:Float, posZ1:Float, posX2:Float, posY2:Float, posZ2:Float, diameter:Float, red:Int,
		green:Int, blue:Int, alpha:Int, reserved:Int):Int;
	static function DeleteCheckpoint(checkpoint:Int):Void;
	static function DestroyTrackedPoint(point:Int):Void;
	static function DisableOcclusionThisFrame():Void;
	static function DisableScreenblurFade():Void;
	static function DisableScriptAmbientEffects(p0:Int):Void;
	static function DisableVehicleDistantlights(toggle:Bool):Void;
	static function DrawDebugCross(x:Float, y:Float, z:Float, size:Float, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function DoesParticleFxLoopedExist(ptfxHandle:Int):Bool;
	static function DoesLatestBriefStringExist(briefValue:Int):Bool;
	static function DontRenderInGameUi(p0:Bool):Void;
	static function DoesVehicleHaveCrewEmblem(vehicle:Int, p1:Int):Bool;
	static function DrawDebugSphere(x:Float, y:Float, z:Float, radius:Float, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function DrawDebugBox(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, r:Int, g:Int, b:Int, a:Int):Void;
	static function DrawBox(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function DrawDebugText2d(text:String, x:Float, y:Float, z:Float, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function DrawBinkMovie(binkMovie:Int, posX:Float, posY:Float, scaleX:Float, scaleY:Float, rotation:Float, r:Int, g:Int, b:Int, a:Int):Void;
	static function DrawDebugLine(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, r:Int, g:Int, b:Int, a:Int):Void;
	static function DrawInteractiveSprite(textureDict:String, textureName:String, screenX:Float, screenY:Float, width:Float, height:Float, heading:Float,
		red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function DrawDebugLineWithTwoColours(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, r1:Int, g1:Int, b1:Int, r2:Int, g2:Int, b2:Int,
		alpha1:Int, alpha2:Int):Void;
	static function DrawLightWithRange(posX:Float, posY:Float, posZ:Float, colorR:Int, colorG:Int, colorB:Int, range:Float, intensity:Float):Void;
	static function DrawDebugText(text:String, x:Float, y:Float, z:Float, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function DrawLine(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function DrawLightWithRangeAndShadow(x:Float, y:Float, z:Float, r:Int, g:Int, b:Int, range:Float, intensity:Float, shadow:Float):Void;
	static function DrawPoly(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, x3:Float, y3:Float, z3:Float, red:Int, green:Int, blue:Int,
		alpha:Int):Void;
	static function DrawMarker2(type:Int, posX:Float, posY:Float, posZ:Float, dirX:Float, dirY:Float, dirZ:Float, rotX:Float, rotY:Float, rotZ:Float,
		scaleX:Float, scaleY:Float, scaleZ:Float, red:Int, green:Int, blue:Int, alpha:Int, bobUpAndDown:Bool, faceCamera:Bool, p19:Int, rotate:Bool,
		textureDict:String, textureName:String, drawOnEnts:Bool, p24:Bool):Void;
	static function DrawLowQualityPhotoToPhone(p0:Bool, p1:Bool):Void;
	static function DrawScaleformMovieFullscreenMasked(scaleform1:Int, scaleform2:Int, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function DrawScaleformMovieFullscreen(scaleform:Int, red:Int, green:Int, blue:Int, alpha:Int, unk:Int):Void;
	static function DrawMarker(type:Int, posX:Float, posY:Float, posZ:Float, dirX:Float, dirY:Float, dirZ:Float, rotX:Float, rotY:Float, rotZ:Float,
		scaleX:Float, scaleY:Float, scaleZ:Float, red:Int, green:Int, blue:Int, alpha:Int, bobUpAndDown:Bool, faceCamera:Bool, p19:Int, rotate:Bool,
		textureDict:String, textureName:String, drawOnEnts:Bool):Void;
	static function DrawRect(x:Float, y:Float, width:Float, height:Float, r:Int, g:Int, b:Int, a:Int):Void;
	static function DrawShowroom(p0:String, ped:Int, p2:Int, posX:Float, posY:Float, posZ:Float):Bool;
	static function DrawScaleformMovie3dSolid(scaleform:Int, posX:Float, posY:Float, posZ:Float, rotX:Float, rotY:Float, rotZ:Float, p7:Float, p8:Float,
		p9:Float, scaleX:Float, scaleY:Float, scaleZ:Float, p13:Int):Void;
	static function DrawScaleformMovie3d(scaleform:Int, posX:Float, posY:Float, posZ:Float, rotX:Float, rotY:Float, rotZ:Float, p7:Float, sharpness:Float,
		p9:Float, scaleX:Float, scaleY:Float, scaleZ:Float, p13:Int):Void;
	static function DrawScaleformMovie(scaleformHandle:Int, x:Float, y:Float, width:Float, height:Float, red:Int, green:Int, blue:Int, alpha:Int, unk:Int):Void;
	static function DrawSprite(textureDict:String, textureName:String, screenX:Float, screenY:Float, width:Float, height:Float, heading:Float, red:Int,
		green:Int, blue:Int, alpha:Int):Void;
	static function DrawSpotLightWithShadow(posX:Float, posY:Float, posZ:Float, dirX:Float, dirY:Float, dirZ:Float, colorR:Int, colorG:Int, colorB:Int,
		distance:Float, brightness:Float, roundness:Float, radius:Float, falloff:Float, shadowId:Int):Void;
	static function DrawSphere(x:Float, y:Float, z:Float, radius:Float, r:Int, g:Int, b:Int, opacity:Float):Void;
	static function DrawSpotLight(posX:Float, posY:Float, posZ:Float, dirX:Float, dirY:Float, dirZ:Float, colorR:Int, colorG:Int, colorB:Int, distance:Float,
		brightness:Float, hardness:Float, radius:Float, falloff:Float):Void;
	static function DrawSpriteUv(textureDict:String, textureName:String, x:Float, y:Float, width:Float, height:Float, u1:Float, v1:Float, u2:Float, v2:Float,
		heading:Float, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function DrawSpritePoly2(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, x3:Float, y3:Float, z3:Float, red1:Float, green1:Float,
		blue1:Float, alpha1:Int, red2:Float, green2:Float, blue2:Float, alpha2:Int, red3:Float, green3:Float, blue3:Float, alpha3:Int, textureDict:String,
		textureName:String, u1:Float, v1:Float, w1:Float, u2:Float, v2:Float, w2:Float, u3:Float, v3:Float, w3:Float):Void;
	static function DrawSpritePoly(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, x3:Float, y3:Float, z3:Float, red:Int, green:Int, blue:Int,
		alpha:Int, textureDict:String, textureName:String, u1:Float, v1:Float, w1:Float, u2:Float, v2:Float, w2:Float, u3:Float, v3:Float, w3:Float):Void;
	static function DrawTvChannel(xPos:Float, yPos:Float, xScale:Float, yScale:Float, rotation:Float, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function EnableMovieKeyframeWait(toggle:Bool):Void;
	static function EnableAlienBloodVfx(toggle:Bool):Void;
	static function EndScaleformMovieMethod():Void;
	static function EnableMovieSubtitles(toggle:Bool):Void;
	static function EndScaleformMovieMethodReturnValue():Int;
	static function ForceRenderInGameUi(toggle:Bool):Void;
	static function EnableClownBloodVfx(toggle:Bool):Void;
	static function EndTextCommandScaleformString():Void;
	static function EndTextCommandScaleformString2():Void;
	static function FreeMemoryForMissionCreatorPhoto():Void;
	static function EndPetrolTrailDecals():Void;
	static function FadeUpPedLight(p0:Float):Void;
	static function FreeMemoryForLowQualityPhoto():Void;
	static function GetCurrentNumberOfCloudPhotos():Int;
	static function GetAspectRatio(b:Bool):Float;
	static function FadeDecalsInRange(x:Float, y:Float, z:Float, radius:Float, duration:Float):Void;
	static function GetActiveScreenResolution(x:Int, y:Int):Void;
	static function GetIsWidescreen():Bool;
	static function FreeMemoryForHighQualityPhoto():Void;
	static function GetExtraTimecycleModifierIndex():Int;
	static function GetMaximumNumberOfPhotos():Int;
	static function GetBinkMovieTime(binkMovie:Int):Float;
	static function GetIsHidef():Bool;
	static function GetDecalWashLevel(decal:Int):Float;
	static function GetScaleformMovieMethodReturnValueInt(method_return:Int):Int;
	static function GetRequestingnightvision():Bool;
	static function GetScreenblurFadeCurrentTime():Float;
	static function GetIsPetrolDecalInRange(xCoord:Float, yCoord:Float, zCoord:Float, radius:Float):Bool;
	static function GetScreenCoordFromWorldCoord(worldX:Float, worldY:Float, worldZ:Float, screenX:Float, screenY:Float):Bool;
	static function GetMaximumNumberOfCloudPhotos():Int;
	static function GetStatusOfSortedListOperation(p0:Bool):Int;
	static function GetSafeZoneSize():Float;
	static function GetScriptGfxPosition(x:Float, y:Float, calculatedX:Float, calculatedY:Float):Void;
	static function GetScaleformMovieMethodReturnValueBool(methodReturn:Int):Bool;
	static function GetStatusOfTakeHighQualityPhoto():Int;
	static function GetStatusOfTakeMissionCreatorPhoto():Int;
	static function GetScaleformMovieMethodReturnValueString(method_return:Int):String;
	static function GetScreenResolution(x:Int, y:Int):Void;
	static function GetStatusOfLoadMissionCreatorPhoto(p0:String):Int;
	static function GetStatusOfSaveHighQualityPhoto():Int;
	static function GetTextureResolution(textureDict:String, textureName:String):Vector3;
	static function GetTimecycleTransitionModifierIndex():Int;
	static function GetTvVolume():Float;
	static function GetTvChannel():Int;
	static function GetTimecycleModifierIndex():Int;
	static function GetVehicleCrewEmblemRequestState(vehicle:Int, p1:Int):Int;
	static function GolfTrailGetMaxHeight():Float;
	static function GolfTrailSetEnabled(toggle:Bool):Void;
	static function GolfTrailSetFacing(p0:Bool):Void;
	static function GetTogglePausedRenderphasesStatus():Bool;
	static function GetUsingnightvision():Bool;
	static function GolfTrailGetVisualControlPoint(p0:Int):Vector3;
	static function GolfTrailSetShaderParams(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float):Void;
	static function GolfTrailSetRadius(p0:Float, p1:Float, p2:Float):Void;
	static function GetUsingseethrough():Bool;
	static function GrassLodShrinkScriptAreas(x:Float, y:Float, z:Float, radius:Float, p4:Float, p5:Float, p6:Float):Void;
	static function GolfTrailSetPath(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Float, p7:Float, p8:Bool):Void;
	static function GrassLodResetScriptAreas():Void;
	static function GolfTrailSetColour(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int, p7:Int, p8:Int, p9:Int, p10:Int, p11:Int):Void;
	static function HasScaleformScriptHudMovieLoaded(hudComponent:Int):Bool;
	static function HasStreamedTextureDictLoaded(textureDict:String):Bool;
	static function GolfTrailSetTessellation(p0:Int, p1:Int):Void;
	static function HasScaleformMovieLoaded(scaleformHandle:Int):Bool;
	static function IsDecalAlive(decal:Int):Bool;
	static function IsScaleformMovieMethodReturnValueReady(method_return:Int):Bool;
	static function IsPlaylistUnk(tvChannel:Int, p1:Int):Bool;
	static function GolfTrailSetFixedControlPoint(type:Int, xPos:Float, yPos:Float, zPos:Float, p4:Float, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function IsTrackedPointVisible(point:Int):Bool;
	static function IsTvPlaylistItemPlaying(videoCliphash:Int):Bool;
	static function LoadMissionCreatorPhoto(p0:String, p1:Int, p2:Int, p3:Bool):Bool;
	static function HasScaleformContainerMovieLoadedIntoParent(scaleformHandle:Int):Bool;
	static function HasScaleformMovieFilenameLoaded(scaleformName:String):Bool;
	static function MoveVehicleDecals(p0:Int, p1:Int):Void;
	static function IsScreenblurFadeRunning():Bool;
	static function LoadMovieMeshSet(movieMeshSetName:String):Int;
	static function OverridePedBadgeTexture(ped:Int, txd:String, txn:String):Bool;
	static function OverrideInteriorSmokeEnd():Void;
	static function PopTimecycleModifier():Void;
	static function PassKeyboardInputToScaleform(scaleformHandle:Int):Bool;
	static function PushTimecycleModifier():Void;
	static function PlayBinkMovie(binkMovie:Int):Void;
	static function OverrideInteriorSmokeLevel(level:Float):Void;
	static function OverrideInteriorSmokeName(name:String):Void;
	static function ReleaseMovieMeshSet(movieMeshSet:Int):Void;
	static function PatchDecalDiffuseMap(decalType:Int, textureDict:String, textureName:String):Void;
	static function QueryMovieMeshSetState(p0:Int):Int;
	static function RemoveDecalsFromObject(obj:Dynamic):Void;
	static function RemoveDecalsFromVehicle(vehicle:Int):Void;
	static function PresetInteriorAmbientCache(timecycleModifierName:String):Void;
	static function RemoveParticleFxInRange(X:Float, Y:Float, Z:Float, radius:Float):Void;
	static function RegisterNoirScreenEffectThisFrame():Void;
	static function RemoveParticleFxFromEntity(entity:Int):Void;
	static function RemoveTcmodifierOverride(p0:String):Void;
	static function RemoveDecalsFromObjectFacing(obj:Dynamic, x:Float, y:Float, z:Float):Void;
	static function RemoveScaleformScriptHudMovie(hudComponent:Int):Void;
	static function RequestScaleformMovieInteractive(scaleformName:String):Int;
	static function ReleaseBinkMovie(binkMovie:Int):Void;
	static function RemoveParticleFx(ptfxHandle:Int, p1:Bool):Void;
	static function RequestScaleformMovieInstance(scaleformName:String):Int;
	static function RemoveDecal(decal:Int):Void;
	static function RequestScaleformScriptHudMovie(hudComponent:Int):Void;
	static function RequestScaleformMovie(scaleformName:String):Int;
	static function ResetExtraTimecycleModifierStrength():Void;
	static function RemoveDecalsInRange(x:Float, y:Float, z:Float, range:Float):Void;
	static function RemoveVehicleCrewEmblem(vehicle:Int, p1:Int):Void;
	static function SaveHighQualityPhoto(unused:Int):Bool;
	static function RequestStreamedTextureDict(textureDict:String, p1:Bool):Void;
	static function RequestScaleformMovie2(scaleformName:String):Int;
	static function ReturnTwo(p0:Int):Int;
	static function ScaleformMovieMethodAddParamFloat(value:Float):Void;
	static function ResetParticleFxOverride(name:String):Void;
	static function ScaleformMovieMethodAddParamPlayerNameString(string:String):Void;
	static function ScaleformMovieMethodAddParamBool(value:Bool):Void;
	static function SeethroughGetMaxThickness():Float;
	static function ResetPausedRenderphases():Void;
	static function ResetScriptGfxAlign():Void;
	static function ScaleformMovieMethodAddParamLatestBriefString(value:Int):Void;
	static function ScaleformMovieMethodAddParamInt(value:Int):Void;
	static function SeethroughSetHiLightIntensity(intensity:Float):Void;
	static function ScaleformMovieMethodAddParamTextureNameString(string:String):Void;
	static function ScaleformMovieMethodAddParamTextureNameString2(string:String):Void;
	static function SeethroughSetMaxThickness(thickness:Float):Void;
	static function SeethroughSetFadeStartDistance(distance:Float):Void;
	static function SeethroughSetFadeEndDistance(distance:Float):Void;
	static function SetArtificialLightsStateAffectsVehicles(toggle:Bool):Void;
	static function SeethroughSetHiLightNoise(noise:Float):Void;
	static function SeethroughReset():Void;
	static function SeethroughSetNoiseAmountMin(amount:Float):Void;
	static function SetBackfaceculling(toggle:Bool):Void;
	static function SeethroughSetColorNear(red:Int, green:Int, blue:Int):Void;
	static function SetBinkMovieTime(binkMovie:Int, progress:Float):Void;
	static function SetBinkMovieUnk2(binkMovie:Int, p1:Bool):Void;
	static function SeethroughSetHeatscale(index:Int, heatScale:Float):Void;
	static function SetArtificialLightsState(state:Bool):Void;
	static function SetCheckpointCylinderHeight(checkpoint:Int, nearHeight:Float, farHeight:Float, radius:Float):Void;
	static function SeethroughSetNoiseAmountMax(amount:Float):Void;
	static function SetCheckpointIconScale(checkpoint:Int, scale:Float):Void;
	static function SetCheckpointRgba2(checkpoint:Int, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function SetBinkMovieVolume(binkMovie:Int, value:Float):Void;
	static function SetBinkMovie(name:String):Int;
	static function SetCheckpointIconHeight(checkpoint:Int, height_multiplier:Float):Void;
	static function SetBinkShouldSkip(binkMovie:Int, shouldSkip:Bool):Void;
	static function SetDisableDecalRenderingThisFrame():Void;
	static function SetCheckpointRgba(checkpoint:Int, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function SetExtraTimecycleModifier(modifierName:String):Void;
	static function SetCurrentPlayerTcmodifier(modifierName:String):Void;
	static function SetFlash(p0:Float, p1:Float, fadeIn:Float, duration:Float, fadeOut:Float):Void;
	static function SetDebugLinesAndSpheresDrawingActive(enabled:Bool):Void;
	static function SetEntityIconVisibility(entity:Int, toggle:Bool):Void;
	static function SetDrawOrigin(x:Float, y:Float, z:Float, p3:Int):Void;
	static function SetForceVehicleTrails(toggle:Bool):Void;
	static function SetEntityIconColor(entity:Int, red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function SetExtraTimecycleModifierStrength(strength:Float):Void;
	static function SetForcePedFootstepsTracks(toggle:Bool):Void;
	static function SetNextPlayerTcmodifier(modifierName:String):Void;
	static function SetNightvision(toggle:Bool):Void;
	static function SetHidofOverride(p0:Bool, p1:Bool, nearplaneOut:Float, nearplaneIn:Float, farplaneOut:Float, farplaneIn:Float):Void;
	static function SetNoisinessoveride(value:Float):Void;
	static function SetNoiseoveride(toggle:Bool):Void;
	static function SetParticleFxCamInsideNonplayerVehicle(vehicle:Int, p1:Bool):Void;
	static function SetParticleFxBulletImpactScale(scale:Float):Void;
	static function SetParticleFxCamInsideVehicle(p0:Bool):Void;
	static function SetParticleFxLoopedEvolution(ptfxHandle:Int, propertyName:String, amount:Float, noNetwork:Bool):Void;
	static function SetParticleFxLoopedColour(ptfxHandle:Int, r:Float, g:Float, b:Float, p4:Bool):Void;
	static function SetParticleFxLoopedOffsets(ptfxHandle:Int, x:Float, y:Float, z:Float, rotX:Float, rotY:Float, rotZ:Float):Void;
	static function SetParticleFxNonLoopedAlpha(alpha:Float):Void;
	static function SetParticleFxLoopedAlpha(ptfxHandle:Int, alpha:Float):Void;
	static function SetParticleFxNonLoopedColour(r:Float, g:Float, b:Float):Void;
	static function SetParticleFxOverride(oldAsset:String, newAsset:String):Void;
	static function SetParticleFxLoopedFarClipDist(ptfxHandle:Int, range:Float):Void;
	static function SetParticleFxShootoutBoat(p0:Int):Void;
	static function SetPlayerTcmodifierTransition(value:Float):Void;
	static function SetParticleFxLoopedScale(ptfxHandle:Int, scale:Float):Void;
	static function SetScaleformMovieToUseSystemTime(scaleform:Int, toggle:Bool):Void;
	static function SetScriptGfxDrawBehindPausemenu(flag:Bool):Void;
	static function SetSeethrough(toggle:Bool):Void;
	static function SetParticleFxNonLoopedEmitterScale(p0:Float, p1:Float, scale:Float):Void;
	static function SetTimecycleModifier(modifierName:String):Void;
	static function SetScaleformMovieAsNoLongerNeeded(scaleformHandle:Int):Void;
	static function SetScaleformFitRendertarget(scaleformHandle:Int, toggle:Bool):Void;
	static function SetStreamedTextureDictAsNoLongerNeeded(textureDict:String):Void;
	static function SetScriptGfxAlignParams(x:Float, y:Float, w:Float, h:Float):Void;
	static function SetScriptGfxAlign(horizontalAlign:Int, verticalAlign:Int):Void;
	static function SetTimecycleModifierStrength(strength:Float):Void;
	static function SetScriptGfxDrawOrder(order:Int):Void;
	static function SetTvChannelPlaylist(tvChannel:Int, playlistName:String, restart:Bool):Void;
	static function SetTransitionTimecycleModifier(modifierName:String, transition:Float):Void;
	static function SetTrackedPointInfo(point:Int, x:Float, y:Float, z:Float, radius:Float):Void;
	static function SetTvChannelPlaylistAtHour(tvChannel:Int, playlistName:String, hour:Int):Void;
	static function StartNetworkedParticleFxLoopedOnEntity(effectName:String, entity:Int, xOffset:Float, yOffset:Float, zOffset:Float, xRot:Float, yRot:Float,
		zRot:Float, scale:Float, xAxis:Bool, yAxis:Bool, zAxis:Bool):Int;
	static function SetTvAudioFrontend(toggle:Bool):Void;
	static function SetTvChannel(channel:Int):Void;
	static function StartNetworkedParticleFxNonLoopedOnEntityBone(effectName:String, entity:Int, offsetX:Float, offsetY:Float, offsetZ:Float, rotX:Float,
		rotY:Float, rotZ:Float, boneIndex:Int, scale:Float, axisX:Bool, axisY:Bool, axisZ:Bool):Bool;
	static function SetTvVolume(volume:Float):Void;
	static function StartNetworkedParticleFxNonLoopedOnPedBone(effectName:String, ped:Int, offsetX:Float, offsetY:Float, offsetZ:Float, rotX:Float,
		rotY:Float, rotZ:Float, boneIndex:Int, scale:Float, axisX:Bool, axisY:Bool, axisZ:Bool):Bool;
	static function StartParticleFxLoopedAtCoord(effectName:String, x:Float, y:Float, z:Float, xRot:Float, yRot:Float, zRot:Float, scale:Float, xAxis:Bool,
		yAxis:Bool, zAxis:Bool, p11:Bool):Int;
	static function StartNetworkedParticleFxLoopedOnEntityBone(effectName:String, entity:Int, xOffset:Float, yOffset:Float, zOffset:Float, xRot:Float,
		yRot:Float, zRot:Float, boneIndex:Int, scale:Float, xAxis:Bool, yAxis:Bool, zAxis:Bool):Int;
	static function StartNetworkedParticleFxNonLoopedAtCoord(effectName:String, xPos:Float, yPos:Float, zPos:Float, xRot:Float, yRot:Float, zRot:Float,
		scale:Float, xAxis:Bool, yAxis:Bool, zAxis:Bool):Bool;
	static function StartParticleFxLoopedOnPedBone(effectName:String, ped:Int, xOffset:Float, yOffset:Float, zOffset:Float, xRot:Float, yRot:Float,
		zRot:Float, boneIndex:Int, scale:Float, xAxis:Bool, yAxis:Bool, zAxis:Bool):Int;
	static function StartNetworkedParticleFxNonLoopedOnEntity(effectName:String, entity:Int, offsetX:Float, offsetY:Float, offsetZ:Float, rotX:Float,
		rotY:Float, rotZ:Float, scale:Float, axisX:Bool, axisY:Bool, axisZ:Bool):Bool;
	static function StartParticleFxLoopedOnEntityBone(effectName:String, entity:Int, xOffset:Float, yOffset:Float, zOffset:Float, xRot:Float, yRot:Float,
		zRot:Float, boneIndex:Int, scale:Float, xAxis:Bool, yAxis:Bool, zAxis:Bool):Int;
	static function StartParticleFxNonLoopedAtCoord(effectName:String, xPos:Float, yPos:Float, zPos:Float, xRot:Float, yRot:Float, zRot:Float, scale:Float,
		xAxis:Bool, yAxis:Bool, zAxis:Bool):Int;
	static function StartParticleFxLoopedOnEntity(effectName:String, entity:Int, xOffset:Float, yOffset:Float, zOffset:Float, xRot:Float, yRot:Float,
		zRot:Float, scale:Float, xAxis:Bool, yAxis:Bool, zAxis:Bool):Int;
	static function StartParticleFxNonLoopedOnEntity(effectName:String, entity:Int, offsetX:Float, offsetY:Float, offsetZ:Float, rotX:Float, rotY:Float,
		rotZ:Float, scale:Float, axisX:Bool, axisY:Bool, axisZ:Bool):Bool;
	static function StartPetrolTrailDecals(p0:Float):Void;
	static function StopBinkMovie(binkMovie:Int):Void;
	static function StartParticleFxNonLoopedOnPedBone(effectName:String, ped:Int, offsetX:Float, offsetY:Float, offsetZ:Float, rotX:Float, rotY:Float,
		rotZ:Float, boneIndex:Int, scale:Float, axisX:Bool, axisY:Bool, axisZ:Bool):Bool;
	static function TerraingridActivate(toggle:Bool):Void;
	static function StopParticleFxLooped(ptfxHandle:Int, p1:Bool):Void;
	static function TerraingridSetColours(lowR:Int, lowG:Int, lowB:Int, lowAlpha:Int, R:Int, G:Int, B:Int, Alpha:Int, highR:Int, highG:Int, highB:Int,
		highAlpha:Int):Void;
	static function TriggerScreenblurFadeOut(transitionTime:Float):Bool;
	static function TerraingridSetParams(x:Float, y:Float, z:Float, p3:Float, rotation:Float, p5:Float, width:Float, height:Float, p8:Float, scale:Float,
		glowIntensity:Float, normalHeight:Float, heightDiff:Float):Void;
	static function TogglePausedRenderphases(toggle:Bool):Void;
	static function Ui3dsceneIsAvailable():Bool;
	static function TriggerScreenblurFadeIn(transitionTime:Float):Bool;
	static function UseParticleFxAsset(name:String):Void;
	static function Ui3dscenePushPreset(presetName:String):Bool;
	static function UnpatchDecalDiffuseMap(decalType:Int):Void;
	static function WashDecalsInRange(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function UpdateLightsOnEntity(entity:Int):Void;
	static function WashDecalsFromVehicle(vehicle:Int, p1:Float):Void;
	static function AddToItemset(p0:Int, p1:Int):Bool;
	static function CreateItemset(distri:Bool):Int;
	static function GetIndexedItemInItemset(p0:Int, p1:Int):Int;
	static function DestroyItemset(p0:Int):Void;
	static function GetItemsetSize(x:Int):Int;
	static function CleanItemset(p0:Int):Void;
	static function IsInItemset(p0:Int, p1:Int):Bool;
	static function RemoveFromItemset(p0:Int, p1:Int):Void;
	static function IsItemsetValid(p0:Int):Bool;
	static function ActivateInteriorEntitySet(interior:Int, entitySetName:String):Void;
	static function CapInterior(interiorID:Int, toggle:Bool):Void;
	static function ClearInteriorForEntity(entity:Int):Void;
	static function ClearRoomForGameViewport():Void;
	static function AddPickupToInteriorRoomByName(pickup:Int, roomName:String):Void;
	static function ForceRoomForEntity(entity:Int, interior:Int, roomHashKey:Int):Void;
	static function DisableInterior(interiorID:Int, toggle:Bool):Void;
	static function ClearRoomForEntity(entity:Int):Void;
	static function DeactivateInteriorEntitySet(interior:Int, entitySetName:String):Void;
	static function GetInteriorAtCoordsWithType(x:Float, y:Float, z:Float, interiorType:String):Int;
	static function EnableScriptCullModelThisFrame(mapObjectHash:Int):Void;
	static function EnableExteriorCullModelThisFrame(mapObjectHash:Int):Void;
	static function ForceRoomForGameViewport(interiorID:Int, roomHashKey:Int):Void;
	static function GetInteriorFromEntity(entity:Int):Int;
	static function GetInteriorGroupId(interior:Int):Int;
	static function GetOffsetFromInteriorInWorldCoords(interior:Int, x:Float, y:Float, z:Float):Vector3;
	static function GetInteriorAtCoordsWithTypehash(x:Float, y:Float, z:Float, typeHash:Int):Int;
	static function GetInteriorAtCoords(x:Float, y:Float, z:Float):Int;
	static function GetRoomKeyForGameViewport():Int;
	static function GetInteriorFromPrimaryView():Int;
	static function GetInteriorFromCollision(x:Float, y:Float, z:Float):Int;
	static function GetKeyForEntityInRoom(entity:Int):Int;
	static function IsInteriorCapped(interiorID:Int):Bool;
	static function GetInteriorLocationAndNamehash(interior:Int, position:Vector3, nameHash:Int):Void;
	static function IsInteriorScene():Bool;
	static function GetInteriorHeading(interior:Int):Float;
	static function GetRoomKeyFromEntity(entity:Int):Int;
	static function IsCollisionMarkedOutside(x:Float, y:Float, z:Float):Bool;
	static function IsInteriorDisabled(interior:Int):Bool;
	static function IsInteriorEntitySetActive(interior:Int, entitySetName:String):Bool;
	static function IsInteriorReady(interiorID:Int):Bool;
	static function IsValidInterior(interior:Int):Bool;
	static function RefreshInterior(interiorID:Int):Void;
	static function SetInteriorEntitySetColor(interior:Int, entitySetName:String, color:Int):Void;
	static function PinInteriorInMemory(interior:Int):Void;
	static function UnpinInterior(interior:Int):Void;
	static function ActivateFrontendMenu(menuhash:Int, togglePause:Bool, component:Int):Void;
	static function AddBlipForCoord(x:Float, y:Float, z:Float):Int;
	static function AddBlipForArea(x:Float, y:Float, z:Float, width:Float, height:Float):Int;
	static function AddBlipForPickup(pickup:Int):Int;
	static function AddNextMessageToPreviousBriefs(p0:Bool):Void;
	static function AddPointToGpsCustomRoute(x:Float, y:Float, z:Float):Void;
	static function AddBlipForEntity(entity:Int):Int;
	static function AddTextComponentInteger(value:Int):Void;
	static function AddBlipForRadius(posX:Float, posY:Float, posZ:Float, radius:Float):Int;
	static function AddPointToGpsMultiRoute(x:Float, y:Float, z:Float):Void;
	static function AddTextComponentSubstringPhoneNumber(p0:String, p1:Int):Void;
	static function AddTextComponentSubstringBlipName(blip:Int):Void;
	static function AddTextComponentFormattedInteger(value:Int, commaSeparated:Bool):Void;
	static function AddTextComponentSubstringTime(timestamp:Int, flags:Int):Void;
	static function AddTextComponentSubstringKeyboardDisplay(string:String):Void;
	static function AddTextComponentSubstringPlayerName(text:String):Void;
	static function AddTextComponentFloat(value:Float, decimalPlaces:Int):Void;
	static function AllowPauseMenuWhenDeadThisFrame():Void;
	static function AddTextComponentSubstringTextLabelHashKey(gxtEntryHash:Int):Void;
	static function AddTextComponentSubstringTextLabel(labelName:String):Void;
	static function BeginTextCommandGetWidth(text:String):Void;
	static function AllowSonarBlips(toggle:Bool):Void;
	static function BeginTextCommandBusyspinnerOn(string:String):Void;
	static function BeginTextCommandClearPrint(text:String):Void;
	static function BeginTextCommandOverrideButtonText(gxtEntry:String):Void;
	static function AddTextComponentSubstringWebsite(website:String):Void;
	static function BeginTextCommandLineCount(entry:String):Void;
	static function BusyspinnerIsDisplaying():Bool;
	static function BeginTextCommandDisplayText(text:String):Void;
	static function BusyspinnerOff():Void;
	static function BeginTextCommandSetBlipName(textLabel:String):Void;
	static function BeginTextCommandDisplayHelp(inputType:String):Void;
	static function BeginTextCommandIsMessageDisplayed(text:String):Void;
	static function BeginTextCommandIsThisHelpMessageBeingDisplayed(labelName:String):Void;
	static function BeginTextCommandObjective(p0:String):Void;
	static function BeginTextCommandThefeedPost(text:String):Void;
	static function BeginTextCommandPrint(GxtEntry:String):Void;
	static function ClearAllBlipRoutes():Void;
	static function ChangeFakeMpCash(cash:Int, bank:Int):Void;
	static function ClearDynamicPauseMenuErrorMessage():Void;
	static function BusyspinnerIsOn():Bool;
	static function ClearFloatingHelp(hudIndex:Int, p1:Bool):Void;
	static function ClearGpsFlags():Void;
	static function ClearAllHelpMessages():Void;
	static function ClearGpsPlayerWaypoint():Void;
	static function ClearGpsCustomRoute():Void;
	static function ClearAdditionalText(p0:Int, p1:Bool):Void;
	static function ClearPedInPauseMenu():Void;
	static function ClearGpsMultiRoute():Void;
	static function ClearBrief():Void;
	static function ClearHelp(toggle:Bool):Void;
	static function ClearRaceGalleryBlips():Void;
	static function ClearGpsRaceTrack():Void;
	static function ClearPrints():Void;
	static function ClearThisPrint(p0:String):Void;
	static function ClearSmallPrints():Void;
	static function ClearReminderMessage():Void;
	static function CreateFakeMpGamerTag(ped:Int, username:String, crewIsPrivate:Bool, crewIsRockstar:Bool, crewName:String, crewRank:Int):Int;
	static function CloseMultiplayerChat():Void;
	static function CloseSocialClubMenu():Void;
	static function DisableFrontendThisFrame():Void;
	static function CreateMpGamerTagWithCrewColor(player:Int, username:String, crewIsPrivate:Bool, crewIsRockstar:Bool, crewName:String, crewRank:Int,
		crewR:Int, crewG:Int, crewB:Int):Void;
	static function DisplayAreaName(toggle:Bool):Void;
	static function DeleteWaypoint():Void;
	static function DisplayAmmoThisFrame(display:Bool):Void;
	static function DisableMultiplayerChat(disable:Bool):Void;
	static function DisplayHelpTextThisFrame(message:String, p1:Bool):Void;
	static function DisplayCash(display:Bool):Void;
	static function DisplayHud(toggle:Bool):Void;
	static function DisplayHudWhenDeadThisFrame():Void;
	static function DisplayRadar(toggle:Bool):Void;
	static function DisplayHudWhenPausedThisFrame():Void;
	static function DisplayPlayerNameTagsOnBlips(toggle:Bool):Void;
	static function DoesTextBlockExist(gxt:String):Bool;
	static function DoesBlipExist(blip:Int):Bool;
	static function DisplaySniperScopeThisFrame():Void;
	static function EndTextCommandClearPrint():Void;
	static function EndTextCommandIsMessageDisplayed():Bool;
	static function DoesBlipHaveGpsRoute(blip:Int):Bool;
	static function DoesPedHaveAiBlip(ped:Int):Bool;
	static function DoesTextLabelExist(gxt:String):Bool;
	static function EndTextCommandBusyspinnerOn(busySpinnerType:Int):Void;
	static function DontTiltMinimapThisFrame():Void;
	static function EndTextCommandObjective(p0:Bool):Void;
	static function EndTextCommandIsThisHelpMessageBeingDisplayed(hudIndex:Int):Bool;
	static function EndTextCommandPrint(duration:Int, drawImmediately:Bool):Void;
	static function EndTextCommandDisplayText(x:Float, y:Float):Void;
	static function EndTextCommandDisplayHelp(shape:Int, loop:Bool, beep:Bool, duration:Int):Void;
	static function EndTextCommandOverrideButtonText(buttonIndex:Int):Void;
	static function EndTextCommandSetBlipName(blip:Int):Void;
	static function EndTextCommandGetWidth(p0:Bool):Float;
	static function EndTextCommandLineCount(x:Float, y:Float):Int;
	static function EndTextCommandThefeedPostAward(textureDict:String, textureName:String, rpBonus:Int, colorOverlay:Int, titleLabel:String):Int;
	static function EndTextCommandThefeedPostMpticker(blink:Bool, bHasTokens:Bool):Int;
	static function EndTextCommandThefeedPostCrewtagWithGameName(crewTypeIsPrivate:Bool, crewTagContainsRockstar:Bool, crewTag:Int, rank:Int, isLeader:Bool,
		isImportant:Bool, clanHandle:Int, gamerStr:String, r:Int, g:Int, b:Int):Int;
	static function EndTextCommandThefeedPostCrewRankup(chTitle:String, clanTxd:String, clanTxn:String, isImportant:Bool, showSubtitle:Bool):Int;
	static function EndTextCommandThefeedPostMessagetextTu(picTxd:String, picTxn:String, flash:Bool, iconType:Int, nameStr:String, subtitleStr:String,
		durationMultiplier:Float):Int;
	static function EndTextCommandThefeedPostStats(statTitle:String, iconEnum:Int, stepVal:Bool, barValue:Int, isImportant:Bool, picTxd:String,
		picTxn:String):Int;
	static function EndTextCommandThefeedPostMessagetext(textureDict:String, textureName:String, flash:Bool, iconType:Int, sender:String, subject:String):Int;
	static function EndTextCommandThefeedPostTickerForced(blink:Bool, bHasTokens:Bool):Int;
	static function EndTextCommandThefeedPostCrewtag(crewTypeIsPrivate:Bool, crewTagContainsRockstar:Bool, crewTag:Int, rank:Int, hasFounderStatus:Bool,
		isImportant:Bool, clanHandle:Int, r:Int, g:Int, b:Int):Int;
	static function EndTextCommandThefeedPostReplayInput(type:Int, button:String, text:String):Int;
	static function EndTextCommandThefeedPostMessagetextWithCrewTag(picTxd:String, picTxn:String, flash:Bool, iconType:Int, nameStr:String,
		subtitleStr:String, duration:Float, crewPackedStr:String):Int;
	static function EndTextCommandThefeedPostTicker(isImportant:Bool, bHasTokens:Bool):Int;
	static function EndTextCommandThefeedPostMessagetextGxtEntry(txdName:String, textureName:String, flash:Bool, iconType:Int, sender:String,
		subject:String):Int;
	static function EndTextCommandThefeedPostTickerWithTokens(isImportant:Bool, bHasTokens:Bool):Int;
	static function EndTextCommandThefeedPostReplayIcon(eType:Int, iIcon:Int, sTitle:String):Int;
	static function EndTextCommandThefeedPostUnlockTu(chTitle:String, iconType:Int, chSubtitle:String, isImportant:Bool):Int;
	static function EndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(picTxd:String, picTxn:String, flash:Bool, iconType1:Int, nameStr:String,
		subtitleStr:String, duration:Float, crewPackedStr:String, iconType2:Int, textColor:Int):Int;
	static function FlagPlayerContextInTournament(toggle:Bool):Void;
	static function EndTextCommandThefeedPostVersusTu(ch1TXD:String, ch1TXN:String, val1:Int, ch2TXD:String, ch2TXN:String, val2:Int):Int;
	static function FlashAbilityBar(millisecondsToFlash:Int):Void;
	static function FlashMinimapDisplayWithColor(hudColorIndex:Int):Void;
	static function EndTextCommandThefeedPostUnlock(chTitle:String, iconType:Int, chSubtitle:String):Int;
	static function FlashWantedDisplay(p0:Bool):Void;
	static function ForceSonarBlipsThisFrame():Int;
	static function EndTextCommandThefeedPostUnlockTuWithColor(chTitle:String, iconType:Int, chSubtitle:String, isImportant:Bool, titleColor:Int, p5:Bool):Int;
	static function GetAiBlip2(ped:Int):Int;
	static function GetBlipAlpha(blip:Int):Int;
	static function ForceCloseReportugcMenu():Void;
	static function FlashMinimapDisplay():Void;
	static function GetBlipInfoIdCoord(blip:Int):Vector3;
	static function GetBlipCoords(blip:Int):Vector3;
	static function GetBlipColour(blip:Int):Int;
	static function ForceCloseTextInputBox():Void;
	static function GetBlipInfoIdPickupIndex(blip:Int):Int;
	static function GetBlipFromEntity(entity:Int):Int;
	static function GetBlipInfoIdDisplay(blip:Int):Int;
	static function GetAiBlip(ped:Int):Int;
	static function GetBlipInfoIdType(blip:Int):Int;
	static function GetBlipHudColour(blip:Int):Int;
	static function GetBlipInfoIdEntityIndex(blip:Int):Int;
	static function GetClosestBlipOfType(blipSprite:Int):Int;
	static function GetCurrentWebpageId():Int;
	static function GetCurrentFrontendMenuVersion():Int;
	static function GetBlipSprite(blip:Int):Int;
	static function GetDefaultScriptRendertargetRenderId():Int;
	static function GetHudColour(hudColorIndex:Int, r:Int, g:Int, b:Int, a:Int):Void;
	static function GetBlipRotation(blip:Int):Int;
	static function GetHudComponentPosition(id:Int):Vector3;
	static function GetHudScreenPositionFromWorldPosition(worldX:Float, worldY:Float, worldZ:Float, screenX:Float, screenY:Float):Bool;
	static function GetGlobalActionscriptFlag(flagIndex:Int):Int;
	static function GetCurrentWebsiteId():Int;
	static function GetLengthOfLiteralStringInBytes(string:String):Int;
	static function GetLabelText(labelName:String):String;
	static function GetFirstBlipInfoId(blipSprite:Int):Int;
	static function GetLengthOfLiteralString(string:String):Int;
	static function GetLengthOfStringWithThisTextLabel(gxt:String):Int;
	static function GetMainPlayerBlipId():Int;
	static function GetMenuPedFloatStat(p0:Int, p1:Float):Bool;
	static function GetMenuPedBoolStat(p0:Int, p1:Int):Bool;
	static function GetMenuPedIntStat(p0:Int, p1:Int):Bool;
	static function GetMenuPedMaskedIntStat(p0:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function GetMinimapFowDiscoveryRatio():Float;
	static function GetNamedRendertargetRenderId(name:String):Int;
	static function GetMinimapFowCoordinateIsRevealed(x:Float, y:Float, z:Float):Bool;
	static function GetNumberOfActiveBlips():Int;
	static function GetNorthRadarBlip():Int;
	static function GetNextBlipInfoId(blipSprite:Int):Int;
	static function GetNewSelectedMissionCreatorBlip():Int;
	static function GetPauseMenuState():Int;
	static function GetPauseMenuSelectionData(lastItemMenuId:Int, selectedItemMenuId:Int, selectedItemUniqueId:Int):Void;
	static function GetPauseMenuSelection(lastItemMenuId:Int, selectedItemUniqueId:Int):Void;
	static function GetStandardBlipEnumId():Int;
	static function GetPauseMenuCursorPosition():Vector3;
	static function GetStreetNameFromHashKey(hash:Int):String;
	static function GetScaleformMovieCursorSelection(scaleformHandle:Int, received:Bool, selectionType:Int, context:Int, slotIndex:Int):Bool;
	static function GetWarningMessageTitleHash():Int;
	static function GetRenderedCharacterHeight(size:Float, font:Int):Float;
	static function GetTextSubstringSafe(text:String, position:Int, length:Int, maxLength:Int):String;
	static function GetTextSubstring(text:String, position:Int, length:Int):String;
	static function GetWaypointBlipEnumId():Int;
	static function HasAdditionalTextLoaded(slot:Int):Bool;
	static function GivePedToPauseMenu(ped:Int, p1:Int):Void;
	static function GetTextSubstringSlice(text:String, startPosition:Int, endPosition:Int):String;
	static function HideAreaAndVehicleNameThisFrame():Void;
	static function HasThisAdditionalTextLoaded(gxt:String, slot:Int):Bool;
	static function HasDirectorModeBeenTriggered():Bool;
	static function HideMinimapExteriorMapThisFrame():Void;
	static function HideHudComponentThisFrame(id:Int):Void;
	static function HideHudAndRadarThisFrame():Void;
	static function HideScriptedHudComponentThisFrame(id:Int):Void;
	static function HudForceWeaponWheel(show:Bool):Void;
	static function HideMinimapInteriorMapThisFrame():Void;
	static function HudDisplayLoadingScreenTips():Void;
	static function HideHelpTextThisFrame():Void;
	static function HudWeaponWheelGetSelectedHash():Int;
	static function HudWeaponWheelGetSlotHash(weaponTypeIndex:Int):Int;
	static function HideLoadingOnFadeThisFrame():Void;
	static function HudWeaponWheelIgnoreControlInput(toggle:Bool):Void;
	static function HideNumberOnBlip(blip:Int):Void;
	static function HudWeaponWheelIgnoreSelection():Void;
	static function IsBlipFlashing(blip:Int):Bool;
	static function IsBlipOnMinimap(blip:Int):Bool;
	static function HudSetWeaponWheelTopSlot(weaponHash:Int):Void;
	static function IsFrontendReadyForControl():Bool;
	static function IsBlipShortRange(blip:Int):Bool;
	static function IsHelpMessageBeingDisplayed():Bool;
	static function IsHudComponentActive(id:Int):Bool;
	static function IsFloatingHelpTextOnScreen(hudIndex:Int):Bool;
	static function IsHoveringOverMissionCreatorBlip():Bool;
	static function IsHelpMessageFadingOut():Bool;
	static function IsMinimapInInterior():Bool;
	static function IsHelpMessageOnScreen():Bool;
	static function IsMouseCursorAboveInstructionalButtons():Bool;
	static function IsHudPreferenceSwitchedOn():Bool;
	static function IsHudHidden():Bool;
	static function IsMessageBeingDisplayed():Bool;
	static function IsMissionCreatorBlip(blip:Int):Bool;
	static function IsMinimapRendering():Bool;
	static function IsMpGamerTagActive(gamerTagId:Int):Bool;
	static function IsMpGamerTagFree(gamerTagId:Int):Bool;
	static function IsNamedRendertargetLinked(modelHash:Int):Bool;
	static function IsMpGamerTagMovieActive():Bool;
	static function IsMultiplayerChatActive():Bool;
	static function IsOnlinePoliciesMenuActive():Bool;
	static function IsNavigatingMenuContent():Int;
	static function IsRadarHidden():Bool;
	static function IsNamedRendertargetRegistered(name:String):Bool;
	static function IsPauseMenuActive():Bool;
	static function IsSocialClubActive():Bool;
	static function IsPauseMenuRestarting():Bool;
	static function IsScriptedHudComponentActive(id:Int):Bool;
	static function IsRadarPreferenceSwitchedOn():Bool;
	static function IsValidMpGamerTagMovie(gamerTagId:Int):Bool;
	static function IsScriptedHudComponentHiddenThisFrame(id:Int):Bool;
	static function IsReportugcMenuOpen():Bool;
	static function IsWarningMessageActive2():Bool;
	static function IsStreamingAdditionalText(p0:Int):Bool;
	static function LockMinimapPosition(x:Float, y:Float):Void;
	static function IsSubtitlePreferenceSwitchedOn():Bool;
	static function IsWarningMessageActive():Bool;
	static function IsWaypointActive():Bool;
	static function LinkNamedRendertarget(modelHash:Int):Void;
	static function LockMinimapAngle(angle:Int):Void;
	static function LogDebugInfo(p0:String):Void;
	static function ThefeedForceRenderOff():Void;
	static function ThefeedCommentTeleportPoolOff():Void;
	static function OpenOnlinePoliciesMenu():Void;
	static function OpenReportugcMenu():Void;
	static function OverrideMultiplayerChatPrefix(gxtEntryHash:Int):Void;
	static function PauseMenuGetUniqueIdOfMouseHoveredSlot():Int;
	static function OpenSocialClubMenu():Void;
	static function PauseMenuIsContextActive(contextHash:Int):Bool;
	static function PauseMenuSetWarnOnTabChange(setWarn:Bool):Void;
	static function PauseMenuActivateContext(hash:Int):Void;
	static function PauseMenuSetBusySpinner(p0:Bool, p1:Int, p2:Int):Void;
	static function OverrideMultiplayerChatColour(p0:Int, hudColor:Int):Void;
	static function PauseMenuceptionTheKick():Void;
	static function PauseMenuceptionGoDeeper(pageId:Int):Void;
	static function PauseMenuDeactivateContext(contextHash:Int):Void;
	static function PauseMenuDisableBusyspinner(toggle:Bool):Void;
	static function PauseMenuGetIndexOfMouseHoveredSlot():Int;
	static function PauseMenuIsContextMenuActive():Int;
	static function PulseBlip(blip:Int):Void;
	static function RaceGalleryFullscreen(toggle:Bool):Void;
	static function PauseMenuRedrawInstructionalButtons(p0:Int):Void;
	static function RaceGalleryAddBlip(x:Float, y:Float, z:Float):Int;
	static function RegisterNamedRendertarget(name:String, p1:Bool):Bool;
	static function RefreshWaypoint():Void;
	static function PreloadBusyspinner():Void;
	static function RaceGalleryNextBlipSprite(spriteId:Int):Void;
	static function RemoveMpGamerTag(gamerTagId:Int):Void;
	static function ReleaseNamedRendertarget(name:String):Bool;
	static function RemoveWarningMessageListItems():Void;
	static function RemoveMultiplayerHudCash():Void;
	static function ReleaseControlOfFrontend():Void;
	static function ReplaceHudColour(hudColorIndex:Int, hudColorIndex2:Int):Void;
	static function RemoveMultiplayerBankCash():Void;
	static function RemoveBlip(blip:Int):Void;
	static function RequestAdditionalText(gxt:String, slot:Int):Void;
	static function RemoveMultiplayerWalletCash():Void;
	static function SetAbilityBarValue(value:Float, maxValue:Float):Void;
	static function ReplaceHudColourWithRgba(hudColorIndex:Int, r:Int, g:Int, b:Int, a:Int):Void;
	static function ResetHudComponentValues(id:Int):Void;
	static function RequestAdditionalTextForDlc(gxt:String, slot:Int):Void;
	static function ResetGlobalActionscriptFlag(flagIndex:Int):Void;
	static function SetAbilityBarVisibilityInMultiplayer(visible:Bool):Void;
	static function RestartFrontendMenu(menuHash:Int, p1:Int):Void;
	static function ResetReticuleValues():Void;
	static function SetAllowAbilityBarInMultiplayer(toggle:Bool):Void;
	static function SetBlipAlpha(blip:Int, alpha:Int):Void;
	static function SetBigmapActive(toggleBigMap:Bool, showFullMap:Bool):Void;
	static function SetBlipCategory(blip:Int, index:Int):Void;
	static function SetBlipAsShortRange(blip:Int, toggle:Bool):Void;
	static function SetBlipAsFriendly(blip:Int, toggle:Bool):Void;
	static function SetBlipAsMissionCreatorBlip(blip:Int, toggle:Bool):Void;
	static function SetBlipDisplay(blip:Int, displayId:Int):Void;
	static function SetBlipDisplayIndicatorOnBlip(blip:Int, toggle:Bool):Void;
	static function SetBlipColour(blip:Int, color:Int):Void;
	static function SetBlipBright(blip:Int, toggle:Bool):Void;
	static function SetBlipFade(blip:Int, opacity:Int, duration:Int):Void;
	static function SetBlipFlashInterval(blip:Int, interval:Int):Void;
	static function SetBlipCoords(blip:Int, posX:Float, posY:Float, posZ:Float):Void;
	static function SetBlipFlashes(blip:Int, toggle:Bool):Void;
	static function SetBlipFlashesAlternate(blip:Int, toggle:Bool):Void;
	static function SetBlipHiddenOnLegend(blip:Int, toggle:Bool):Void;
	static function SetBlipHighDetail(blip:Int, toggle:Bool):Void;
	static function SetBlipNameToPlayerName(blip:Int, player:Int):Void;
	static function SetBlipRoute(blip:Int, enabled:Bool):Void;
	static function SetBlipPriority(blip:Int, priority:Int):Void;
	static function SetBlipScale(blip:Int, scale:Float):Void;
	static function SetBlipScaleTransformation(blip:Int, xScale:Float, yScale:Float):Void;
	static function SetBlipFlashTimer(blip:Int, duration:Int):Void;
	static function SetBlipSecondaryColour(blip:Int, r:Int, g:Int, b:Int):Void;
	static function SetBlipNameFromTextFile(blip:Int, gxtEntry:String):Void;
	static function SetBlipShrink(blip:Int, toggle:Bool):Void;
	static function SetBlipShowCone(blip:Int, toggle:Bool):Void;
	static function SetBlipSquaredRotation(blip:Int, heading:Float):Void;
	static function SetFloatingHelpTextScreenPosition(hudIndex:Int, x:Float, y:Float):Void;
	static function SetDirectorModeClearTriggeredFlag():Void;
	static function SetBlipRotation(blip:Int, rotation:Int):Void;
	static function SetFloatingHelpTextStyle(hudIndex:Int, style:Int, hudColor:Int, alpha:Int, arrowPosition:Int, boxOffset:Int):Void;
	static function SetFloatingHelpTextToEntity(hudIndex:Int, entity:Int, offsetX:Float, offsetY:Float):Void;
	static function SetBlipRouteColour(blip:Int, colour:Int):Void;
	static function SetFrontendActive(active:Bool):Void;
	static function SetGpsFlags(p0:Int, p1:Float):Void;
	static function SetBlipSprite(blip:Int, spriteId:Int):Void;
	static function SetGpsMultiRouteRender(toggle:Bool):Void;
	static function SetGpsCustomRouteRender(toggle:Bool, radarThickness:Int, mapThickness:Int):Void;
	static function SetColourOfNextTextComponent(hudColor:Int):Void;
	static function SetInteriorZoomLevelDecreased(toggle:Bool):Void;
	static function SetGpsFlashes(toggle:Bool):Void;
	static function SetMaxArmourHudDisplay(maximumValue:Int):Void;
	static function SetFloatingHelpTextWorldPosition(hudIndex:Int, x:Float, y:Float, z:Float):Void;
	static function SetHudComponentPosition(id:Int, x:Float, y:Float):Void;
	static function SetHelpMessageTextStyle(style:Int, hudColor:Int, alpha:Int, p3:Int, p4:Int):Void;
	static function SetMaxHealthHudDisplay(maximumValue:Int):Void;
	static function SetMainPlayerBlipColour(color:Int):Void;
	static function SetMinimapComponent(componentID:Int, toggle:Bool, hudColor:Int):Int;
	static function SetMinimapBlockWaypoint(toggle:Bool):Void;
	static function SetHealthHudDisplayValues(health:Int, capacity:Int, wasAdded:Bool):Void;
	static function SetMinimapGolfCourse(hole:Int):Void;
	static function SetInteriorZoomLevelIncreased(toggle:Bool):Void;
	static function SetMinimapFowRevealCoordinate(x:Float, y:Float, z:Float):Void;
	static function SetMinimapHideFow(toggle:Bool):Void;
	static function SetMinimapInPrologue(toggle:Bool):Void;
	static function SetMinimapAltitudeIndicatorLevel(altitude:Float, p1:Bool):Void;
	static function SetMinimapGolfCourseOff():Void;
	static function SetMouseCursorActiveThisFrame():Void;
	static function SetMinimapSonarSweep(toggle:Bool):Void;
	static function SetMinimapInSpectatorMode(toggle:Bool, ped:Int):Void;
	static function SetMissionName(p0:Bool, name:String):Void;
	static function SetMouseCursorVisibleInMenus(enable:Bool):Void;
	static function SetMouseCursorSprite(spriteId:Int):Void;
	static function SetMpGamerTagMpBagLargeCount(gamerTagId:Int, count:Int):Void;
	static function SetMissionName2(p0:Bool, name:String):Void;
	static function SetMpGamerTagBigText(gamerTagId:Int, string:String):Void;
	static function SetMpGamerTagDisablePlayerHealthSync(gamerTagId:Int, toggle:Bool):Void;
	static function SetMpGamerTagAlpha(gamerTagId:Int, component:Int, alpha:Int):Void;
	static function SetMpGamerTagUseVehicleHealth(gamerTagId:Int, toggle:Bool):Void;
	static function SetMpGamerTagHealthBarColour(gamerTagId:Int, hudColorIndex:Int):Void;
	static function SetMpGamerTagColour(gamerTagId:Int, component:Int, hudColorIndex:Int):Void;
	static function SetMpGamerTagWantedLevel(gamerTagId:Int, wantedlvl:Int):Void;
	static function SetMpGamerTagOverridePlayerHealth(gamerTagId:Int, health:Int, maximumHealth:Int):Void;
	static function SetMultiplayerWalletCash():Void;
	static function SetMultiplayerHudCash(p0:Int, p1:Int):Void;
	static function SetMpGamerTagVisibilityAll(gamerTagId:Int, toggle:Bool):Void;
	static function SetMpGamerTagName(gamerTagId:Int, string:String):Void;
	static function SetPauseMenuActive(toggle:Bool):Void;
	static function SetPauseMenuPedSleepState(state:Bool):Void;
	static function SetMultiplayerBankCash():Void;
	static function SetPedAiBlipGangId(ped:Int, gangId:Int):Void;
	static function SetMpGamerTagVisibility(gamerTagId:Int, component:Int, toggle:Bool):Void;
	static function SetNewWaypoint(x:Float, y:Float):Void;
	static function SetPauseMenuPedLighting(state:Bool):Void;
	static function SetPedAiBlipNoticeRange(ped:Int, range:Float):Void;
	static function SetPedHasAiBlip(ped:Int, hasCone:Bool):Void;
	static function SetPedAiBlipForcedOn(ped:Int, toggle:Bool):Void;
	static function SetPedHasAiBlipWithColor(ped:Int, hasCone:Bool, color:Int):Void;
	static function SetRaceTrackRender(toggle:Bool):Void;
	static function SetPlayerBlipPositionThisFrame(x:Float, y:Float):Void;
	static function SetRadarAsExteriorThisFrame():Void;
	static function SetPlayerIsInDirectorMode(toggle:Bool):Void;
	static function SetPedAiBlipHasCone(ped:Int, toggle:Bool):Void;
	static function SetRadarAsInteriorThisFrame(interior:Int, x:Float, y:Float, heading:Int, zoom:Int):Void;
	static function SetPedAiBlipSprite(ped:Int, spriteId:Int):Void;
	static function SetRadarZoom(zoomLevel:Int):Void;
	static function SetRadiusBlipEdge(blip:Int, toggle:Bool):Void;
	static function SetRadarZoomToBlip(blip:Int, zoom:Float):Void;
	static function SetRadarZoomPrecise(zoom:Float):Void;
	static function SetScriptVariableHudColour(r:Int, g:Int, b:Int, a:Int):Void;
	static function SetRadarZoomToDistance(zoom:Float):Void;
	static function SetSocialClubTour(name:String):Void;
	static function SetTextDropShadow():Void;
	static function SetTextColour(red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function SetTextJustification(justifyType:Int):Void;
	static function SetTextDropshadow(distance:Int, r:Int, g:Int, b:Int, a:Int):Void;
	static function SetScriptVariable2HudColour(r:Int, g:Int, b:Int, a:Int):Void;
	static function SetTextProportional(p0:Bool):Void;
	static function SetTextEdge(p0:Int, r:Int, g:Int, b:Int, a:Int):Void;
	static function SetTextRightJustify(toggle:Bool):Void;
	static function SetTextCentre(align:Bool):Void;
	static function SetTextLeading(p0:Int):Void;
	static function SetTextFont(fontType:Int):Void;
	static function SetTextScale(scale:Float, size:Float):Void;
	static function SetTextWrap(start:Float, end:Float):Void;
	static function SetTextOutline():Void;
	static function SetUseIslandMap(toggle:Bool):Void;
	static function SetTextRenderId(renderId:Int):Void;
	static function SetWarningMessageWithAlert(labelTitle:String, labelMsg:String, p2:Int, p3:Int, labelMsg2:String, p5:Bool, p6:Int, p7:Int, p8:String,
		p9:String, background:Bool, errorCode:Int):Void;
	static function SetWarningMessage(entryLine1:String, instructionalKey:Int, entryLine2:String, p3:Bool, p4:Int, background:String, p6:String, showBg:Bool,
		errorCode:Int):Void;
	static function SetWarningMessageListRow(index:Int, name:String, cash:Int, rp:Int, lvl:Int, colour:Int):Bool;
	static function SetWarningMessageWithHeader(titleMsg:String, entryLine1:String, flags:Int, promptMsg:String, p4:Bool, p5:Int, background:Bool, p7:Int,
		showBg:Bool):Void;
	static function SetWarningMessageWithHeaderUnk(entryHeader:String, entryLine1:String, flags:Int, entryLine2:String, p4:Bool, p5:Int, p6:Int, p7:Int,
		showBg:Bool, p9:Int, p10:Int):Void;
	static function SetUseWaypointAsDestination(toggle:Bool):Void;
	static function SetWidescreenFormat(p0:Int):Void;
	static function SetWaypointOff():Void;
	static function ShowCrewIndicatorOnBlip(blip:Int, toggle:Bool):Void;
	static function ShowHudComponentThisFrame(id:Int):Void;
	static function ShowHasCompletedIndicatorOnBlip(blip:Int, toggle:Bool):Void;
	static function ShowOutlineIndicatorOnBlip(blip:Int, toggle:Bool):Void;
	static function ShowHeightOnBlip(blip:Int, toggle:Bool):Void;
	static function SetWarningMessageWithHeaderAndSubstringFlags(entryHeader:String, entryLine1:String, instructionalKey:Int, entryLine2:String, p4:Bool,
		p5:Int, p6:Int, p7:Int, p8:Int, p9:Bool):Void;
	static function ShowScriptedHudComponentThisFrame(id:Int):Void;
	static function ShowNumberOnBlip(blip:Int, number:Int):Void;
	static function ShowFriendIndicatorOnBlip(blip:Int, toggle:Bool):Void;
	static function ShowStartMissionInstructionalButton(p0:Bool):Void;
	static function ShowHeadingIndicatorOnBlip(blip:Int, toggle:Bool):Void;
	static function ThefeedDisableLoadingScreenTips():Void;
	static function ShowTickOnBlip(blip:Int, toggle:Bool):Void;
	static function ThefeedForceRenderOn():Void;
	static function ShowSigninUi():Void;
	static function StartGpsMultiRoute(hudColor:Int, routeFromPlayer:Bool, displayOnFoot:Bool):Void;
	static function ThefeedGetFirstVisibleDeleteRemaining():Int;
	static function TakeControlOfFrontend():Void;
	static function StartGpsCustomRoute(hudColor:Int, displayOnFoot:Bool, followPlayer:Bool):Void;
	static function SuppressFrontendRenderingThisFrame():Void;
	static function ThefeedOnlyShowTooltips(toggle:Bool):Void;
	static function ThefeedClearFrozenPost():Void;
	static function ThefeedCommentTeleportPoolOn():Void;
	static function ThefeedFlushQueue():Void;
	static function ThefeedRemoveItem(notificationId:Int):Void;
	static function ThefeedDisplayLoadingScreenTips():Void;
	static function ThefeedFreezeNextPost():Void;
	static function ThefeedPause():Void;
	static function ThefeedIsPaused():Bool;
	static function ThefeedSetFlushAnimpostfx(toggle:Bool):Void;
	static function ThefeedSetAnimpostfxColor(red:Int, green:Int, blue:Int, alpha:Int):Void;
	static function ThefeedSpsExtendWidescreenOff():Void;
	static function ThefeedHideThisFrame():Void;
	static function ThefeedResetAllParameters():Void;
	static function TriggerSonarBlip(posX:Float, posY:Float, posZ:Float, radius:Float, p4:Int):Void;
	static function ThefeedSetAnimpostfxSound(toggle:Bool):Void;
	static function ThefeedResume():Void;
	static function UnlockMinimapPosition():Void;
	static function ThefeedSetScriptedMenuHeight(pos:Float):Void;
	static function ThefeedSetAnimpostfxCount(count:Int):Void;
	static function ThefeedUpdateItemTexture(txdString1:String, txnString1:String, txdString2:String, txnString2:String):Void;
	static function UnlockMinimapAngle():Void;
	static function ThefeedSetNextPostBackgroundColor(hudColorIndex:Int):Void;
	static function UseFakeMpCash(p0:Bool):Void;
	static function ThefeedSpsExtendWidescreenOn():Void;
	static function ToggleStealthRadar(toggle:Bool):Void;
	static function LoadingscreenGetLoadFreemode():Bool;
	static function LoadingscreenIsLoadingFreemode():Bool;
	static function LoadingscreenGetLoadFreemodeWithEventName():Bool;
	static function LoadingscreenSetIsLoadingFreemode(toggle:Bool):Void;
	static function LoadingscreenSetLoadFreemode(toggle:Bool):Void;
	static function LoadingscreenSetLoadFreemodeWithEventName(toggle:Bool):Void;
	static function LocalizationGetSystemLanguage():Int;
	static function LocalizationGetSystemDateFormat():Int;
	static function GetCurrentLanguage():Int;
	static function CanPhoneBeSeenOnScreen():Bool;
	static function CellCamMoveFinger(direction:Int):Void;
	static function CellCamIsCharVisibleNoFaceCheck(entity:Int):Bool;
	static function CellCamDisableThisFrame(toggle:Bool):Void;
	static function CellCamActivate(p0:Bool, p1:Bool):Void;
	static function CellCamSetDistance(p0:Float):Void;
	static function CellCamSetHeadPitch(p0:Float):Void;
	static function CellCamSetHeadHeight(p0:Float):Void;
	static function GetMobilePhonePosition(position:Vector3):Void;
	static function CellCamSetHeadRoll(p0:Float):Void;
	static function CellCamSetHorizontalOffset(p0:Float):Void;
	static function CellCamSetRoll(p0:Float):Void;
	static function SetMobilePhoneRotation(rotX:Float, rotY:Float, rotZ:Float, p3:Int):Void;
	static function SetMobilePhoneUnk(toggle:Bool):Void;
	static function GetMobilePhoneRenderId(renderId:Int):Void;
	static function CellCamSetVerticalOffset(p0:Float):Void;
	static function CellCamSetLean(toggle:Bool):Void;
	static function CreateMobilePhone(phoneType:Int):Void;
	static function DestroyMobilePhone():Void;
	static function GetMobilePhoneRotation(rotation:Vector3, p1:Int):Void;
	static function ScriptIsMovingMobilePhoneOffscreen(toggle:Bool):Void;
	static function SetMobilePhonePosition(posX:Float, posY:Float, posZ:Float):Void;
	static function SetMobilePhoneScale(scale:Float):Void;
	static function Absf(value:Float):Float;
	static function Absi(value:Int):Int;
	static function AddHospitalRestart(x:Float, y:Float, z:Float, p3:Float, p4:Int):Int;
	static function AddDispatchSpawnBlockingAngledArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, width:Float):Int;
	static function AddPopMultiplierSphere(x:Float, y:Float, z:Float, radius:Float, pedMultiplier:Float, vehicleMultiplier:Float, p6:Bool, p7:Bool):Int;
	static function AddDispatchSpawnBlockingArea(x1:Float, y1:Float, x2:Float, y2:Float):Int;
	static function Acos(p0:Float):Float;
	static function AddPoliceRestart(p0:Float, p1:Float, p2:Float, p3:Float, p4:Int):Int;
	static function AddPopMultiplierArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, p6:Float, p7:Float, p8:Bool):Int;
	static function AddReplayStatValue(value:Int):Void;
	static function AddTacticalAnalysisPoint(x:Float, y:Float, z:Float):Void;
	static function Asin(p0:Float):Float;
	static function AllowMissionCreatorWarp(toggle:Bool):Void;
	static function AddStuntJump(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, x3:Float, y3:Float, z3:Float, x4:Float, y4:Float, z4:Float,
		camX:Float, camY:Float, camZ:Float, unk1:Int, unk2:Int, unk3:Int):Int;
	static function BeginReplayStats(p0:Int, p1:Int):Void;
	static function AddStuntJumpAngled(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, radius1:Float, x3:Float, y3:Float, z3:Float, x4:Float,
		y4:Float, z4:Float, radius2:Float, camX:Float, camY:Float, camZ:Float, unk1:Int, unk2:Int, unk3:Int):Int;
	static function AreProfileSettingsValid():Bool;
	static function AreStringsEqual(string1:String, string2:String):Bool;
	static function Atan(p0:Float):Float;
	static function CancelStuntJump():Void;
	static function CancelOnscreenKeyboard():Void;
	static function Atan2(p0:Float, p1:Float):Float;
	static function BlockDispatchServiceResourceCreation(dispatchService:Int, toggle:Bool):Void;
	static function ClearArea(X:Float, Y:Float, Z:Float, radius:Float, p4:Bool, ignoreCopCars:Bool, ignoreObjects:Bool, p7:Bool):Void;
	static function CleanupAsyncInstall():Void;
	static function ClearAngledAreaOfVehicles(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, width:Float, p7:Bool, p8:Bool, p9:Bool, p10:Bool,
		p11:Bool):Void;
	static function ClearAreaOfVehicles(x:Float, y:Float, z:Float, radius:Float, p4:Bool, p5:Bool, p6:Bool, p7:Bool, p8:Bool):Void;
	static function ClearBit(address:Int, offset:Int):Void;
	static function ClearAreaLeaveVehicleHealth(x:Float, y:Float, z:Float, radius:Float, p4:Bool, p5:Bool, p6:Bool, p7:Bool):Void;
	static function ClearOverrideWeather():Void;
	static function ClearCloudHat():Void;
	static function ClearAreaOfCops(x:Float, y:Float, z:Float, radius:Float, createNetEvent:Bool):Void;
	static function ClearAreaOfObjects(x:Float, y:Float, z:Float, radius:Float, flags:Int):Void;
	static function ClearReplayStats():Void;
	static function ClearTacticalAnalysisPoints():Void;
	static function ClearAreaOfProjectiles(x:Float, y:Float, z:Float, radius:Float, createNetEvent:Bool):Void;
	static function ClearAreaOfPeds(x:Float, y:Float, z:Float, radius:Float, createNetEvent:Bool):Void;
	static function CompareStrings(str1:String, str2:String, matchCase:Bool, maxLength:Int):Int;
	static function ClearWeatherTypePersist():Void;
	static function ClearWeatherTypeNowPersistNetwork(transitionTimeInMs:Int):Void;
	static function CreateIncidentWithEntity(dispatchService:Int, ped:Int, numUnits:Int, radius:Float, outIncidentID:Int):Bool;
	static function CopyMemory(dst:Int, src:Int, size:Int):Void;
	static function DeleteStuntJump(p0:Int):Void;
	static function ClearRestartCustomPosition():Void;
	static function DisablePoliceRestart(policeIndex:Int, toggle:Bool):Void;
	static function DisableHospitalRestart(hospitalIndex:Int, toggle:Bool):Void;
	static function DisplayOnscreenKeyboard(p0:Int, windowTitle:String, p2:String, defaultText:String, defaultConcat1:String, defaultConcat2:String,
		defaultConcat3:String, maxInputLength:Int):Void;
	static function CreateIncident(dispatchService:Int, x:Float, y:Float, z:Float, numUnits:Int, radius:Float, outIncidentID:Int):Bool;
	static function DisableStuntJumpSet(p0:Int):Void;
	static function DeleteIncident(incidentId:Int):Void;
	static function EnableStuntJumpSet(p0:Int):Void;
	static function DisplayOnscreenKeyboardWithLongerInitialString(p0:Int, windowTitle:String, p2:Int, defaultText:String, defaultConcat1:String,
		defaultConcat2:String, defaultConcat3:String, defaultConcat4:String, defaultConcat5:String, defaultConcat6:String, defaultConcat7:String,
		maxInputLength:Int):Void;
	static function DoesPopMultiplierSphereExist(id:Int):Bool;
	static function DoesPopMultiplierAreaExist(id:Int):Bool;
	static function EndReplayStats():Void;
	static function EnableTennisMode(ped:Int, toggle:Bool, p2:Bool):Void;
	static function DoAutoSave():Void;
	static function FindSpawnPointInDirection(posX:Float, posY:Float, posZ:Float, dirX:Float, dirY:Float, dirZ:Float, distance:Float, spawnPoint:Vector3):Bool;
	static function ForceSocialClubUpdate():Void;
	static function ForceLightningFlash():Void;
	static function EnableDispatchService(dispatchService:Int, toggle:Bool):Void;
	static function GetAllocatedStackSize():Int;
	static function GetBaseElementMetadata(p1:Int, p2:Int, p3:Int, p4:Bool):Bool;
	static function ForceGameStatePlaying():Void;
	static function GetBenchmarkIterationsFromCommandLine():Int;
	static function GetBitsInRange(_var:Int, rangeStart:Int, rangeEnd:Int):Int;
	static function GetDistanceBetweenCoords(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, useZ:Bool):Float;
	static function GetCoordsOfProjectileTypeWithinDistance(ped:Int, weaponHash:Int, distance:Float, outCoords:Vector3, ownedByPlayer:Bool):Bool;
	static function GetFrameTime():Float;
	static function GetBenchmarkPassFromCommandLine():Int;
	static function GetAngleBetween2dVectors(x1:Float, y1:Float, x2:Float, y2:Float):Float;
	static function GetCloudHatOpacity():Float;
	static function GetGameTimer():Int;
	static function GetBenchmarkTime():Float;
	static function GetFakeWantedLevel():Int;
	static function GetGroundZAndNormalFor3dCoord(x:Float, y:Float, z:Float, groundZ:Float, normal:Vector3):Bool;
	static function GetGroundZFor3dCoord(x:Float, y:Float, z:Float, groundZ:Float, ignoreWater:Bool):Bool;
	static function GetIndexOfCurrentLevel():Int;
	static function GetCoordsOfProjectileTypeInArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, projectileHash:Int, projectilePos:Vector3,
		ownedByPlayer:Bool):Bool;
	static function GetGroundZFor3dCoord2(x:Float, y:Float, z:Float, groundZ:Float, p4:Bool):Bool;
	static function GetModelDimensions(modelHash:Int, minimum:Vector3, maximum:Vector3):Void;
	static function GetFrameCount():Int;
	static function GetHeadingFromVector2d(dx:Float, dy:Float):Float;
	static function GetIsAutoSaveOff():Bool;
	static function GetNumDispatchedUnitsForPlayer(dispatchService:Int):Int;
	static function GetNextWeatherTypeHashName():Int;
	static function GetGlobalCharBuffer():String;
	static function GetMissionFlag():Bool;
	static function GetPowerSavingModeDuration():Int;
	static function GetHashKey(string:String):Int;
	static function GetNumSuccessfulStuntJumps():Int;
	static function GetNumberOfFreeStacksOfThisSize(stackSize:Int):Int;
	static function GetIsPlayerInAnimalForm():Bool;
	static function GetPrevWeatherTypeHashName():Int;
	static function GetProjectileNearPed(ped:Int, weaponHash:Int, distance:Float, outCoords:Vector3, outProjectile:Dynamic, ownedByPlayer:Bool):Bool;
	static function GetProfileSetting(profileSetting:Int):Int;
	static function GetRandomIntInRange(startRange:Int, endRange:Int):Int;
	static function GetRandomEventFlag():Bool;
	static function GetReplayStatCount():Int;
	static function GetReplayStatAtIndex(index:Int):Int;
	static function GetOnscreenKeyboardResult():String;
	static function GetRandomIntInRange2(startRange:Int, endRange:Int):Int;
	static function GetRainLevel():Float;
	static function GetReplayStatMissionType():Int;
	static function GetSizeOfSaveData(p0:Bool):Int;
	static function GetRandomFloatInRange(startRange:Float, endRange:Float):Float;
	static function GetStatusOfMissionRepeatSave():Int;
	static function GetSnowLevel():Float;
	static function GetTotalSuccessfulStuntJumps():Int;
	static function GetWeatherTypeTransition(weatherType1:Int, weatherType2:Int, percentWeather2:Float):Void;
	static function GetWindSpeed():Float;
	static function GetWindDirection():Vector3;
	static function GetTennisSwingAnimComplete(ped:Int):Bool;
	static function HasAsyncInstallFinished():Bool;
	static function HasBulletImpactedInArea(x:Float, y:Float, z:Float, p3:Float, p4:Bool, p5:Bool):Bool;
	static function HasBulletImpactedInBox(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Bool, p7:Bool):Bool;
	static function HasResumedFromSuspend():Bool;
	static function HaveCreditsReachedEnd():Bool;
	static function HasCheatStringJustBeenEntered(hash:Int):Bool;
	static function IsAreaOccupied(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Bool, p7:Bool, p8:Bool, p9:Bool, p10:Bool, p11:Int,
		p12:Bool):Bool;
	static function IsAutoSaveInProgress():Bool;
	static function HasButtonCombinationJustBeenEntered(hash:Int, amount:Int):Bool;
	static function IsBulletInArea(x:Float, y:Float, z:Float, radius:Float, ownedByPlayer:Bool):Bool;
	static function IsBulletInBox(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, ownedByPlayer:Bool):Bool;
	static function IgnoreNextRestart(toggle:Bool):Void;
	static function IsDurangoVersion():Bool;
	static function IsAussieVersion():Bool;
	static function IsFrontendFading():Bool;
	static function IsBitSet(address:Int, offset:Int):Bool;
	static function IsBulletInAngledArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, width:Float, ownedByPlayer:Bool):Bool;
	static function IsIncidentValid(incidentId:Int):Bool;
	static function IsCommandLineBenchmarkValueSet():Bool;
	static function IsMemoryCardInUse():Bool;
	static function IsInPowerSavingMode():Bool;
	static function IsNextWeatherType(weatherType:String):Bool;
	static function IsMinigameInProgress():Bool;
	static function IsPcVersion():Bool;
	static function IsOrbisVersion():Bool;
	static function IsPrevWeatherType(weatherType:String):Bool;
	static function IsPositionOccupied(x:Float, y:Float, z:Float, range:Float, p4:Bool, checkVehicles:Bool, checkPeds:Bool, p7:Bool, p8:Bool,
		ignoreEntity:Int, p10:Bool):Bool;
	static function IsPopMultiplierAreaUnk(id:Int):Bool;
	static function IsPointObscuredByAMissionEntity(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Int):Bool;
	static function IsProjectileInArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, ownedByPlayer:Bool):Bool;
	static function IsProjectileTypeInArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, type:Int, ownedByPlayer:Bool):Bool;
	static function IsProjectileTypeInAngledArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, width:Float, p7:Float, weaponHash:Int,
		ownedByPlayer:Bool):Bool;
	static function IsSniperBulletInArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float):Bool;
	static function IsPs3Version():Bool;
	static function IsProjectileTypeWithinDistance(x:Float, y:Float, z:Float, projHash:Int, radius:Float, ownedByPlayer:Bool):Bool;
	static function IsSniperInverted():Bool;
	static function IsStuntJumpMessageShowing():Bool;
	static function IsStringNullOrEmpty(string:String):Bool;
	static function IsStuntJumpInProgress():Bool;
	static function IsStringNull(string:String):Bool;
	static function IsThisAMinigameScript():Bool;
	static function IsXbox360Version():Bool;
	static function IsTennisMode(ped:Int):Bool;
	static function LoadCloudHat(name:String, transitionTime:Float):Void;
	static function LandingMenuIsActive():Bool;
	static function NetworkSetScriptIsSafeForNetworkGame():Void;
	static function OverrideSaveHouse(p0:Bool, p1:Float, p2:Float, p3:Float, p4:Float, p5:Bool, p6:Vector3, p7:Float):Bool;
	static function NextOnscreenKeyboardResultWillDisplayUsingTheseFonts(p0:Int):Void;
	static function PauseDeathArrestRestart(toggle:Bool):Void;
	static function PlayTennisSwingAnim(ped:Int, animDict:String, animName:String, p3:Float, p4:Float, p5:Bool):Void;
	static function PopulateNow():Void;
	static function PlayTennisDiveAnim(ped:Int, p1:Int, p2:Float, p3:Float, p4:Float, p5:Bool):Void;
	static function RegisterBoolToSave(p0:Int, name:String):Void;
	static function QueueMissionRepeatSave():Bool;
	static function QueueMissionRepeatLoad():Bool;
	static function PreloadCloudHat(name:String):Void;
	static function RegisterInt64ToSave(p0:Int, name:String):Void;
	static function RegisterFloatToSave(p0:Int, name:String):Void;
	static function RegisterEnumToSave(p0:Int, name:String):Void;
	static function RegisterIntToSave(p0:Int, name:String):Void;
	static function RemoveDispatchSpawnBlockingArea(p0:Int):Void;
	static function ResetBenchmarkRecording():Void;
	static function RegisterSaveHouse(p0:Float, p1:Float, p2:Float, p3:Float, p4:Int, p5:Int, p6:Int):Int;
	static function RegisterTextLabelToSave(p0:Int, name:String):Void;
	static function RemovePopMultiplierArea(id:Int, p1:Bool):Void;
	static function ResetDispatchSpawnLocation():Void;
	static function RegisterTextLabelToSave2(p0:Int, name:String):Void;
	static function ScriptRaceGetPlayerSplitTime(player:Int, p1:Int, p2:Int):Bool;
	static function RemovePopMultiplierSphere(id:Int, p1:Bool):Void;
	static function ResetDispatchIdealSpawnDistance():Void;
	static function ResetDispatchSpawnBlockingAreas():Void;
	static function RemoveStealthKill(hash:Int, p1:Bool):Void;
	static function SaveBenchmarkRecording():Void;
	static function ResetDispatchTimeBetweenSpawnAttempts(p0:Int):Void;
	static function RestartGame():Void;
	static function ScriptRaceInit(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function ScriptRaceShutdown():Void;
	static function SetCloudsAlpha(opacity:Float):Void;
	static function SetDispatchSpawnLocation(x:Float, y:Float, z:Float):Void;
	static function SetBit(address:Int, offset:Int):Void;
	static function SetBitsInRange(_var:Int, rangeStart:Int, rangeEnd:Int, p3:Int):Void;
	static function SetBeastModeActive(player:Int):Void;
	static function SetExplosiveMeleeThisFrame(player:Int):Void;
	static function SetDispatchTimeBetweenSpawnAttemptsMultiplier(p0:Int, p1:Float):Void;
	static function SetDispatchIdealSpawnDistance(p0:Float):Void;
	static function SetCreditsActive(toggle:Bool):Void;
	static function SetFadeInAfterDeathArrest(toggle:Bool):Void;
	static function SetFadeOutAfterArrest(toggle:Bool):Void;
	static function SetForcePlayerToJump(player:Int):Void;
	static function SetFakeWantedLevel(fakeWantedLevel:Int):Void;
	static function SetDispatchTimeBetweenSpawnAttempts(p0:Int, p1:Float):Void;
	static function SetExplosiveAmmoThisFrame(player:Int):Void;
	static function SetFadeOutAfterDeath(toggle:Bool):Void;
	static function SetGravityLevel(level:Int):Void;
	static function SetFadeInAfterLoad(toggle:Bool):Void;
	static function SetIncidentUnk(incidentId:Int, p1:Float):Void;
	static function SetFireAmmoThisFrame(player:Int):Void;
	static function SetGamePaused(toggle:Bool):Void;
	static function SetInstancePriorityHint(flag:Int):Void;
	static function SetIncidentRequestedUnits(incidentId:Int, dispatchService:Int, numUnits:Int):Void;
	static function SetOverrideWeather(weatherType:String):Void;
	static function SetMissionFlag(toggle:Bool):Void;
	static function SetInstancePriorityMode(toggle:Int):Void;
	static function SetRainLevel(level:Float):Void;
	static function SetRandomEventFlag(toggle:Bool):Void;
	static function SetMinigameInProgress(toggle:Bool):Void;
	static function SetRandomWeatherType():Void;
	static function SetPlayerIsInAnimalForm(toggle:Bool):Void;
	static function SetPlayerRockstarEditorDisabled(toggle:Bool):Void;
	static function SetRiotModeEnabled(toggle:Bool):Void;
	static function SetSaveMenuActive(ignoreVehicle:Bool):Void;
	static function SetRandomSeed(seed:Int):Void;
	static function SetRestartCustomPosition(x:Float, y:Float, z:Float, heading:Float):Void;
	static function SetSnowLevel(level:Float):Void;
	static function SetSaveHouse(p0:Int, p1:Bool, p2:Bool):Void;
	static function SetWeatherTypeNow(weatherType:String):Void;
	static function SetSuperJumpThisFrame(player:Int):Void;
	static function SetThisScriptCanBePaused(toggle:Bool):Void;
	static function SetTimeScale(timeScale:Float):Void;
	static function SetStuntJumpsCanTrigger(toggle:Bool):Void;
	static function SetWeatherTypePersist(weatherType:String):Void;
	static function SetThisScriptCanRemoveBlipsCreatedByAnyScript(toggle:Bool):Void;
	static function SetWindDirection(direction:Float):Void;
	static function SetWeatherTypeTransition(weatherType1:Int, weatherType2:Int, percentWeather2:Float):Void;
	static function SetWeatherTypeNowPersist(weatherType:String):Void;
	static function ShootSingleBulletBetweenCoords(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, damage:Int, pureAccuracy:Bool, weaponHash:Int,
		ownerPed:Int, isAudible:Bool, isInvisible:Bool, speed:Float):Void;
	static function SetWeatherTypeOvertimePersist(weatherType:String, time:Float):Void;
	static function SetWind(speed:Float):Void;
	static function SetWindSpeed(speed:Float):Void;
	static function StartSaveData(p0:Int, p1:Int, p2:Bool):Void;
	static function ShouldUseMetricMeasurements():Bool;
	static function ShootSingleBulletBetweenCoordsIgnoreEntityNew(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, damage:Int, p7:Bool,
		weaponHash:Int, ownerPed:Int, isAudible:Bool, isInvisible:Bool, speed:Float, entity:Int, p14:Bool, p15:Bool, p16:Bool, p17:Bool):Void;
	static function StopSaveArray():Void;
	static function StartSaveArrayWithSize(p0:Int, size:Int, arrayName:String):Void;
	static function SlerpNearQuaternion(t:Float, x:Float, y:Float, z:Float, w:Float, x1:Float, y1:Float, z1:Float, w1:Float, outX:Float, outY:Float,
		outZ:Float, outW:Float):Void;
	static function StringToInt(string:String, outInteger:Int):Bool;
	static function ShootSingleBulletBetweenCoordsIgnoreEntity(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, damage:Int, p7:Bool,
		weaponHash:Int, ownerPed:Int, isAudible:Bool, isInvisible:Bool, speed:Float, entity:Int):Void;
	static function StopBenchmarkRecording():Void;
	static function TerminateAllScriptsWithThisName(scriptName:String):Void;
	static function StartBenchmarkRecording():Void;
	static function StartSaveStructWithSize(p0:Int, size:Int, structName:String):Void;
	static function UpdateOnscreenKeyboard():Int;
	static function StopSaveData():Void;
	static function WaterOverrideSetOceannoiseminamplitude(minAmplitude:Float):Void;
	static function Tan(p0:Float):Float;
	static function StopSaveStruct():Void;
	static function UsingMissionCreator(toggle:Bool):Void;
	static function UnloadCloudHat(name:String, p1:Float):Void;
	static function WaterOverrideSetOceanwavemaxamplitude(maxAmplitude:Float):Void;
	static function WaterOverrideSetRippledisturb(disturb:Float):Void;
	static function WaterOverrideFadeIn(p0:Float):Void;
	static function WaterOverrideSetRipplebumpiness(bumpiness:Float):Void;
	static function UiIsSingleplayerPauseMenuActive():Bool;
	static function WaterOverrideSetShorewaveminamplitude(minAmplitude:Float):Void;
	static function WaterOverrideSetOceanwaveamplitude(amplitude:Float):Void;
	static function WaterOverrideSetShorewavemaxamplitude(maxAmplitude:Float):Void;
	static function WaterOverrideFadeOut(p0:Float):Void;
	static function WaterOverrideSetOceanwaveminamplitude(minAmplitude:Float):Void;
	static function WaterOverrideSetRipplemaxbumpiness(maxBumpiness:Float):Void;
	static function WaterOverrideSetShorewaveamplitude(amplitude:Float):Void;
	static function WaterOverrideSetRippleminbumpiness(minBumpiness:Float):Void;
	static function WaterOverrideSetStrength(strength:Float):Void;
	static function NetGameserverBasketApplyServerData(p0:Int, p1:Int):Bool;
	static function NetGameserverBasketAddItem(itemData:Int, quantity:Int):Bool;
	static function NetGameserverBasketIsFull():Bool;
	static function NetGameserverCatalogIsReady():Bool;
	static function NetGameserverBasketDelete():Bool;
	static function NetGameserverBasketStart(transactionId:Int, categoryHash:Int, actionHash:Int, flags:Int):Bool;
	static function NetGameserverCatalogItemExistsHash(hash:Int):Bool;
	static function NetGameserverBasketEnd():Bool;
	static function NetGameserverCatalogItemExists(name:String):Bool;
	static function NetGameserverDeleteCharacterSlot(slot:Int, transfer:Bool, reason:Int):Bool;
	static function NetGameserverCheckoutStart(transactionId:Int):Bool;
	static function NetGameserverBeginService(transactionId:Int, categoryHash:Int, itemHash:Int, actionTypeHash:Int, value:Int, flags:Int):Bool;
	static function NetGameserverEndService(transactionId:Int):Bool;
	static function NetGameserverDeleteSetTelemetryNonceSeed():Bool;
	static function NetGameserverGetPrice(itemHash:Int, categoryHash:Int, p2:Bool):Int;
	static function NetGameserverIsSessionValid(charSlot:Int):Bool;
	static function NetGameserverGetCatalogState(state:Int):Bool;
	static function NetGameserverDeleteCharacterSlotGetStatus():Int;
	static function NetGameserverGetBalance(inventory:Bool, playerbalance:Bool):Bool;
	static function NetGameserverTransferCashGetStatus2():Int;
	static function NetGameserverIsSessionRefreshPending():Bool;
	static function NetGameserverIsCatalogValid():Bool;
	static function NetGameserverGetTransactionManagerData(p0:Int, p1:Bool):Bool;
	static function NetGameserverTransferWalletToBank(charSlot:Int, amount:Int):Bool;
	static function NetGameserverSessionApplyReceivedData(charSlot:Int):Bool;
	static function NetGameserverSetTelemetryNonceSeed(p0:Int):Bool;
	static function NetGameserverStartSession(charSlot:Int):Bool;
	static function NetGameserverTransferBankToWallet(charSlot:Int, amount:Int):Bool;
	static function NetGameserverTransferCashGetStatus():Int;
	static function NetGameserverTransferCashSetTelemetryNonceSeed():Bool;
	static function NetGameserverUseServerTransactions():Bool;
	static function DepositVc(amount:Int):Bool;
	static function CanPayGoon():Bool;
	static function NetworkBuyContraband(p0:Int, p1:Int, p2:Int, p3:Bool, p4:Bool):Void;
	static function NetworkBuyAirstrike(cost:Int, p1:Bool, p2:Bool):Void;
	static function NetworkBuyHeliStrike(cost:Int, p1:Bool, p2:Bool):Void;
	static function NetworkBuyHealthcare(cost:Int, p1:Bool, p2:Bool):Void;
	static function NetworkBuyBackupGang(p0:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkBuyProperty(propertyCost:Int, propertyName:Int, p2:Bool, p3:Bool):Void;
	static function NetworkBuyFairgroundRide(amountSpent:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkBuyBounty(amount:Int, victim:Int, p2:Bool, p3:Bool):Void;
	static function NetworkBuyItem(amount:Int, item:Int, p2:Int, p3:Int, p4:Bool, item_name:String, p6:Int, p7:Int, p8:Int, p9:Bool):Void;
	static function NetworkCanBet(amount:Int):Bool;
	static function NetworkBuyLotteryTicket(p0:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkBuySmokes(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkCanBuyLotteryTicket(cost:Int):Bool;
	static function NetworkCanSpendMoney(p0:Int, p1:Bool, p2:Bool, p3:Bool, p4:Int):Bool;
	static function NetworkCasinoCanPurchaseChipsWithPvc2():Bool;
	static function NetworkCanShareJobCash():Bool;
	static function NetworkCasinoCanPurchaseChipsWithPvc():Bool;
	static function NetworkCanReceivePlayerCash(p0:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function NetworkCasinoSellChips(p0:Int, p1:Int):Bool;
	static function NetworkCasinoPurchaseChips(p0:Int, p1:Int):Bool;
	static function NetworkCanSpendMoney2(p0:Int, p1:Bool, p2:Bool, p3:Bool, p4:Int, p5:Int):Bool;
	static function NetworkCasinoCanGamble(p0:Int):Bool;
	static function NetworkDeductCash(amount:Int, p1:String, p2:String, p3:Bool, p4:Bool, p5:Bool):Void;
	static function NetworkCasinoCanUseGamblingType(hash:Int):Bool;
	static function NetworkClearCharacterWallet(characterSlot:Int):Void;
	static function NetworkDeleteCharacter(characterSlot:Int, p1:Bool, p2:Bool):Void;
	static function NetworkEarnBountyHunterReward(p0:Int):Void;
	static function NetworkEarnBossAgency(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkEarnFmbbWageBonus(p0:Int):Void;
	static function NetworkEarnCasinoHeist(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int):Void;
	static function NetworkEarnBoss(p0:Int, p1:Int, p2:Int):Void;
	static function NetworkEarnCasinoHeistBonus(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function NetworkEarnCollectableCompletedCollection(amount:Int, p1:Int):Void;
	static function NetworkEarnFromArenaCareerProgression(amount:Int, p1:Int):Void;
	static function NetworkEarnFromAiTargetKill(p0:Int, p1:Int):Void;
	static function NetworkEarnFromArenaWar(amount:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkEarnFromAmbientJob(p0:Int, p1:String, p2:Int):Void;
	static function NetworkEarnFromArmourTruck(amount:Int):Void;
	static function NetworkEarnFromArenaSkillLevelProgression(amount:Int, p1:Int):Void;
	static function NetworkEarnFromAssassinateTargetKilled(amount:Int):Void;
	static function NetworkEarnFromBbEventCargo(amount:Int):Void;
	static function NetworkEarnFromAutoshopBusiness(p0:Int, p1:Int):Void;
	static function NetworkEarnFromAssassinateTargetKilled2(amount:Int):Void;
	static function NetworkEarnFromBetting(amount:Int, p1:String):Void;
	static function NetworkEarnFromBikeShopBusiness(p0:Int, p1:Int):Void;
	static function NetworkEarnFromBbEventBonus(amount:Int):Void;
	static function NetworkEarnFromAutoshopIncome(p0:Int):Void;
	static function NetworkEarnFromBusinessBattle(p0:Int):Void;
	static function NetworkEarnFromBikerIncome(p0:Int):Void;
	static function NetworkEarnFromBendJob(amount:Int, heistHash:String):Void;
	static function NetworkEarnFromBusinessHubSell(p0:Int, p1:Int, p2:Int):Void;
	static function NetworkEarnFromBusinessHubSource(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkEarnFromBounty(amount:Int, networkHandle:Int, p2:Int, p3:Int):Void;
	static function NetworkEarnFromCasinoMissionParticipation(amount:Int):Void;
	static function NetworkEarnFromCashingOut(amount:Int):Void;
	static function NetworkEarnFromChallengeWin(p0:Int, p1:Int, p2:Bool):Void;
	static function NetworkEarnFromClubManagementParticipation(p0:Int):Void;
	static function NetworkEarnFromBusinessProduct(amount:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkEarnFromCollectionItem(amount:Int, p1:Int):Void;
	static function NetworkEarnFromCarclubMembership(p0:Int):Void;
	static function NetworkEarnFromCasinoAward(amount:Int, hash:Int):Void;
	static function NetworkEarnFromDailyObjectives(p0:Int, p1:String, p2:Int):Void;
	static function NetworkEarnFromCasinoMissionReward(amount:Int):Void;
	static function NetworkEarnFromContraband(amount:Int, p1:Int):Void;
	static function NetworkEarnFromCasinoStoryMissionReward(amount:Int):Void;
	static function NetworkEarnFromCollectablesActionFigures(amount:Int):Void;
	static function NetworkEarnFromCrateDrop(amount:Int):Void;
	static function NetworkEarnFromCompleteCollection(amount:Int):Void;
	static function NetworkEarnFromDarChallenge(amount:Int, p1:Int):Void;
	static function NetworkEarnFromDailyObjectiveEvent(amount:Int):Void;
	static function NetworkEarnFromCriminalMastermindBonus(p0:Int, p1:Int, p2:Int):Void;
	static function NetworkEarnFromFmbbPhonecallMission(p0:Int):Void;
	static function NetworkEarnFromFmbbBossWork(p0:Int):Void;
	static function NetworkEarnFromDestroyingContraband(p0:Int):Void;
	static function NetworkEarnFromGangopsJobsFinale(amount:Int, unk:String):Void;
	static function NetworkEarnFromGangopsElite(amount:Int, unk:String, actIndex:Int):Void;
	static function NetworkEarnFromGangPickup(amount:Int):Void;
	static function NetworkEarnFromDoomsdayFinaleBonus(amount:Int, vehicleHash:Int):Void;
	static function NetworkEarnFromGangopsJobsSetup(amount:Int, unk:String):Void;
	static function NetworkEarnFromGangopsWagesBonus(amount:Int, p1:Int):Void;
	static function NetworkEarnFromGangopsJobsPrepParticipation(amount:Int):Void;
	static function NetworkEarnFromGangopsAwards(amount:Int, unk:String, p2:Int):Void;
	static function NetworkEarnFromJob(amount:Int, p1:String):Void;
	static function NetworkEarnFromHackerTruckMission(p0:Int, amount:Int, p2:Int, p3:Int):Void;
	static function NetworkEarnFromGangopsWages(amount:Int, p1:Int):Void;
	static function NetworkEarnFromNotBadsport(amount:Int):Void;
	static function NetworkEarnFromHoldups(amount:Int):Void;
	static function NetworkEarnFromJobBonus(p0:Int, p1:Int, p2:Int):Void;
	static function NetworkEarnFromPremiumJob(amount:Int, p1:String):Void;
	static function NetworkEarnFromImportExport(amount:Int, modelHash:Int):Void;
	static function NetworkEarnFromPickup(amount:Int):Void;
	static function NetworkEarnFromJobX2(amount:Int, p1:String):Void;
	static function NetworkEarnFromProperty(amount:Int, propertyName:Int):Void;
	static function NetworkEarnFromRcTimeTrial(amount:Int):Void;
	static function NetworkEarnFromPersonalVehicle(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int, p7:Int, p8:Int):Void;
	static function NetworkEarnFromSellingVehicle(amount:Int):Void;
	static function NetworkEarnFromRdrBonus(amount:Int, p1:Int):Void;
	static function NetworkEarnFromTargetRefund(amount:Int, p1:Int):Void;
	static function NetworkEarnFromSpinTheWheelCash(amount:Int):Void;
	static function NetworkEarnFromRockstar(amount:Int):Void;
	static function NetworkEarnFromSellBase(amount:Int, baseNameHash:Int):Void;
	static function NetworkEarnFromSellBunker(amount:Int, bunkerHash:Int):Void;
	static function NetworkEarnFromTunerAward(p0:Int, p1:Int, p2:Int):Void;
	static function NetworkEarnFromSightseeing(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkEarnFromSmuggling(amount:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkEarnFromTunerFinale(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function NetworkEarnFromTimeTrialWin(amount:Int):Void;
	static function NetworkEarnFromVehicleAutoshop(p0:Int, p1:Int):Void;
	static function NetworkEarnFromWagePaymentBonus(amount:Int):Void;
	static function NetworkEarnFromUpgradeAutoshopLocation(p0:Int, p1:Int):Void;
	static function NetworkEarnIslandHeist(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int):Void;
	static function NetworkEarnFromWagePayment(amount:Int):Void;
	static function NetworkEarnFromVehicle(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int, p7:Int):Void;
	static function NetworkEarnFromVehicleAutoshopBonus(p0:Int):Void;
	static function NetworkGetIsHighEarner():Bool;
	static function NetworkEarnGoon(p0:Int, p1:Int, p2:Int):Void;
	static function NetworkEarnJobBonusFirstTimeBonus(p0:Int, p1:Int, p2:Int):Void;
	static function NetworkEarnFromVehicleExport(amount:Int, p1:Int, p2:Int):Void;
	static function NetworkGetStringBankBalance():String;
	static function NetworkEarnJobBonusHeistAward(p0:Int, p1:Int, p2:Int):Void;
	static function NetworkGetPvcBalance():Int;
	static function NetworkGetStringWalletBalance(characterSlot:Int):String;
	static function NetworkEarnFromWarehouse():Void;
	static function NetworkGetPvcTransferBalance():Int;
	static function NetworkGetVcBalance():Int;
	static function NetworkGetEvcBalance():Int;
	static function NetworkGetVcBankBalance():Int;
	static function NetworkGetRemainingTransferBalance():Int;
	static function NetworkGetVcWalletBalance(characterSlot:Int):Int;
	static function NetworkGetVcBankWalletBalanceIsNotLessThan(amount:Int, characterSlot:Int):Bool;
	static function NetworkGetStringBankWalletBalance():String;
	static function NetworkGetVcWalletBalanceIsNotLessThan(amount:Int, characterSlot:Int):Bool;
	static function NetworkGivePlayerJobshareCash(amount:Int, networkHandle:Int):Void;
	static function NetworkInitializeCash(wallet:Int, bank:Int):Void;
	static function NetworkGetVcBankBalanceIsNotLessThan(amount:Int):Bool;
	static function NetworkManualDeleteCharacter(characterSlot:Int):Void;
	static function NetworkPayUtilityBill(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkPayEmployeeWage(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkReceivePlayerJobshareCash(value:Int, networkHandle:Int):Void;
	static function NetworkRefundCash(index:Int, context:String, reason:String, unk:Bool):Void;
	static function NetworkMoneyCanBet(amount:Int, p1:Bool, p2:Bool):Bool;
	static function NetworkSpentAmmoDrop(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentArcadeGame(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function NetworkSpentArcadeGeneric(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function NetworkSpentArenaPremium(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkPayMatchEntryFee(amount:Int, matchId:String, p2:Bool, p3:Bool):Void;
	static function NetworkSpentArenaJoinSpectator(amount:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkSpentArenaSpectatorBox(amount:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkRivalDeliveryCompleted(earnedMoney:Int):Void;
	static function NetworkSpentArrestBail(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentAutoshopModifications(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function NetworkSpentAutoshopPropertyUtilityFee(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentBankInterest(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentBaService(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function NetworkSpentBallisticEquipment(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentBeachPartyGeneric(p0:Int):Void;
	static function NetworkSpentBoatPickup(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentBoss():Bool;
	static function NetworkSpentBikeShopModify(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentBetting(amount:Int, p1:Int, matchId:String, p3:Bool, p4:Bool):Void;
	static function NetworkSpentBountyHunterMission(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentBullShark(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentBusiness(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentBounty(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentBuyArena(amount:Int, p1:Bool, p2:Bool, p3:String):Void;
	static function NetworkSpentBuyAutoshop(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentBuyBunker(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentBuyPassiveMode(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentBuyBase(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentBuyOfftheradar(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentBuyTiltrotor(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentBuyWantedlevel(p0:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkSpentBuyCasino(amount:Int, p1:Bool, p2:Bool, data:Int):Void;
	static function NetworkSpentBuyRevealPlayers(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentBuyTruck(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentCallPlayer(p0:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkSpentCargoSourcing(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int):Void;
	static function NetworkSpentCarwash(p0:Int, p1:Int, p2:Int, p3:Bool, p4:Bool):Void;
	static function NetworkSpentCarclub(p0:Int, p1:Bool, p2:Bool, p3:Int):Void;
	static function NetworkSpentCarclubMembership(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function NetworkSpentCashDrop(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentCarclubTakeover(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentCasinoHeistSkipMission(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentCasinoClubGeneric(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int, p7:Int, p8:Int):Void;
	static function NetworkSpentCasinoMembership(amount:Int, p1:Bool, p2:Bool, p3:Int):Void;
	static function NetworkSpentEmployAssassins(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentCinema(p0:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkSpentFromBank(p0:Int, p1:Int, p2:Int, p3:Bool):Void;
	static function NetworkSpentCasinoGeneric(amount:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function NetworkSpentGangopsTripSkip(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentGangopsCannon(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentCasinoHeist(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int, p7:Int, p8:Int, p9:Int, p10:Int):Void;
	static function NetworkSpentGangopsStartStrand(type:Int, amount:Int, p2:Bool, p3:Bool):Void;
	static function NetworkSpentHireMercenary(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentGunrunningContactService(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentFromRockstar(bank:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentHeliPickup(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentImportExportRepair(p0:Int, p1:Int, p2:Int):Void;
	static function NetworkSpentGangopsStartMission(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentHangarUtilityCharges(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentImAbility(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentHangarStaffCharges(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentHoldups(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentIslandHeist(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentHireMugger(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentMoveYacht(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentMakeItRain(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentJobSkip(amount:Int, matchId:String, p2:Bool, p3:Bool):Void;
	static function NetworkSpentInStripclub(p0:Int, p1:Bool, p2:Int, p3:Bool):Void;
	static function NetworkSpentOrderBodyguardVehicle(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentNoCops(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentJukebox(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentPaServiceDancer(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentOrderWarehouseVehicle(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentNightclubEntryFee(player:Int, amount:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkSpentNightclubBarDrink(amount:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkSpentPayVehicleInsurancePremium(amount:Int, vehicleModel:Int, networkHandle:Int, notBankrupt:Bool, hasTheMoney:Bool):Void;
	static function NetworkSpentPayGoon(p0:Int, p1:Int, amount:Int):Void;
	static function NetworkSpentPurchaseWarehouse(amount:Int, data:Int, p2:Bool, p3:Bool):Void;
	static function NetworkSpentPlayerHealthcare(p0:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkSpentPayBoss(p0:Int, p1:Int, p2:Int):Void;
	static function NetworkSpentPaServiceHeliPickup(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentRenameOrganization(p0:Int, p1:Int, p2:Int):Void;
	static function NetworkSpentPurchaseHangar(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentProstitutes(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentRehireDj(amount:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkSpentSalesDisplay(p0:Bool):Void;
	static function NetworkSpentRequestJob(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentRdrhatchetBonus(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentUpgradeArena(amount:Int, p1:Bool, p2:Bool, p3:String):Void;
	static function NetworkSpentSpinTheWheelPayment(amount:Int, p1:Int, p2:Bool, p3:Bool):Void;
	static function NetworkSpentTaxi(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentRequestHeist(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentUpgradeCasino(amount:Int, p1:Bool, p2:Bool, data:Int):Void;
	static function NetworkSpentSubmarine(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int):Void;
	static function NetworkSpentUpgradeAutoshop(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentRobbedByMugger(amount:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentUpgradeHangar(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentUpgradeBunker(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentUpgradeSub(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentTelescope(p0:Int, p1:Bool, p2:Bool):Void;
	static function NetworkSpentUpgradeTiltrotor(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentUpgradeTruck(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentUpgradeBase(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSpentVehicleExportMods(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int, p7:Int, p8:Int, p9:Int):Void;
	static function NetworkSpentWager(p0:Int, p1:Int, amount:Int):Void;
	static function ProcessCashGift(p0:Int, p1:Int, p2:String):String;
	static function NetworkSpentVehicleRequested(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function WithdrawVc(amount:Int):Int;
	static function NetworkSpentVipUtilityCharges(p0:Int, p1:Int, p2:Int):Void;
	static function DisableAllControlActions(padIndex:Int):Void;
	static function EnableControlAction(padIndex:Int, control:Int, enable:Bool):Void;
	static function DisableInputGroup(padIndex:Int):Void;
	static function GetAllowMovementWhileZoomed():Bool;
	static function GetControlInstructionalButton(padIndex:Int, control:Int, p2:Bool):String;
	static function DisableControlAction(padIndex:Int, control:Int, disable:Bool):Void;
	static function GetControlGroupInstructionalButton(padIndex:Int, controlGroup:Int, p2:Bool):String;
	static function GetControlValue(padIndex:Int, control:Int):Int;
	static function EnableAllControlActions(padIndex:Int):Void;
	static function GetControlUnboundNormal(padIndex:Int, control:Int):Float;
	static function GetControlNormal(padIndex:Int, control:Int):Float;
	static function GetIsUsingAlternateDriveby():Bool;
	static function GetLocalPlayerAimState2():Int;
	static function GetDisabledControlUnboundNormal(padIndex:Int, control:Int):Float;
	static function GetDisabledControlNormal(padIndex:Int, control:Int):Float;
	static function GetTimeSinceLastInput(padIndex:Int):Int;
	static function IsControlReleased(padIndex:Int, control:Int):Bool;
	static function GetLocalPlayerAimState():Int;
	static function IsControlPressed(padIndex:Int, control:Int):Bool;
	static function IsControlEnabled(padIndex:Int, control:Int):Bool;
	static function IsControlJustPressed(padIndex:Int, control:Int):Bool;
	static function IsControlJustReleased(padIndex:Int, control:Int):Bool;
	static function IsDisabledControlPressed(padIndex:Int, control:Int):Bool;
	static function IsDisabledControlJustPressed(padIndex:Int, control:Int):Bool;
	static function IsDisabledControlReleased(padIndex:Int, control:Int):Bool;
	static function IsLookInverted():Bool;
	static function IsDisabledControlJustReleased(padIndex:Int, control:Int):Bool;
	static function IsUsingKeyboard2(padIndex:Int):Bool;
	static function IsUsingKeyboard(padIndex:Int):Bool;
	static function SetControlLightEffectColor(padIndex:Int, red:Int, green:Int, blue:Int):Void;
	static function ResetInputMappingScheme():Void;
	static function SetControlNormal(padIndex:Int, control:Int, amount:Float):Bool;
	static function SetCursorLocation(x:Float, y:Float):Bool;
	static function SetInputExclusive(padIndex:Int, control:Int):Void;
	static function SetPadShake(padIndex:Int, duration:Int, frequency:Int):Void;
	static function StopPadShake(padIndex:Int):Void;
	static function SwitchToInputMappingScheme2(name:String):Bool;
	static function SwitchToInputMappingScheme(name:String):Bool;
	static function SetPlayerpadShakesWhenControllerDisabled(toggle:Bool):Void;
	static function AddDoorToSystem(doorHash:Int, modelHash:Int, x:Float, y:Float, z:Float, p5:Bool, scriptDoor:Bool, isLocal:Bool):Void;
	static function AreEntitiesEntirelyInsideGarage(garageHash:Int, p1:Bool, p2:Bool, p3:Bool, p4:Int):Bool;
	static function BreakObjectFragmentChild(p0:Dynamic, p1:Int, p2:Bool):Void;
	static function AttachPortablePickupToPed(pickupObject:Dynamic, ped:Int):Void;
	static function ClearGarageArea(garageHash:Int, isNetwork:Bool):Void;
	static function CreateAmbientPickup(pickupHash:Int, posX:Float, posY:Float, posZ:Float, flags:Int, value:Int, modelHash:Int, returnHandle:Bool,
		p8:Bool):Int;
	static function CreateNonNetworkedAmbientPickup(pickupHash:Int, posX:Float, posY:Float, posZ:Float, flags:Int, value:Int, modelHash:Int, p7:Bool,
		p8:Bool):Int;
	static function CreateMoneyPickups(x:Float, y:Float, z:Float, value:Int, amount:Int, model:Int):Void;
	static function ClearObjectsInsideGarage(garageHash:Int, vehicles:Bool, peds:Bool, objects:Bool, isNetwork:Bool):Void;
	static function CreateNonNetworkedPortablePickup(pickupHash:Int, x:Float, y:Float, z:Float, placeOnGround:Bool, modelHash:Int):Dynamic;
	static function CreatePickup(pickupHash:Int, posX:Float, posY:Float, posZ:Float, p4:Int, value:Int, p6:Bool, modelHash:Int):Int;
	static function DetachPortablePickupFromPed(pickupObject:Dynamic):Void;
	static function CreateObject(modelHash:Int, x:Float, y:Float, z:Float, isNetwork:Bool, netMissionEntity:Bool, doorFlag:Bool):Dynamic;
	static function DoorControl(modelHash:Int, x:Float, y:Float, z:Float, locked:Bool, xRotMult:Float, yRotMult:Float, zRotMult:Float):Void;
	static function CreatePickupRotate(pickupHash:Int, posX:Float, posY:Float, posZ:Float, rotX:Float, rotY:Float, rotZ:Float, flag:Int, amount:Int, p9:Int,
		p10:Bool, modelHash:Int):Int;
	static function CreatePortablePickup(pickupHash:Int, x:Float, y:Float, z:Float, placeOnGround:Bool, modelHash:Int):Dynamic;
	static function CreateObjectNoOffset(modelHash:Int, x:Float, y:Float, z:Float, isNetwork:Bool, netMissionEntity:Bool, doorFlag:Bool):Dynamic;
	static function DoesPickupExist(pickup:Int):Bool;
	static function DoesPickupObjectExist(pickupObject:Dynamic):Bool;
	static function DoorSystemGetAutomaticDistance(doorHash:Int):Float;
	static function DeleteObject(object:Dynamic):Void;
	static function DoesRayfireMapObjectExist(object:Dynamic):Bool;
	static function DoesPickupOfTypeExistInArea(pickupHash:Int, x:Float, y:Float, z:Float, radius:Float):Bool;
	static function DoorSystemGetDoorState(doorHash:Int):Int;
	static function DoesObjectOfTypeExistAtCoords(x:Float, y:Float, z:Float, radius:Float, hash:Int, p5:Bool):Bool;
	static function DoorSystemGetIsPhysicsLoaded(doorHash:Int):Bool;
	static function DoorSystemGetOpenRatio(doorHash:Int):Float;
	static function DoorSystemFindExistingDoor(x:Float, y:Float, z:Float, modelHash:Int, doorOutPointer:Int):Bool;
	static function DoorSystemSetAutomaticDistance(doorHash:Int, distance:Float, requestDoor:Bool, forceUpdate:Bool):Void;
	static function DoorSystemSetAutomaticRate(doorHash:Int, rate:Float, requestDoor:Bool, forceUpdate:Bool):Void;
	static function DoorSystemGetDoorPendingState(doorHash:Int):Int;
	static function DoorSystemSetDoorState(doorHash:Int, state:Int, requestDoor:Bool, forceUpdate:Bool):Void;
	static function DoorSystemSetHoldOpen(doorHash:Int, toggle:Bool):Void;
	static function DoorSystemSetSpringRemoved(doorHash:Int, removed:Bool, requestDoor:Bool, forceUpdate:Bool):Void;
	static function EnableSavingInGarage(garageHash:Int, toggle:Bool):Void;
	static function FixObjectFragment(object:Dynamic):Void;
	static function DoorSystemSetOpenRatio(doorHash:Int, ajar:Float, requestDoor:Bool, forceUpdate:Bool):Void;
	static function GetClosestObjectOfType(x:Float, y:Float, z:Float, radius:Float, modelHash:Int, isMission:Bool, p6:Bool, p7:Bool):Dynamic;
	static function GetCoordsAndRotationOfClosestObjectOfType(x:Float, y:Float, z:Float, radius:Float, modelHash:Int, outPosition:Vector3,
		outRotation:Vector3, rotationOrder:Int):Int;
	static function GetObjectOffsetFromCoords(xPos:Float, yPos:Float, zPos:Float, heading:Float, xOffset:Float, yOffset:Float, zOffset:Float):Vector3;
	static function ForcePickupRegenerate(p0:Int):Void;
	static function GetObjectTextureVariation(object:Dynamic):Int;
	static function GetObjectFragmentDamageHealth(p0:Int, p1:Bool):Float;
	static function GetPickupCoords(pickup:Int):Vector3;
	static function GetIsArenaPropPhysicsDisabled(entity:Dynamic, p1:Int):Bool;
	static function GetPickupObject(pickup:Int):Dynamic;
	static function GetPickupHashFromWeapon(weapon:Int):Int;
	static function GetPickupHash(pickupHash:Int):Int;
	static function GetStateOfClosestDoorOfType(type:Int, x:Float, y:Float, z:Float, locked:Bool, heading:Float):Void;
	static function GetRayfireMapObjectAnimPhase(object:Dynamic):Float;
	static function GetRayfireMapObject(x:Float, y:Float, z:Float, radius:Float, name:String):Dynamic;
	static function GetWeaponTypeFromPickupType(pickupHash:Int):Int;
	static function GetPickupGenerationRangeMultiplier():Float;
	static function HasClosestObjectOfTypeBeenBroken(p0:Float, p1:Float, p2:Float, p3:Float, modelHash:Int, p5:Int):Bool;
	static function HasPickupBeenCollected(pickup:Int):Bool;
	static function GetSafePickupCoords(x:Float, y:Float, z:Float, p3:Float, p4:Float):Vector3;
	static function HasClosestObjectOfTypeBeenCompletelyDestroyed(x:Float, y:Float, z:Float, radius:Float, modelHash:Int, p5:Bool):Bool;
	static function HasObjectBeenBroken(object:Dynamic):Bool;
	static function IsAnyObjectNearPoint(x:Float, y:Float, z:Float, range:Float, p4:Bool):Bool;
	static function IsDoorClosed(doorHash:Int):Bool;
	static function IsAnyEntityEntirelyInsideGarage(garageHash:Int, p1:Bool, p2:Bool, p3:Bool, p4:Int):Bool;
	static function GetStateOfRayfireMapObject(object:Dynamic):Int;
	static function IsObjectAPickup(object:Dynamic):Bool;
	static function HidePortablePickupWhenDetached(pickup:Int, toggle:Bool):Void;
	static function IsGarageEmpty(garageHash:Int, p1:Bool, p2:Int):Bool;
	static function IsObjectNearPoint(objectHash:Int, x:Float, y:Float, z:Float, range:Float):Bool;
	static function IsPickupWeaponObjectValid(object:Dynamic):Bool;
	static function IsObjectEntirelyInsideGarage(garageHash:Int, entity:Int, p2:Float, p3:Int):Bool;
	static function IsDoorRegisteredWithSystem(doorHash:Int):Bool;
	static function IsPlayerEntirelyInsideGarage(garageHash:Int, player:Int, p2:Float, p3:Int):Bool;
	static function IsObjectVisible(object:Dynamic):Bool;
	static function IsPlayerPartiallyInsideGarage(garageHash:Int, player:Int, p2:Int):Bool;
	static function IsObjectAPortablePickup(object:Dynamic):Bool;
	static function IsPointInAngledArea(xPos:Float, yPos:Float, zPos:Float, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, width:Float, p10:Bool,
		includez:Bool):Bool;
	static function IsObjectPartiallyInsideGarage(garageHash:Int, entity:Int, p2:Int):Bool;
	static function MarkObjectForDeletion(object:Dynamic):Void;
	static function PlaceObjectOnGroundProperly(object:Dynamic):Bool;
	static function RemoveAllPickupsOfType(pickupHash:Int):Void;
	static function RemovePickup(pickup:Int):Void;
	static function RemoveDoorFromSystem(doorHash:Int):Void;
	static function SetCreateWeaponObjectLightSource(object:Dynamic, toggle:Bool):Void;
	static function RemoveObjectHighDetailModel(object:Dynamic):Void;
	static function PlaceObjectOnGroundProperly2(object:Dynamic):Bool;
	static function RenderFakePickupGlow(x:Float, y:Float, z:Float, colorIndex:Int):Void;
	static function PreventCollectionOfPortablePickup(object:Dynamic, p1:Bool, p2:Bool):Void;
	static function SetForceObjectThisFrame(x:Float, y:Float, z:Float, p3:Float):Void;
	static function SetEnableArenaPropPhysics(entity:Dynamic, toggle:Bool, p2:Int):Void;
	static function SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(object:Dynamic, toggle:Bool):Void;
	static function SetMaxNumPortablePickupsCarriedByPlayer(modelHash:Int, p1:Int):Void;
	static function SetLocalPlayerCanUsePickupsWithThisModel(modelHash:Int, toggle:Bool):Void;
	static function SetObjectForceVehiclesToAvoid(object:Dynamic, toggle:Bool):Void;
	static function SetEnableArenaPropPhysicsOnPed(entity:Dynamic, toggle:Bool, p2:Int, ped:Int):Void;
	static function SetLocalPlayerCanCollectPortablePickups(p0:Bool):Void;
	static function SetObjectLightColor(object:Dynamic, p1:Bool, r:Int, g:Int, b:Int):Int;
	static function SetObjectAllowLowLodBuoyancy(object:Dynamic, toggle:Bool):Void;
	static function SetObjectStuntPropDuration(object:Dynamic, duration:Float):Void;
	static function SetObjectPhysicsParams(object:Dynamic, mass:Float, gravityFactor:Float, linearC:Float, linearV:Float, linearV2:Float, angularC:Float,
		angularV:Float, angularV2:Float, p9:Float, maxAngSpeed:Float, buoyancyFactor:Float):Void;
	static function SetObjectTargettable(object:Dynamic, targettable:Bool):Void;
	static function SetObjectStuntPropSpeedup(object:Dynamic, intensity:Int):Void;
	static function SetPickupGenerationRangeMultiplier(multiplier:Float):Void;
	static function SetPickupHiddenWhenUncollectable(p0:Int, p1:Int):Void;
	static function SetObjectTextureVariation(object:Dynamic, textureVariation:Int):Void;
	static function SetStateOfRayfireMapObject(object:Dynamic, state:Int):Void;
	static function SetPickupUncollectable(p0:Int, p1:Int):Void;
	static function SetStateOfClosestDoorOfType(type:Int, x:Float, y:Float, z:Float, locked:Bool, heading:Float, p6:Bool):Void;
	static function SetTeamPickupObject(object:Dynamic, p1:Int, p2:Bool):Void;
	static function SlideObject(object:Dynamic, toX:Float, toY:Float, toZ:Float, speedX:Float, speedY:Float, speedZ:Float, collision:Bool):Bool;
	static function SetPickupRegenerationTime(pickup:Int, duration:Int):Void;
	static function TrackObjectVisibility(object:Dynamic):Void;
	static function SetUnkGlobalBoolRelatedToDamage(value:Bool):Void;
	static function ToggleUsePickupsForPlayer(player:Int, pickupHash:Int, toggle:Bool):Void;
	static function SetTextureVariationOfClosestObjectOfType(x:Float, y:Float, z:Float, radius:Float, modelHash:Int, textureVariation:Int):Bool;
	static function ActivateDamageTrackerOnNetworkId(netID:Int, toggle:Bool):Void;
	static function ActivateDamageTrackerOnPlayer(player:Int, toggle:Bool):Void;
	static function CanRegisterMissionPeds(amount:Int):Bool;
	static function BadSportPlayerLeftDetected(networkHandle:Int, event:Int, amountReceived:Int):Bool;
	static function CanRegisterMissionEntities(ped_amt:Int, vehicle_amt:Int, object_amt:Int, pickup_amt:Int):Bool;
	static function CloudDeleteMemberFile(p0:String):Int;
	static function CanRegisterMissionPickups(amount:Int):Bool;
	static function CanRegisterMissionObjects(amount:Int):Bool;
	static function CloudGetAvailabilityCheckResult():Bool;
	static function CloudCheckAvailability():Void;
	static function ClearLaunchParams():Void;
	static function CanRegisterMissionVehicles(amount:Int):Bool;
	static function CloudIsCheckingAvailability():Bool;
	static function CloudHasRequestCompleted(handle:Int):Bool;
	static function ConvertPosixTime(posixTime:Int, timeStructure:Int):Void;
	static function FacebookDoUnkCheck():Bool;
	static function CloudDidRequestSucceed(handle:Int):Bool;
	static function FacebookIsAvailable():Bool;
	static function FacebookSetHeistComplete(heistName:String, cashEarned:Int, xpEarned:Int):Bool;
	static function FacebookSetMilestoneComplete(milestoneId:Int):Bool;
	static function FacebookSetCreateCharacterComplete():Bool;
	static function FacebookIsSendingData():Bool;
	static function FadeOutLocalPlayer(p0:Bool):Void;
	static function FilloutPmPlayerList(networkHandle:Int, p1:Int, p2:Int):Bool;
	static function FilloutPmPlayerListWithNames(p0:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function GetCloudTimeAsInt():Int;
	static function GetCommerceItemCat(index:Int, index2:Int):String;
	static function GetCloudTimeAsString():String;
	static function GetCommerceItemId(index:Int):String;
	static function GetCommerceItemTexturename(index:Int):String;
	static function GetCommerceProductPrice(index:Int):String;
	static function GetCommerceItemName(index:Int):String;
	static function GetCommerceItemNumCats(index:Int):Int;
	static function GetMaxNumNetworkObjects():Int;
	static function GetMaxNumNetworkPickups():Int;
	static function GetNumCommerceItems():Int;
	static function GetMaxNumNetworkVehicles():Int;
	static function GetMaxNumNetworkPeds():Int;
	static function GetNumCreatedMissionObjects(p0:Bool):Int;
	static function GetNetworkTimeAccurate():Int;
	static function GetNetworkTime():Int;
	static function GetNumCreatedMissionPeds(p0:Bool):Int;
	static function GetNumCreatedMissionVehicles(p0:Bool):Int;
	static function GetNumReservedMissionObjects(p0:Bool):Int;
	static function GetNumReservedMissionPeds(p0:Bool):Int;
	static function GetOnlineVersion():String;
	static function GetTimeDifference(timeA:Int, timeB:Int):Int;
	static function GetNumReservedMissionVehicles(p0:Bool):Int;
	static function GetTimeOffset(timeA:Int, timeB:Int):Int;
	static function IsCommerceDataValid():Bool;
	static function GetTimeAsString(time:Int):String;
	static function GetStatusOfTextureDownload(p0:Int):Int;
	static function IsDamageTrackerActiveOnPlayer(player:Int):Bool;
	static function IsDamageTrackerActiveOnNetworkId(netID:Int):Bool;
	static function HasNetworkTimeStarted():Bool;
	static function IsCommerceStoreOpen():Bool;
	static function IsEntityGhostedToLocalPlayer(entity:Int):Bool;
	static function IsPlayerInCutscene(player:Int):Bool;
	static function IsSphereVisibleToAnotherMachine(p0:Float, p1:Float, p2:Float, p3:Float):Bool;
	static function IsNetworkIdOwnedByParticipant(netId:Int):Bool;
	static function IsSphereVisibleToPlayer(p0:Int, p1:Float, p2:Float, p3:Float, p4:Float):Bool;
	static function IsStoreAvailableToUser():Bool;
	static function IsTimeMoreThan(timeA:Int, timeB:Int):Bool;
	static function IsTimeLessThan(timeA:Int, timeB:Int):Bool;
	static function IsTimeEqualTo(timeA:Int, timeB:Int):Bool;
	static function NetworkBlockJoinQueueInvites(toggle:Bool):Void;
	static function NetToEnt(netHandle:Int):Int;
	static function NetToPed(netHandle:Int):Int;
	static function NetworkAcceptInvite():Bool;
	static function NetworkAccessTunableFloat(tunableContext:String, tunableName:String, value:Float):Bool;
	static function NetworkAccessTunableBoolHash(tunableContext:Int, tunableName:Int):Bool;
	static function NetToObj(netHandle:Int):Dynamic;
	static function NetToVeh(netHandle:Int):Int;
	static function NetworkAccessTunableIntHash(tunableContext:Int, tunableName:Int, value:Int):Bool;
	static function NetworkAcceptPresenceInvite(p0:Int):Bool;
	static function NetworkActionFollowInvite():Int;
	static function NetworkAccessTunableBool(tunableContext:String, tunableName:String):Bool;
	static function NetworkAccessTunableFloatHash(tunableContext:Int, tunableName:Int, value:Float):Bool;
	static function NetworkAddEntityArea(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float):Int;
	static function NetworkAddEntityToSynchronisedScene(entity:Int, netScene:Int, animDict:String, animName:String, speed:Float, speedMulitiplier:Float,
		flag:Int):Void;
	static function NetworkAccessTunableInt(tunableContext:String, tunableName:String, value:Int):Bool;
	static function NetworkAddFollowers(p0:Int, p1:Int):Void;
	static function NetworkAllowLocalEntityAttachment(entity:Int, toggle:Bool):Void;
	static function NetworkAddEntityAngledArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, width:Float):Int;
	static function NetworkAddPedToSynchronisedScene(ped:Int, netScene:Int, animDict:String, animnName:String, blendInSpeed:Float, blendOutSpeed:Float,
		duration:Int, flag:Int, playbackRate:Float, p9:Int):Void;
	static function NetworkAddSynchronisedSceneCamera(netScene:Int, animDict:String, animName:String):Void;
	static function NetworkAllocateTunablesRegistrationDataMap():Bool;
	static function NetworkAmIBlockedByGamer(networkHandle:Int):Bool;
	static function NetworkAddEntityDisplayedBoundaries(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float):Int;
	static function NetworkAmIMutedByPlayer(player:Int):Bool;
	static function NetworkAmIMutedByGamer(networkHandle:Int):Bool;
	static function NetworkAddFriend(networkHandle:Int, message:String):Bool;
	static function NetworkApplyPedScarData(ped:Int, p1:Int):Void;
	static function NetworkAreHandlesTheSame(netHandle1:Int, netHandle2:Int):Bool;
	static function NetworkAmIBlockedByPlayer(player:Int):Bool;
	static function NetworkApplyTransitionParameter(p0:Int, p1:Int):Void;
	static function NetworkAreTransitionDetailsValid(p0:Int):Bool;
	static function NetworkAreSocialClubPoliciesCurrent():Bool;
	static function NetworkBailTransition():Void;
	static function NetworkApplyCachedPlayerHeadBlendData(ped:Int, player:Int):Bool;
	static function NetworkBail():Void;
	static function NetworkApplyTransitionParameterString(p0:Int, string:String, p2:Bool):Void;
	static function NetworkApplyVoiceProximityOverride(x:Float, y:Float, z:Float):Void;
	static function NetworkBailTransitionQuickmatch():Void;
	static function NetworkAreCutsceneEntities():Bool;
	static function NetworkBlockKickedPlayers(p0:Bool):Void;
	static function NetworkAttachSynchronisedSceneToEntity(netScene:Int, entity:Int, bone:Int):Void;
	static function NetworkCacheLocalPlayerHeadBlendData():Void;
	static function NetworkCanCommunicateWithGamer(networkHandle:Int):Bool;
	static function NetworkCanCommunicateWithGamer2(networkHandle:Int):Bool;
	static function NetworkCanBail():Bool;
	static function NetworkCanPlayMultiplayerWithGamer(networkHandle:Int):Bool;
	static function NetworkCanViewGamerUserContent(networkHandle:Int):Bool;
	static function NetworkBlockInvites(toggle:Bool):Void;
	static function NetworkCanGamerPlayMultiplayerWithMe(networkHandle:Int):Bool;
	static function NetworkCanAccessMultiplayer(loadingState:Int):Bool;
	static function NetworkCancelRespawnSearch():Void;
	static function NetworkCanSessionEnd():Bool;
	static function NetworkCanEnterMultiplayer():Bool;
	static function NetworkCheckCommunicationPrivileges(p0:Int, p1:Int, p2:Bool):Bool;
	static function NetworkChangeTransitionSlots(p0:Int, p1:Int):Void;
	static function NetworkCanSetWaypoint():Bool;
	static function NetworkClanAnyDownloadMembershipPending():Bool;
	static function NetworkCheckDataManagerSucceededForHandle(friendDataIndex:Int, networkHandle:Int):Bool;
	static function NetworkClanAnimation(animDict:String, animName:String):Bool;
	static function NetworkClanGetEmblemTxdName(netHandle:Int, txdName:String):Bool;
	static function NetworkClanDownloadMembershipPending(p0:Int):Bool;
	static function NetworkCheckUserContentPrivileges(p0:Int, p1:Int, p2:Bool):Bool;
	static function NetworkClanGetMembershipCount(p0:Int):Int;
	static function NetworkClanDownloadMembership(networkHandle:Int):Bool;
	static function NetworkClanGetMembership(networkHandle:Int, clanMembership:Int, membershipIndex:Int):Bool;
	static function NetworkClanGetLocalMembershipsCount():Int;
	static function NetworkClanGetMembershipValid(networkHandle:Int, membershipIndex:Int):Bool;
	static function NetworkClanGetUiFormattedTag(clanDesc:Int, bufferSize:Int, formattedTag:String):Void;
	static function NetworkClanIsEmblemReady(p0:Int, p1:Int):Bool;
	static function NetworkClanPlayerGetDesc(clanDesc:Int, bufferSize:Int, networkHandle:Int):Bool;
	static function NetworkClanGetMembershipDesc(memberDesc:Int, p1:Int):Bool;
	static function NetworkClanReleaseEmblem(p0:Int):Void;
	static function NetworkClanJoin(clanDesc:Int):Bool;
	static function NetworkClanRemoteMembershipsAreInCache(p0:Int):Bool;
	static function NetworkClanServiceIsValid():Bool;
	static function NetworkClearFollowInvite():Int;
	static function NetworkClanRequestEmblem(p0:Int):Bool;
	static function NetworkClearFollowers():Void;
	static function NetworkClanIsRockstarClan(clanDesc:Int, bufferSize:Int):Bool;
	static function NetworkClearGetGamerStatus():Void;
	static function NetworkClanPlayerIsActive(networkHandle:Int):Bool;
	static function NetworkClearVoiceProximityOverride():Void;
	static function NetworkClearVoiceChannel():Void;
	static function NetworkClearGroupActivity():Void;
	static function NetworkConcealEntity(entity:Int, toggle:Bool):Void;
	static function NetworkClearClockTimeOverride():Void;
	static function NetworkClearPropertyId():Void;
	static function NetworkDidFindGamersSucceed():Bool;
	static function NetworkDisableLeaveRemotePedBehind(toggle:Bool):Void;
	static function NetworkClearFoundGamers():Void;
	static function NetworkDidGetGamerStatusSucceed():Bool;
	static function NetworkCloseTransitionMatchmaking():Void;
	static function NetworkClearTransitionCreatorHandle():Void;
	static function NetworkCreateSynchronisedScene(x:Float, y:Float, z:Float, xRot:Float, yRot:Float, zRot:Float, rotationOrder:Int, holdLastFrame:Bool,
		looped:Bool, p9:Float, animTime:Float, animSpeed:Float):Int;
	static function NetworkDisableProximityMigration(netID:Int):Void;
	static function NetworkConcealPlayer(player:Int, toggle:Bool, p2:Bool):Void;
	static function NetworkDisplaynamesFromHandlesStart(p0:Int, p1:Int):Int;
	static function NetworkDoTransitionQuickmatch(p0:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function NetworkDisableInvincibleFlashing(player:Int, toggle:Bool):Void;
	static function NetworkDoTransitionQuickmatchAsync(p0:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function NetworkDoTransitionToGame(p0:Bool, maxPlayers:Int):Bool;
	static function NetworkDoTransitionQuickmatchWithGroup(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int):Bool;
	static function NetworkDoTransitionToNewGame(p0:Bool, maxPlayers:Int, p2:Bool):Bool;
	static function NetworkDoesTunableExistHash(tunableContext:Int, tunableName:Int):Bool;
	static function NetworkDoTransitionToFreemode(p0:Int, p1:Int, p2:Bool, players:Int, p4:Bool):Bool;
	static function NetworkDoesNetworkIdExist(netId:Int):Bool;
	static function NetworkExplodeHeli(heli:Int, isAudible:Bool, isInvisible:Bool, netScriptEntityId:Int):Void;
	static function NetworkEndTutorialSession():Void;
	static function NetworkDoTransitionToNewFreemode(p0:Int, p1:Int, players:Int, p3:Bool, p4:Bool, p5:Bool):Bool;
	static function NetworkFindGamersInCrew(p0:Int):Bool;
	static function NetworkDoesEntityExistWithNetworkId(netId:Int):Bool;
	static function NetworkDoesTunableExist(tunableContext:String, tunableName:String):Bool;
	static function NetworkEntityAreaDoesExist(areaHandle:Int):Bool;
	static function NetworkFindMatchedGamers(p0:Int, p1:Float, p2:Float, p3:Float):Bool;
	static function NetworkExplodeVehicle(vehicle:Int, isAudible:Bool, isInvisible:Bool, p3:Bool):Void;
	static function NetworkEntityAreaIsOccupied(areaHandle:Int):Bool;
	static function NetworkFinishBroadcastingData():Void;
	static function NetworkForceLocalUseOfSyncedSceneCamera(sceneId:Int):Void;
	static function NetworkGamerHasHeadset(networkHandle:Int):Bool;
	static function NetworkFadeInEntity(entity:Int, state:Bool):Void;
	static function NetworkFadeOutEntity(entity:Int, normal:Bool, slow:Bool):Void;
	static function NetworkGamertagFromHandleStart(networkHandle:Int):Bool;
	static function NetworkGetAgeGroup():Int;
	static function NetworkGamertagFromHandlePending():Bool;
	static function NetworkGamertagFromHandleSucceeded():Bool;
	static function NetworkGetBackgroundLoadingRecipients(p0:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function NetworkGetDestroyerOfEntity(p0:Int, p1:Int, weaponHash:Int):Bool;
	static function NetworkGetAverageLatencyForPlayer(player:Int):Float;
	static function NetworkGetActivityPlayerNum(p0:Bool):Int;
	static function NetworkGetContentModifierListId(contentHash:Int):Int;
	static function NetworkGetEntityIsLocal(entity:Int):Bool;
	static function NetworkGetAveragePacketLossForPlayer(player:Int):Float;
	static function NetworkGetEntityFromNetworkId(netId:Int):Int;
	static function NetworkGetCurrentlySelectedGamerHandleFromInviteMenu(p0:Int):Bool;
	static function NetworkGetAverageLatencyForPlayer2(player:Int):Float;
	static function NetworkGetDisplaynamesFromHandles(p0:Int, p1:Int, p2:Int):Int;
	static function NetworkGetEntityIsNetworked(entity:Int):Bool;
	static function NetworkGetEntityKillerOfPlayer(player:Int, weaponHash:Int):Int;
	static function NetworkGetDestroyerOfNetworkId(netId:Int, weaponHash:Int):Int;
	static function NetworkGetGamerStatusFromQueue():Bool;
	static function NetworkGetEntityNetScriptId(entity:Int):Int;
	static function NetworkGetFriendCount():Int;
	static function NetworkGetHostOfScript(scriptName:String, p1:Int, p2:Int):Int;
	static function NetworkGetFoundGamer(p0:Int, p1:Int):Bool;
	static function NetworkGetFriendName(friendIndex:Int):String;
	static function NetworkGetLastVelocityReceived(entity:Int):Vector3;
	static function NetworkGetGamerStatusResult(p0:Int, p1:Int):Bool;
	static function NetworkGetFriendNameFromIndex(friendIndex:Int):String;
	static function NetworkGetLocalHandle(networkHandle:Int, bufferSize:Int):Void;
	static function NetworkGetInstanceIdOfThisScript():Int;
	static function NetworkGetGlobalMultiplayerClock(hours:Int, minutes:Int, seconds:Int):Void;
	static function NetworkGetGamertagFromHandle(networkHandle:Int):String;
	static function NetworkGetMaxNumParticipants():Int;
	static function NetworkGetMaxFriends():Int;
	static function NetworkGetNumFoundGamers():Int;
	static function NetworkGetHostOfThisScript():Int;
	static function NetworkGetNetworkIdFromEntity(entity:Int):Int;
	static function NetworkGetLocalSceneFromNetworkId(netId:Int):Int;
	static function NetworkGetNumParticipants():Int;
	static function NetworkGetNumUnackedForPlayer(player:Int):Int;
	static function NetworkGetNumBodyTrackers():Int;
	static function NetworkGetNumConnectedPlayers():Int;
	static function NetworkGetPlayerCoords(player:Int):Vector3;
	static function NetworkGetNumPresenceInvites():Int;
	static function NetworkGetNumScriptParticipants(p0:Int, p1:Int, p2:Int):Int;
	static function NetworkGetPlayerIndexFromPed(ped:Int):Int;
	static function NetworkGetOldestResendCountForPlayer(player:Int):Int;
	static function NetworkGetParticipantIndex(index:Int):Int;
	static function NetworkGetPlayerTutorialSessionInstance(player:Int):Int;
	static function NetworkGetPlatformPartyUnk():Int;
	static function NetworkGetPlatformPartyMembers(data:Int, dataSize:Int):Int;
	static function NetworkGetPlayerOwnsWaypoint(player:Int):Bool;
	static function NetworkGetPlayerFromGamerHandle(networkHandle:Int):Int;
	static function NetworkGetPlayerIndex(player:Int):Int;
	static function NetworkGetPositionHashOfThisScript():Int;
	static function NetworkGetPresenceInviteHandle(p0:Int, p1:Int):Bool;
	static function NetworkGetPresenceInviteFromAdmin(p0:Int):Bool;
	static function NetworkGetPlayerLoudness(player:Int):Float;
	static function NetworkGetPresenceInviteIsTournament(p0:Int):Bool;
	static function NetworkGetPresenceInviteId(p0:Int):Int;
	static function NetworkGetPresenceInviteContentId(p0:Int):String;
	static function NetworkGetPresenceInviteInviter(inviteIndex:Int):String;
	static function NetworkGetPresenceInviteSessionId(inviteIndex:Int):Int;
	static function NetworkGetPresenceInvitePlaylistLength(p0:Int):Int;
	static function NetworkGetPresenceInvitePlaylistCurrent(p0:Int):Int;
	static function NetworkGetPrimaryClanDataClear():Int;
	static function NetworkGetPrimaryClanDataNew(p0:Int, p1:Int):Bool;
	static function NetworkGetPrimaryClanDataCancel():Void;
	static function NetworkGetPrimaryClanDataStart(p0:Int, p1:Int):Bool;
	static function NetworkGetRandomInt():Int;
	static function NetworkGetPrimaryClanDataSuccess():Int;
	static function NetworkGetPrimaryClanDataPending():Int;
	static function NetworkGetRosPrivilege25():Bool;
	static function NetworkGetRosPrivilege24():Bool;
	static function NetworkGetRandomIntRanged(rangeStart:Int, rangeEnd:Int):Int;
	static function NetworkGetRespawnResult(randomInt:Int, coordinates:Vector3, heading:Float):Void;
	static function NetworkGetThisScriptIsNetworkScript():Bool;
	static function NetworkGetRosPrivilege9():Bool;
	static function NetworkGetRespawnResultFlags(p0:Int):Int;
	static function NetworkGetTransitionHost(networkHandle:Int):Bool;
	static function NetworkGetTargetingMode():Int;
	static function NetworkGetScriptStatus():Int;
	static function NetworkGetTotalNumPlayers():Int;
	static function NetworkGetUnreliableResendCountForPlayer(player:Int):Int;
	static function NetworkGetTalkerProximity():Float;
	static function NetworkHandleFromPlayer(player:Int, networkHandle:Int, bufferSize:Int):Void;
	static function NetworkGetTunableCloudCrc():Int;
	static function NetworkGetTimeoutTime():Int;
	static function NetworkHandleFromMemberId(memberId:String, networkHandle:Int, bufferSize:Int):Void;
	static function NetworkHasCachedPlayerHeadBlendData(player:Int):Bool;
	static function NetworkHasAgeRestrictedProfile():Bool;
	static function NetworkHandleFromUserId(userId:String, networkHandle:Int, bufferSize:Int):Void;
	static function NetworkGetTransitionMembers(data:Int, dataCount:Int):Int;
	static function NetworkHasControlOfPickup(pickup:Int):Bool;
	static function NetworkHandleFromFriend(friendIndex:Int, networkHandle:Int, bufferSize:Int):Void;
	static function NetworkHasControlOfDoor(doorHash:Int):Bool;
	static function NetworkHasGameBeenAltered():Bool;
	static function NetworkHasControlOfNetworkId(netId:Int):Bool;
	static function NetworkHasInvitedGamer(p0:Int):Bool;
	static function NetworkHasControlOfEntity(entity:Int):Bool;
	static function NetworkHasHeadset():Bool;
	static function NetworkHasFollowInvite():Bool;
	static function NetworkHasEntityBeenRegisteredWithThisThread(entity:Int):Bool;
	static function NetworkHasInvitedGamerToTransition(p0:Int):Bool;
	static function NetworkHasInviteBeenAcked(networkHandle:Int):Bool;
	static function NetworkHasReceivedHostBroadcastData():Bool;
	static function NetworkHasSocialNetworkingSharingPriv():Bool;
	static function NetworkHasPendingInvite():Bool;
	static function NetworkHasPlayerStartedTransition(player:Int):Bool;
	static function NetworkHasRosPrivilege(index:Int):Bool;
	static function NetworkHasSocialClubAccount():Bool;
	static function NetworkHasRosPrivilegeEndDate(privilege:Int, banType:Int, timeData:Vector3):Bool;
	static function NetworkHasViewGamerUserContentResult(networkHandle:Int):Bool;
	static function NetworkHashFromGamerHandle(networkHandle:Int):Int;
	static function NetworkHasValidRosCredentials():Bool;
	static function NetworkHasTransitionInviteBeenAcked(networkHandle:Int):Bool;
	static function NetworkHaveOnlinePrivilege2():Bool;
	static function NetworkHaveCommunicationPrivileges(p0:Int, player:Int):Bool;
	static function NetworkHashFromPlayerHandle(player:Int):Int;
	static function NetworkHaveRosCreateTicketPriv():Bool;
	static function NetworkHaveRosBannedPriv():Bool;
	static function NetworkHaveRosSocialClubPriv():Bool;
	static function NetworkHaveOnlinePrivileges():Bool;
	static function NetworkInviteGamers(p0:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function NetworkHaveRosMultiplayerPriv():Bool;
	static function NetworkHaveRosLeaderboardWritePriv():Bool;
	static function NetworkHostTransition(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Bool, p6:Bool, p7:Int, p8:Int, p9:Int):Bool;
	static function NetworkIsAddingFriend():Int;
	static function NetworkHaveUserContentPrivileges(p0:Int):Bool;
	static function NetworkInviteGamersToTransition(p0:Int, p1:Int):Bool;
	static function NetworkIsChattingInPlatformParty(networkHandle:Int):Bool;
	static function NetworkIsActivitySession():Bool;
	static function NetworkIsActivitySpectatorFromHandle(networkHandle:Int):Bool;
	static function NetworkIsActivitySpectator():Bool;
	static function NetworkIsClockTimeOverridden():Bool;
	static function NetworkIsDoorNetworked(doorHash:Int):Bool;
	static function NetworkIsCloudBackgroundScriptRequestPending():Bool;
	static function NetworkIsCableConnected():Bool;
	static function NetworkIsFindingGamers():Bool;
	static function NetworkIsCloudAvailable():Bool;
	static function NetworkIsEntityConcealed(entity:Int):Bool;
	static function NetworkIsEntityFading(entity:Int):Bool;
	static function NetworkIsFriendHandleOnline(networkHandle:Int):Bool;
	static function NetworkIsConnectionEndpointRelayServer(player:Int):Bool;
	static function NetworkIsFriendIndexOnline(friendIndex:Int):Bool;
	static function NetworkIsFriend(networkHandle:Int):Bool;
	static function NetworkIsGamerBlockedByMe(networkHandle:Int):Bool;
	static function NetworkIsFriendOnline(name:String):Bool;
	static function NetworkIsGameInProgress():Bool;
	static function NetworkIsFriendInMultiplayer(friendName:String):Bool;
	static function NetworkIsGamerInMySession(networkHandle:Int):Bool;
	static function NetworkIsGamerTalking(networkHandle:Int):Bool;
	static function NetworkIsGamerMutedByMe(networkHandle:Int):Bool;
	static function NetworkIsFriendInSameTitle(friendName:String):Bool;
	static function NetworkIsHost():Bool;
	static function NetworkIsGettingGamerStatus():Bool;
	static function NetworkIsHandleValid(networkHandle:Int, bufferSize:Int):Bool;
	static function NetworkIsHostOfThisScript():Bool;
	static function NetworkIsInSession():Bool;
	static function NetworkIsInPlatformParty():Bool;
	static function NetworkIsInMpCutscene():Bool;
	static function NetworkIsInPlatformPartyChat():Bool;
	static function NetworkIsInactiveProfile(networkHandle:Int):Bool;
	static function NetworkIsInSpectatorMode():Bool;
	static function NetworkIsInParty():Bool;
	static function NetworkIsInTutorialSession():Bool;
	static function NetworkIsMultiplayerDisabled():Bool;
	static function NetworkIsLocalPlayerInvincible():Bool;
	static function NetworkIsInTransition():Bool;
	static function NetworkIsParticipantActive(p0:Int):Bool;
	static function NetworkIsLocalTalking():Bool;
	static function NetworkIsNetworkIdAClone(netId:Int):Bool;
	static function NetworkIsOfflineInvitePending():Bool;
	static function NetworkIsPendingFriend(p0:Int):Int;
	static function NetworkIsPlayerAParticipant(player:Int):Bool;
	static function NetworkIsPlayerAParticipantOnScript(player1:Int, script:String, player2:Int):Bool;
	static function NetworkIsPlayerBlockedByMe(player:Int):Bool;
	static function NetworkIsPartyMember(networkHandle:Int):Bool;
	static function NetworkIsPlayerInMpCutscene(player:Int):Bool;
	static function NetworkIsPlayerActive(player:Int):Bool;
	static function NetworkIsPlayerConnected(player:Int):Bool;
	static function NetworkIsPlayerConcealed(player:Int):Bool;
	static function NetworkIsPlayerMutedByMe(player:Int):Bool;
	static function NetworkIsPlayerEqualToIndex(player:Int, index:Int):Bool;
	static function NetworkIsPlayerTalking(player:Int):Bool;
	static function NetworkIsPsnAvailable():Bool;
	static function NetworkIsPlayerFading(player:Int):Bool;
	static function NetworkIsSessionActive():Bool;
	static function NetworkIsSignedIn():Bool;
	static function NetworkIsScriptActiveByHash(scriptHash:Int, p1:Int, p2:Bool, p3:Int):Bool;
	static function NetworkIsSessionStarted():Bool;
	static function NetworkIsSignedOnline():Bool;
	static function NetworkIsThisScriptMarked(p0:Int, p1:Bool, p2:Int):Bool;
	static function NetworkIsScriptActive(scriptName:String, player:Int, p2:Bool, p3:Int):Bool;
	static function NetworkIsTransitionHost():Bool;
	static function NetworkIsTransitionClosedCrew():Bool;
	static function NetworkIsTransitionBusy():Bool;
	static function NetworkIsSessionBusy():Bool;
	static function NetworkIsTransitionMatchmaking():Bool;
	static function NetworkIsTransitionPrivate():Bool;
	static function NetworkIsTextChatActive():Bool;
	static function NetworkIsTransitionVisibilityLocked():Bool;
	static function NetworkIsTransitionSolo():Bool;
	static function NetworkIsTransitionOpenToMatchmaking():Bool;
	static function NetworkIsTransitionClosedFriends():Bool;
	static function NetworkJoinTransition(player:Int):Bool;
	static function NetworkIsTransitionToGame():Bool;
	static function NetworkIsTunableCloudRequestPending():Bool;
	static function NetworkIsTransitionHostFromHandle(networkHandle:Int):Bool;
	static function NetworkJoinPreviouslyFailedSession():Bool;
	static function NetworkIsTransitionStarted():Bool;
	static function NetworkIsTutorialSessionChangePending():Bool;
	static function NetworkJoinGroupActivity():Int;
	static function NetworkJoinPreviouslyFailedTransition():Bool;
	static function NetworkLaunchTransition():Bool;
	static function NetworkLeaveTransition():Bool;
	static function NetworkMarkTransitionGamerAsFullyJoined(p0:Int):Bool;
	static function NetworkMemberIdFromGamerHandle(networkHandle:Int):String;
	static function NetworkOverrideReceiveRestrictions(player:Int, toggle:Bool):Void;
	static function NetworkOverrideClockMillisecondsPerGameMinute(ms:Int):Void;
	static function NetworkOpenTransitionMatchmaking():Void;
	static function NetworkOverrideChatRestrictions(player:Int, toggle:Bool):Void;
	static function NetworkOverrideReceiveRestrictionsAll(toggle:Bool):Void;
	static function NetworkOverrideCoordsAndHeading(entity:Int, x:Float, y:Float, z:Float, heading:Float):Void;
	static function NetworkOverrideTeamRestrictions(team:Int, toggle:Bool):Void;
	static function NetworkOverrideClockTime(hours:Int, minutes:Int, seconds:Int):Void;
	static function NetworkOverrideSendRestrictions(player:Int, toggle:Bool):Void;
	static function NetworkPlayerGetName(player:Int):String;
	static function NetworkOverrideSendRestrictionsAll(toggle:Bool):Void;
	static function NetworkPedForceGameStateUpdate(ped:Int):Void;
	static function NetworkOverrideTransitionChat(p0:Bool):Void;
	static function NetworkPlayerGetUserid(player:Int, userID:Int):String;
	static function NetworkPlayerHasHeadset(player:Int):Bool;
	static function NetworkPlayerIsCheater():Bool;
	static function NetworkPlayerGetCheaterReason():Int;
	static function NetworkPlayerIndexIsCheater(player:Int):Bool;
	static function NetworkQueryRespawnResults(p0:Int):Int;
	static function NetworkPlayerIsBadsport():Bool;
	static function NetworkPlayerIsRockstarDev(player:Int):Bool;
	static function NetworkRegisterEntityAsNetworked(entity:Int):Void;
	static function NetworkRegisterPlayerBroadcastVariables(vars:Int, numVars:Int):Void;
	static function NetworkQueueGamerForStatus(p0:Int):Bool;
	static function NetworkRegisterTunableBoolHash(contextHash:Int, nameHash:Int, value:Bool):Bool;
	static function NetworkRegisterTunableFloatHash(contextHash:Int, nameHash:Int, value:Float):Bool;
	static function NetworkRemoveAllTransitionInvite():Void;
	static function NetworkRemoveEntityArea(p0:Int):Bool;
	static function NetworkRegisterHostBroadcastVariables(vars:Int, numVars:Int):Void;
	static function NetworkRemovePresenceInvite(p0:Int):Bool;
	static function NetworkRequestCloudBackgroundScripts():Bool;
	static function NetworkRemoveTransitionInvite(p0:Int):Void;
	static function NetworkRegisterTunableIntHash(contextHash:Int, nameHash:Int, value:Int):Bool;
	static function NetworkRequestCloudTunables():Void;
	static function NetworkRequestControlOfDoor(doorID:Int):Bool;
	static function NetworkReportMyself():Void;
	static function NetworkRequestControlOfEntity(entity:Int):Bool;
	static function NetworkRequestControlOfNetworkId(netId:Int):Bool;
	static function NetworkResetBodyTracker():Void;
	static function NetworkSendInviteViaPresence(networkHandle:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function NetworkResurrectLocalPlayer(x:Float, y:Float, z:Float, heading:Float, unk:Bool, changetime:Bool):Void;
	static function NetworkSeedRandomNumberGenerator(seed:Int):Void;
	static function NetworkSendTextMessage(message:String, networkHandle:Int):Bool;
	static function NetworkSendTransitionGamerInstruction(networkHandle:Int, p1:String, p2:Int, p3:Int, p4:Bool):Bool;
	static function NetworkRespawnCoords(player:Int, x:Float, y:Float, z:Float, p4:Bool, p5:Bool):Void;
	static function NetworkSessionActivityQuickmatch(p0:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function NetworkSessionBlockJoinRequests(toggle:Bool):Void;
	static function NetworkSendPresenceTransitionInvite(p0:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function NetworkSessionEnd(p0:Bool, p1:Bool):Bool;
	static function NetworkSessionCrewMatchmaking(p0:Int, p1:Int, p2:Int, maxPlayers:Int, p4:Bool):Bool;
	static function NetworkSessionAddActiveMatchmakingGroup(groupId:Int):Void;
	static function NetworkSessionEnter(p0:Int, p1:Int, p2:Int, maxPlayers:Int, p4:Int, p5:Int):Int;
	static function NetworkSessionCancelInvite():Void;
	static function NetworkSessionGetInviter(networkHandle:Int):Void;
	static function NetworkSessionFriendMatchmaking(p0:Int, p1:Int, maxPlayers:Int, p3:Bool):Bool;
	static function NetworkSessionGetPrivateSlots():Int;
	static function NetworkSessionChangeSlots(p0:Int, p1:Bool):Void;
	static function NetworkSessionHostSinglePlayer(p0:Int):Void;
	static function NetworkSessionGetKickVote(player:Int):Bool;
	static function NetworkSessionIsSolo():Bool;
	static function NetworkSessionGetMatchmakingGroupFree(p0:Int):Int;
	static function NetworkSessionForceCancelInvite():Void;
	static function NetworkSessionIsClosedCrew():Bool;
	static function NetworkSessionKickPlayer(player:Int):Void;
	static function NetworkSessionHostFriendsOnly(p0:Int, maxPlayers:Int):Bool;
	static function NetworkSessionHost(p0:Int, maxPlayers:Int, p2:Bool):Bool;
	static function NetworkSessionIsInVoiceSession():Bool;
	static function NetworkSessionIsPrivate():Bool;
	static function NetworkSessionHostClosed(p0:Int, maxPlayers:Int):Bool;
	static function NetworkSessionIsVoiceSessionBusy():Bool;
	static function NetworkSessionIsClosedFriends():Bool;
	static function NetworkSessionJoinInvite():Void;
	static function NetworkSessionSetMatchmakingGroupMax(playerType:Int, playerCount:Int):Void;
	static function NetworkSessionLeaveSinglePlayer():Void;
	static function NetworkSessionMarkVisible(toggle:Bool):Void;
	static function NetworkSessionIsVisible():Bool;
	static function NetworkSessionSetMatchmakingPropertyId(p0:Bool):Void;
	static function NetworkSessionSetMatchmakingMentalState(p0:Int):Void;
	static function NetworkSessionSetMatchmakingGroup(matchmakingGroup:Int):Void;
	static function NetworkSessionVoiceHost():Void;
	static function NetworkSessionValidateJoin(p0:Bool):Void;
	static function NetworkSessionVoiceConnectToPlayer(globalPtr:Int):Void;
	static function NetworkSessionVoiceSetTimeout(timeout:Int):Void;
	static function NetworkSessionVoiceLeave():Void;
	static function NetworkSetActivityPlayerMax(playerCount:Int):Void;
	static function NetworkSessionVoiceRespondToRequest(p0:Bool, p1:Int):Void;
	static function NetworkSessionWasInvited():Bool;
	static function NetworkSetActivitySpectator(toggle:Bool):Void;
	static function NetworkSetCurrentSpawnSetting(mpSettingSpawn:Int):Void;
	static function NetworkSetActivitySpectatorMax(maxSpectators:Int):Void;
	static function NetworkSetChoiceMigrateOptions(toggle:Bool, player:Int):Void;
	static function NetworkSetCurrentDataManagerHandle(p0:Int):Bool;
	static function NetworkSetCurrentMissionId(missionId:String):Void;
	static function NetworkSetEntityInvisibleToNetwork(entity:Int, toggle:Bool):Void;
	static function NetworkSetEntityCanBlend(entity:Int, toggle:Bool):Void;
	static function NetworkSetCurrentlySelectedGamerHandleFromInviteMenu(p0:Int):Bool;
	static function NetworkSetInMpCutscene(p0:Bool, p1:Bool):Void;
	static function NetworkSetEntityGhostedWithOwner(entity:Int, p1:Bool):Void;
	static function NetworkSetInSpectatorMode(toggle:Bool, playerPed:Int):Void;
	static function NetworkSetGamerInvitedToTransition(networkHandle:Int):Void;
	static function NetworkSetLocalPlayerInvincibleTime(time:Int):Void;
	static function NetworkSetLocalPlayerSyncLookAt(toggle:Bool):Void;
	static function NetworkSetFriendlyFireOption(toggle:Bool):Void;
	static function NetworkSetNoSpectatorChat(toggle:Bool):Void;
	static function NetworkSetInviteOnCallForInviteMenu(networkHandle:Int):Void;
	static function NetworkSetInFreeCamMode(toggle:Bool):Void;
	static function NetworkSetPropertyId(id:Int):Void;
	static function NetworkSetObjectForceStaticBlend(object:Dynamic, enabled:Bool):Void;
	static function NetworkSetMissionFinished():Void;
	static function NetworkSetPlayerIsPassive(toggle:Bool):Void;
	static function NetworkSetInSpectatorModeExtended(toggle:Bool, playerPed:Int, p2:Bool):Void;
	static function NetworkSetOverrideSpectatorMode(toggle:Bool):Void;
	static function NetworkSetRichPresenceString(p0:Int, textLabel:String):Void;
	static function NetworkSetTalkerProximity(value:Float):Void;
	static function NetworkSetScriptReadyForEvents(toggle:Bool):Void;
	static function NetworkSetTransitionActivityId(p0:Int):Void;
	static function NetworkSetRichPresence(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function NetworkSetTeamOnlyChat(toggle:Bool):Void;
	static function NetworkSetThisScriptIsNetworkScript(maxNumMissionParticipants:Int, p1:Bool, instanceId:Int):Void;
	static function NetworkSetVehicleTestDrive(toggle:Bool):Void;
	static function NetworkSetTransitionVisibilityLock(p0:Bool, p1:Bool):Void;
	static function NetworkSetTransitionCreatorHandle(p0:Int):Void;
	static function NetworkShouldShowConnectivityTroubleshooting():Bool;
	static function NetworkSetVoiceActive(toggle:Bool):Void;
	static function NetworkSetVehicleWheelsDestructible(vehicle:Int, toggle:Bool):Void;
	static function NetworkShowProfileUi(networkHandle:Int):Void;
	static function NetworkSetVoiceChannel(channel:Int):Void;
	static function NetworkStartSoloTutorialSession():Void;
	static function NetworkStartRespawnSearchForPlayer(player:Int, x:Float, y:Float, z:Float, radius:Float, p5:Float, p6:Float, p7:Float, flags:Int):Bool;
	static function NetworkStartSynchronisedScene(netScene:Int):Void;
	static function NetworkStartUserContentPermissionsCheck(netHandle:Int):Int;
	static function NetworkSuppressInvite(toggle:Bool):Void;
	static function NetworkStopSynchronisedScene(netScene:Int):Void;
	static function NetworkStartRespawnSearchInAngledAreaForPlayer(player:Int, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, width:Float,
		p8:Float, p9:Float, p10:Float, flags:Int):Bool;
	static function NetworkTryAccessTunableBoolHash(tunableContext:Int, tunableName:Int, defaultValue:Bool):Bool;
	static function NetworkTransitionTrack(hash:Int, p1:Int, p2:Int, state:Int, p4:Int):Void;
	static function NetworkUpdatePlayerScars():Void;
	static function NetworkUgcNav(p0:Int, p1:Int):Void;
	static function NetworkUnregisterNetworkedEntity(entity:Int):Void;
	static function NetworkUseHighPrecisionBlending(netID:Int, toggle:Bool):Void;
	static function ObjToNet(object:Dynamic):Int;
	static function NetworkUseLogarithmicBlendingThisFrame(entity:Int):Void;
	static function OpenCommerceStore(p0:String, p1:String):Void;
	static function ParticipantIdToInt():Int;
	static function PedToNet(ped:Int):Int;
	static function ParticipantId():Int;
	static function ReleaseAllCommerceItemImages():Void;
	static function RequestCommerceItemImage(index:Int):Bool;
	static function RemoveAllStickyBombsFromEntity(entity:Int):Void;
	static function RemoteCheatDetected():Bool;
	static function RefreshPlayerListStats(p0:Int):Bool;
	static function ReserveNetworkLocalVehicles(amount:Int):Void;
	static function ReserveNetworkLocalObjects(amount:Int):Void;
	static function ReserveNetworkLocalPeds(amount:Int):Void;
	static function ReserveNetworkMissionObjects(amount:Int):Void;
	static function ReserveNetworkMissionVehicles(amount:Int):Void;
	static function ReserveNetworkMissionPeds(amount:Int):Void;
	static function ResetGhostedEntityAlpha():Void;
	static function SetBalanceAddMachines(data:Int, dataCount:Int, contentTypeName:String):Bool;
	static function SetEntityLocallyVisible(entity:Int):Void;
	static function SetEntityLocallyInvisible(entity:Int):Void;
	static function SetBalanceAddMachine(contentId:String, contentTypeName:String):Bool;
	static function SetEntityVisibleInCutscene(p0:Int, p1:Bool, p2:Bool):Void;
	static function SetGhostedEntityAlpha(alpha:Int):Void;
	static function SetLocalPlayerInvisibleLocally(p0:Bool):Void;
	static function SetLocalPlayerAsGhost(toggle:Bool):Void;
	static function SetNetworkCutsceneEntities(toggle:Bool):Void;
	static function SetNetworkIdVisibleInCutscene(netId:Int, p1:Bool, p2:Bool):Void;
	static function SetLocalPlayerVisibleInCutscene(p0:Bool, p1:Bool):Void;
	static function SetLocalPlayerVisibleLocally(p0:Bool):Void;
	static function SetNetworkIdAlwaysExistsForPlayer(netId:Int, player:Int, toggle:Bool):Void;
	static function SetNetworkEnableVehiclePositionCorrection(vehicle:Int, toggle:Bool):Void;
	static function SetNetworkVehiclePositionUpdateMultiplier(vehicle:Int, multiplier:Float):Void;
	static function SetNetworkIdExistsOnAllMachines(netId:Int, toggle:Bool):Void;
	static function SetNetworkIdCanMigrate(netId:Int, toggle:Bool):Void;
	static function SetPlayerInvisibleLocally(player:Int, toggle:Bool):Void;
	static function SetNetworkVehicleAsGhost(vehicle:Int, toggle:Bool):Void;
	static function SetStoreEnabled(toggle:Bool):Void;
	static function SetRelationshipToPlayer(player:Int, p1:Bool):Void;
	static function ShutdownAndLaunchSinglePlayerGame():Void;
	static function SetNetworkVehicleRespotTimer(netId:Int, time:Int):Void;
	static function TextureDownloadRelease(p0:Int):Void;
	static function ShutdownAndLoadMostRecentSave():Bool;
	static function TextureDownloadGetName(p0:Int):String;
	static function SetPlayerVisibleLocally(player:Int, toggle:Bool):Void;
	static function UgcClearCreateResult():Void;
	static function UgcCancelQuery():Void;
	static function TextureDownloadHasFailed(p0:Int):Bool;
	static function TextureDownloadRequest(PlayerHandle:Int, FilePath:String, Name:String, p3:Bool):Int;
	static function TitleTextureDownloadRequest(FilePath:String, Name:String, p2:Bool):Int;
	static function UgcClearOfflineQuery():Void;
	static function UgcClearQueryResults():Void;
	static function TriggerScriptCrcCheckOnPlayer(player:Int, p1:Int, scriptHash:Int):Bool;
	static function UgcDidGetSucceed():Int;
	static function UgcCopyContent(p0:Int, p1:Int):Bool;
	static function UgcGetContentCategory(p0:Int):Int;
	static function UgcClearModifyResult():Void;
	static function UgcGetCachedDescription(p0:Int, p1:Int):String;
	static function UgcGetContentDescriptionHash(p0:Int):Int;
	static function UgcGetContentHasPlayerBookmarked(p0:Int):Bool;
	static function UgcGetBookmarkedContent(p0:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function UgcGetContentFileVersion(p0:Int, p1:Int):Int;
	static function UgcGetContentIsVerified(p0:Int):Bool;
	static function UgcGetContentHasPlayerRecord(p0:Int):Bool;
	static function UgcGetContentName(p0:Int):String;
	static function UgcGetContentId(p0:Int):String;
	static function UgcGetContentRating(p0:Int, p1:Int):Int;
	static function UgcGetContentHash():Int;
	static function UgcGetContentLanguage(p0:Int):Int;
	static function UgcGetContentIsPublished(p0:Int):Bool;
	static function UgcGetContentNum():Int;
	static function UgcGetContentRatingNegativeCount(p0:Int, p1:Int):Int;
	static function UgcGetContentPath(p0:Int, p1:Int):String;
	static function UgcGetContentUpdatedDate(p0:Int, p1:Int):Void;
	static function UgcGetContentRatingPositiveCount(p0:Int, p1:Int):Int;
	static function UgcGetContentUserId(p0:Int):String;
	static function UgcGetContentRatingCount(p0:Int, p1:Int):Int;
	static function UgcGetContentUserName(p0:Int):String;
	static function UgcGetContentTotal():Int;
	static function UgcGetCrewContent(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Bool;
	static function UgcGetCreateResult():Int;
	static function UgcGetQueryResult():Int;
	static function UgcGetCreateContentId():String;
	static function UgcGetGetByCategory(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Bool;
	static function UgcGetFriendContent(p0:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function UgcGetCreatorNum():Int;
	static function UgcHasGetFinished():Bool;
	static function UgcGetModifyResult():Int;
	static function UgcGetMyContent(p0:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function UgcGetRootContentId(p0:Int):String;
	static function UgcHasCreateFinished():Bool;
	static function UgcHasModifyFinished():Bool;
	static function UgcIsGetting():Bool;
	static function UgcPoliciesMakePrivate(p0:Int):Bool;
	static function UgcQueryByContentId(contentId:String, latestVersion:Bool, contentTypeName:String):Bool;
	static function UgcIsLanguageSupported(p0:Int):Bool;
	static function UgcRequestCachedDescription(p0:Int):Int;
	static function UgcQueryByContentIds(data:Int, count:Int, latestVersion:Bool, contentTypeName:String):Bool;
	static function UgcPublish(contentId:String, baseContentId:String, contentTypeName:String):Bool;
	static function UgcRequestContentDataFromIndex(p0:Int, p1:Int):Int;
	static function UgcQueryMyContent(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int):Bool;
	static function UgcQueryRecentlyCreatedContent(offset:Int, count:Int, contentTypeName:String, p3:Int):Bool;
	static function UgcSetBookmarked(contentId:String, bookmarked:Bool, contentTypeName:String):Bool;
	static function UgcRequestContentDataFromParams(contentTypeName:String, contentId:String, p2:Int, p3:Int, p4:Int):Int;
	static function UsePlayerColourInsteadOfTeamColour(toggle:Bool):Void;
	static function UgcSetQueryDataFromOffline(p0:Bool):Void;
	static function VehToNet(vehicle:Int):Int;
	static function UgcSetDeleted(p0:Int, p1:Bool, p2:Int):Bool;
	static function UgcTextureDownloadRequest(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Bool):Int;
	static function AddNavmeshBlockingObject(x:Float, y:Float, z:Float, width:Float, length:Float, height:Float, heading:Float, p7:Bool, p8:Int):Int;
	static function AddNavmeshRequiredRegion(x:Float, y:Float, radius:Float):Void;
	static function AreNodesLoadedForArea(x1:Float, y1:Float, x2:Float, y2:Float):Bool;
	static function DoesNavmeshBlockingObjectExist(p0:Int):Bool;
	static function ClearGpsDisabledZoneAtIndex(index:Int):Void;
	static function GetClosestMajorVehicleNode(x:Float, y:Float, z:Float, outPosition:Vector3, unknown1:Float, unknown2:Int):Bool;
	static function AreAllNavmeshRegionsLoaded():Bool;
	static function GetGpsBlipRouteFound():Bool;
	static function GetClosestVehicleNode(x:Float, y:Float, z:Float, outPosition:Vector3, nodeType:Int, p5:Float, p6:Float):Bool;
	static function GenerateDirectionsToCoord(x:Float, y:Float, z:Float, p3:Bool, direction:Int, vehicle:Float, distToNxJunction:Float):Int;
	static function GetGpsBlipRouteLength():Int;
	static function GetHeightmapBottomZForArea(x1:Float, y1:Float, x2:Float, y2:Float):Float;
	static function CalculateTravelDistanceBetweenPoints(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float):Float;
	static function GetHeightmapTopZForArea(x1:Float, y1:Float, x2:Float, y2:Float):Float;
	static function GetClosestRoad(x:Float, y:Float, z:Float, p3:Float, p4:Int, p5:Vector3, p6:Vector3, p7:Int, p8:Int, p9:Float, p10:Bool):Int;
	static function GetNextGpsDisabledZoneIndex(index:Int):Int;
	static function GetClosestVehicleNodeWithHeading(x:Float, y:Float, z:Float, outPosition:Vector3, outHeading:Float, nodeType:Int, p6:Float, p7:Int):Bool;
	static function GetNthClosestVehicleNodeId(x:Float, y:Float, z:Float, nth:Int, nodetype:Int, p5:Float, p6:Float):Int;
	static function DisableNavmeshInArea(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int):Void;
	static function GetHeightmapBottomZForPosition(x:Float, y:Float):Float;
	static function GetGpsWaypointRouteEnd(result:Vector3, p1:Bool, p2:Float, p3:Int):Bool;
	static function GetPointOnRoadSide(x:Float, y:Float, z:Float, p3:Int, outPosition:Vector3):Bool;
	static function GetNthClosestVehicleNodeFavourDirection(x:Float, y:Float, z:Float, desiredX:Float, desiredY:Float, desiredZ:Float, nthClosest:Int,
		outPosition:Vector3, outHeading:Float, nodetype:Int, p10:Float, p11:Int):Bool;
	static function GetNthClosestVehicleNodeWithHeading(x:Float, y:Float, z:Float, nthClosest:Int, outPosition:Vector3, heading:Float, unknown1:Int,
		unknown2:Int, unknown3:Float, unknown4:Float):Bool;
	static function GetHeightmapTopZForPosition(x:Float, y:Float):Float;
	static function GetRandomVehicleNode(x:Float, y:Float, z:Float, radius:Float, p4:Bool, p5:Bool, p6:Bool, outPosition:Vector3, nodeId:Int):Bool;
	static function GetRoadBoundaryUsingHeading(x:Float, y:Float, z:Float, heading:Float, outPosition:Vector3):Bool;
	static function GetVehicleNodeIsGpsAllowed(nodeID:Int):Bool;
	static function GetNthClosestVehicleNode(x:Float, y:Float, z:Float, nthClosest:Int, outPosition:Vector3, unknown1:Int, unknown2:Int, unknown3:Int):Bool;
	static function GetVehicleNodePosition(nodeId:Int, outPosition:Vector3):Void;
	static function GetSafeCoordForPed(x:Float, y:Float, z:Float, onGround:Bool, outPosition:Vector3, flags:Int):Bool;
	static function GetNthClosestVehicleNodeIdWithHeading(x:Float, y:Float, z:Float, nthClosest:Int, outPosition:Vector3, outHeading:Float, p6:Int, p7:Float,
		p8:Float):Int;
	static function GetVehicleNodeIsSwitchedOff(nodeID:Int):Bool;
	static function GetVehicleNodeProperties(x:Float, y:Float, z:Float, density:Int, flags:Int):Bool;
	static function IsPointOnRoad(x:Float, y:Float, z:Float, vehicle:Int):Bool;
	static function GetNumNavmeshesExistingInArea(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float):Int;
	static function IsVehicleNodeIdValid(vehicleNodeId:Int):Bool;
	static function IsNavmeshLoadedInArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float):Bool;
	static function RemoveNavmeshBlockingObject(p0:Int):Void;
	static function GetStreetNameAtCoord(x:Float, y:Float, z:Float, streetName:Int, crossingRoad:Int):Void;
	static function IsNavmeshRequiredRegionOwnedByAnyThread():Bool;
	static function RequestPathsPreferAccurateBoundingstruct(x1:Float, y1:Float, x2:Float, y2:Float):Bool;
	static function RemoveNavmeshRequiredRegions():Void;
	static function SetGpsDisabledZoneAtIndex(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, index:Int):Void;
	static function LoadAllPathNodes(keepInMemory:Bool):Bool;
	static function SetGpsDisabledZone(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float):Void;
	static function SetRoadsBackToOriginal(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float):Void;
	static function SetAiGlobalPathNodesType(type:Int):Void;
	static function SetAllPathsCacheBoundingstruct(toggle:Bool):Void;
	static function SetRoadsInAngledArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, width:Float, unknown1:Bool, unknown2:Bool,
		unknown3:Bool):Void;
	static function SetAmbientPedRangeMultiplierThisFrame(multiplier:Float):Void;
	static function SetIgnoreNoGpsFlag(toggle:Bool):Void;
	static function SetIgnoreSecondaryRouteNodes(toggle:Bool):Void;
	static function SetPedPathsBackToOriginal(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int):Void;
	static function SetRoadsBackToOriginalInAngledArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, width:Float):Void;
	static function SetRoadsInArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, nodeEnabled:Bool, unknown2:Bool):Void;
	static function SetPedPathsInArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, unknown:Bool):Void;
	static function UpdateNavmeshBlockingObject(p0:Int, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Float, p7:Float, p8:Int):Void;
	static function ActivatePhysics(entity:Int):Void;
	static function ApplyImpulseToCloth(posX:Float, posY:Float, posZ:Float, vecX:Float, vecY:Float, vecZ:Float, impulse:Float):Void;
	static function AttachRopeToEntity(ropeId:Int, entity:Int, x:Float, y:Float, z:Float, p5:Bool):Void;
	static function AttachEntitiesToRope(ropeId:Int, ent1:Int, ent2:Int, ent1_x:Float, ent1_y:Float, ent1_z:Float, ent2_x:Float, ent2_y:Float, ent2_z:Float,
		length:Float, p10:Bool, p11:Bool, boneName1:String, boneName2:String):Void;
	static function DetachRopeFromEntity(ropeId:Int, entity:Int):Void;
	static function DeleteChildRope(ropeId:Int):Void;
	static function AddRope(x:Float, y:Float, z:Float, rotX:Float, rotY:Float, rotZ:Float, maxLength:Float, ropeType:Int, initLength:Float, minLength:Float,
		lengthChangeRate:Float, onlyPPU:Bool, collisionOn:Bool, lockFromFront:Bool, timeMultiplier:Float, breakable:Bool, unkPtr:Int):Int;
	static function DeleteRope(ropeId:Int):Void;
	static function BreakEntityGlass(entity:Int, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Float, p7:Float, p8:Float, p9:Int, p10:Bool):Void;
	static function DoesRopeExist(ropeId:Int):Bool;
	static function GetCgoffset(entity:Int):Vector3;
	static function LoadRopeData(ropeId:Int, rope_preset:String):Void;
	static function DoesRopeBelongToThisScript(ropeId:Int):Bool;
	static function GetRopeLastVertexCoord(ropeId:Int):Vector3;
	static function GetRopeVertexCoord(ropeId:Int, vertex:Int):Vector3;
	static function GetHasObjectFragInst(object:Dynamic):Bool;
	static function GetRopeVertexCount(ropeId:Int):Int;
	static function RopeForceLength(ropeId:Int, length:Float):Void;
	static function PinRopeVertex(ropeId:Int, vertex:Int, x:Float, y:Float, z:Float):Void;
	static function RopeDrawShadowEnabled(ropeId:Int, toggle:Bool):Void;
	static function RopeConvertToSimple(ropeId:Int):Void;
	static function RopeResetLength(ropeId:Int, length:Float):Void;
	static function RopeLoadTextures():Void;
	static function RopeSetUpdateOrder(ropeId:Int, p1:Int):Void;
	static function RopeUnloadTextures():Void;
	static function SetDisableBreaking(object:Dynamic, toggle:Bool):Void;
	static function RopeAreTexturesLoaded():Bool;
	static function SetDamping(entity:Int, vertex:Int, value:Float):Void;
	static function SetCgAtBoundcenter(entity:Int):Void;
	static function SetDisableFragDamage(object:Dynamic, toggle:Bool):Void;
	static function RopeGetDistanceBetweenEnds(ropeId:Int):Float;
	static function SetCgoffset(entity:Int, x:Float, y:Float, z:Float):Void;
	static function StartRopeWinding(ropeId:Int):Void;
	static function RopeSetUpdatePinverts(ropeId:Int):Void;
	static function SetLaunchControlEnabled(toggle:Bool):Void;
	static function UnpinRopeVertex(ropeId:Int, vertex:Int):Void;
	static function SetEntityProofUnk(entity:Int, toggle:Bool):Void;
	static function StartRopeUnwindingFront(ropeId:Int):Void;
	static function StopRopeUnwindingFront(ropeId:Int):Void;
	static function StopRopeWinding(ropeId:Int):Void;
	static function ArePlayerStarsGreyedOut(player:Int):Bool;
	static function AssistedMovementCloseRoute():Void;
	static function CanPedHearPlayer(player:Int, ped:Int):Bool;
	static function ChangePlayerPed(player:Int, ped:Int, b2:Bool, resetDamage:Bool):Void;
	static function ClearPlayerParachuteModelOverride(player:Int):Void;
	static function ArePlayerFlashingStarsAboutToDrop(player:Int):Bool;
	static function ClearPlayerParachuteVariationOverride(player:Int):Void;
	static function ClearPlayerHasDamagedAtLeastOneNonAnimalPed(player:Int):Void;
	static function AssistedMovementFlushRoute():Void;
	static function CanPlayerStartMission(player:Int):Bool;
	static function ClearPlayerParachutePackModelOverride(player:Int):Void;
	static function ClearPlayerHasDamagedAtLeastOnePed(player:Int):Void;
	static function ClearPlayerWantedLevel(player:Int):Void;
	static function DisablePlayerFiring(player:Int, toggle:Bool):Void;
	static function ClearPlayerReserveParachuteModelOverride(player:Int):Void;
	static function EnableSpecialAbility(player:Int, toggle:Bool):Void;
	static function ExtendWorldBoundaryForPlayer(x:Float, y:Float, z:Float):Void;
	static function DisplaySystemSigninUi(unk:Bool):Void;
	static function ForceCleanup(cleanupFlags:Int):Void;
	static function DisablePlayerVehicleRewards(player:Int):Void;
	static function GetAchievementProgress(achievement:Int):Int;
	static function ForceCleanupForThreadWithThisId(id:Int, cleanupFlags:Int):Void;
	static function GetMaxWantedLevel():Int;
	static function GetEntityPlayerIsFreeAimingAt(player:Int, entity:Int):Bool;
	static function ForceCleanupForAllThreadsWithThisName(name:String, cleanupFlags:Int):Void;
	static function GetNumberOfPlayersInTeam(team:Int):Int;
	static function GetCauseOfMostRecentForceCleanup():Int;
	static function GetNumberOfPlayers():Int;
	static function GetPlayerCurrentStealthNoise(player:Int):Float;
	static function GetPlayerInvincible(player:Int):Bool;
	static function GetPlayerFakeWantedLevel(player:Int):Int;
	static function GetPlayerGroup(player:Int):Int;
	static function GetPlayerIndex():Int;
	static function GetPlayerHealthRechargeLimit(player:Int):Float;
	static function GetPlayerHasReserveParachute(player:Int):Bool;
	static function GetPlayerParachutePackTintIndex(player:Int, tintIndex:Int):Void;
	static function GetPlayerName(player:Int):String;
	static function GetPlayerMaxArmour(player:Int):Int;
	static function GetPlayerParachuteTintIndex(player:Int, tintIndex:Int):Void;
	static function GetPlayerReserveParachuteModelOverride(player:Int):Int;
	static function GetPlayerParachuteModelOverride(player:Int):Int;
	static function GetPlayerPedScriptIndex(player:Int):Int;
	static function GetPlayerParachuteSmokeTrailColor(player:Int, r:Int, g:Int, b:Int):Void;
	static function GetPlayerPed(playerId:Int):Int;
	static function GetPlayerRgbColour(player:Int, r:Int, g:Int, b:Int):Void;
	static function GetPlayerReserveParachuteTintIndex(player:Int, index:Int):Void;
	static function GetPlayerSprintStaminaRemaining(player:Int):Float;
	static function GetPlayerTeam(player:Int):Int;
	static function GetPlayerSprintTimeRemaining(player:Int):Float;
	static function GetPlayerWantedLevel(player:Int):Int;
	static function GetPlayerWantedCentrePosition(player:Int):Vector3;
	static function GetPlayerTargetEntity(player:Int, entity:Int):Bool;
	static function GetTimeSinceLastArrest():Int;
	static function GetTimeSincePlayerDroveOnPavement(player:Int):Int;
	static function GetPlayerUnderwaterTimeRemaining(player:Int):Float;
	static function GetTimeSincePlayerHitVehicle(player:Int):Int;
	static function GetTimeSinceLastDeath():Int;
	static function GetWantedLevelRadius(player:Int):Float;
	static function GiveAchievementToPlayer(achievement:Int):Bool;
	static function GetPlayersLastVehicle():Int;
	static function GetTimeSincePlayerHitPed(player:Int):Int;
	static function HasAchievementBeenPassed(achievement:Int):Bool;
	static function GetTimeSincePlayerDroveAgainstTraffic(player:Int):Int;
	static function GetWantedLevelParoleDuration():Int;
	static function HasPlayerBeenShotByCop(player:Int, ms:Int, p2:Bool):Bool;
	static function HasPlayerDamagedAtLeastOneNonAnimalPed(player:Int):Bool;
	static function GivePlayerRagdollControl(player:Int, toggle:Bool):Void;
	static function GetWantedLevelThreshold(wantedLevel:Int):Int;
	static function HasForceCleanupOccurred(cleanupFlags:Int):Bool;
	static function HasPlayerDamagedAtLeastOnePed(player:Int):Bool;
	static function HasPlayerLeftTheWorld(player:Int):Bool;
	static function IntToParticipantindex(value:Int):Int;
	static function IntToPlayerindex(value:Int):Int;
	static function HasPlayerBeenSpottedInStolenVehicle(player:Int):Bool;
	static function IsPlayerBeingArrested(player:Int, atArresting:Bool):Bool;
	static function IsPlayerCamControlDisabled():Bool;
	static function IsPlayerControlOn(player:Int):Bool;
	static function IsPlayerBattleAware(player:Int):Bool;
	static function IsPlayerClimbing(player:Int):Bool;
	static function IsPlayerDead(player:Int):Bool;
	static function IsPlayerDrivingDangerously(player:Int, type:Int):Bool;
	static function IsPlayerBluetoothEnable(player:Int):Bool;
	static function IsPlayerFreeForAmbientTask(player:Int):Bool;
	static function IsPlayerFreeAimingAtEntity(player:Int, entity:Int):Bool;
	static function IsPlayerLoggingInNp():Bool;
	static function IsPlayerOnline():Bool;
	static function IsPlayerPressingHorn(player:Int):Bool;
	static function IsPlayerFreeAiming(player:Int):Bool;
	static function IsPlayerPlaying(player:Int):Bool;
	static function IsPlayerRidingTrain(player:Int):Bool;
	static function IsPlayerTargettingAnything(player:Int):Bool;
	static function IsPlayerReadyForCutscene(player:Int):Bool;
	static function IsPlayerScriptControlOn(player:Int):Bool;
	static function IsSpecialAbilityEnabled(player:Int):Bool;
	static function IsPlayerTargettingEntity(player:Int, entity:Int):Bool;
	static function IsPlayerTeleportActive():Bool;
	static function IsPlayerWantedLevelGreater(player:Int, wantedLevel:Int):Bool;
	static function IsSystemUiBeingDisplayed():Bool;
	static function IsSpecialAbilityActive(player:Int):Bool;
	static function IsSpecialAbilityUnlocked(playerModel:Int):Bool;
	static function IsSpecialAbilityMeterFull(player:Int):Bool;
	static function PlayerDetachVirtualBound():Void;
	static function NetworkPlayerIdToInt():Int;
	static function ReportPoliceSpottedPlayer(player:Int):Void;
	static function ReportCrime(player:Int, crimeType:Int, wantedLvlThresh:Int):Void;
	static function PlayerAttachVirtualBound(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Float, p7:Float):Void;
	static function ResetPlayerArrestState(player:Int):Void;
	static function PlayerPedId():Int;
	static function PlayerId():Int;
	static function ResetPlayerInputGait(player:Int):Void;
	static function RemovePlayerHelmet(player:Int, p2:Bool):Void;
	static function ResetWorldBoundaryForPlayer():Void;
	static function ResetPlayerStamina(player:Int):Void;
	static function ResetWantedLevelDifficulty(player:Int):Void;
	static function RestorePlayerStamina(player:Int, percentage:Float):Void;
	static function SetAirDragMultiplierForPlayersVehicle(player:Int, multiplier:Float):Void;
	static function SetAchievementProgress(achievement:Int, progress:Int):Bool;
	static function SetAllRandomPedsFlee(player:Int, toggle:Bool):Void;
	static function SetAutoGiveParachuteWhenEnterPlane(player:Int, toggle:Bool):Void;
	static function SetAllRandomPedsFleeThisFrame(player:Int):Void;
	static function SetEveryoneIgnorePlayer(player:Int, toggle:Bool):Void;
	static function SetDisableAmbientMeleeMove(player:Int, toggle:Bool):Void;
	static function SetDispatchCopsForPlayer(player:Int, toggle:Bool):Void;
	static function SetIgnoreLowPriorityShockingEvents(player:Int, toggle:Bool):Void;
	static function SetPlayerBluetoothState(player:Int, state:Bool):Void;
	static function SetAutoGiveScubaGearWhenExitVehicle(player:Int, toggle:Bool):Void;
	static function SetPlayerCanUseCover(player:Int, toggle:Bool):Void;
	static function SetPlayerCanDoDriveBy(player:Int, toggle:Bool):Void;
	static function SetPlayerCanBeHassledByGangs(player:Int, toggle:Bool):Void;
	static function SetMaxWantedLevel(maxWantedLevel:Int):Void;
	static function SetPlayerClothPackageIndex(index:Int):Void;
	static function SetPlayerClothLockCounter(value:Int):Void;
	static function SetPlayerFallDistance(player:Int, distance:Float):Void;
	static function SetPlayerClothPinFrames(player:Int, p1:Int):Void;
	static function SetPlayerCanLeaveParachuteSmokeTrail(player:Int, enabled:Bool):Void;
	static function SetPlayerControl(player:Int, bHasControl:Bool, flags:Int):Void;
	static function SetPlayerForceSkipAimIntro(player:Int, toggle:Bool):Void;
	static function SetPlayerHealthRechargeMultiplier(player:Int, regenRate:Float):Void;
	static function SetPlayerForcedAim(player:Int, toggle:Bool):Void;
	static function SetPlayerForcedZoom(player:Int, toggle:Bool):Void;
	static function SetPlayerLeavePedBehind(player:Int, toggle:Bool):Void;
	static function SetPlayerHasReserveParachute(player:Int):Void;
	static function SetPlayerHealthRechargeLimit(player:Int, limit:Float):Void;
	static function SetPlayerMaxArmour(player:Int, value:Int):Void;
	static function SetPlayerInvincible(player:Int, toggle:Bool):Void;
	static function SetPlayerInvincibleKeepRagdollEnabled(player:Int, toggle:Bool):Void;
	static function SetPlayerHomingRocketDisabled(player:Int, p1:Bool):Void;
	static function SetPlayerMayNotEnterAnyVehicle(player:Int):Void;
	static function SetPlayerLockonRangeOverride(player:Int, range:Float):Void;
	static function SetPlayerLockon(player:Int, toggle:Bool):Void;
	static function SetPlayerMeleeWeaponDefenseModifier(player:Int, modifier:Float):Void;
	static function SetPlayerMeleeWeaponDamageModifier(player:Int, modifier:Float):Void;
	static function SetPlayerNoiseMultiplier(player:Int, multiplier:Float):Void;
	static function SetPlayerMayOnlyEnterThisVehicle(player:Int, vehicle:Int):Void;
	static function SetPlayerModel(player:Int, model:Int):Void;
	static function SetPlayerParachuteModelOverride(player:Int, model:Int):Void;
	static function SetPlayerParachutePackModelOverride(player:Int, model:Int):Void;
	static function SetPlayerParachuteSmokeTrailColor(player:Int, r:Int, g:Int, b:Int):Void;
	static function SetPlayerParachutePackTintIndex(player:Int, tintIndex:Int):Void;
	static function SetPlayerParachuteTintIndex(player:Int, tintIndex:Int):Void;
	static function SetPlayerReserveParachuteTintIndex(player:Int, index:Int):Void;
	static function SetPlayerReserveParachuteModelOverride(player:Int, model:Int):Void;
	static function SetPlayerSneakingNoiseMultiplier(player:Int, multiplier:Float):Void;
	static function SetPlayerTargetLevel(targetLevel:Int):Void;
	static function SetPlayerParachuteVariationOverride(player:Int, p1:Int, p2:Int, p3:Int, p4:Bool):Void;
	static function SetPlayerResetFlagPreferRearSeats(player:Int, flags:Int):Void;
	static function SetPlayerSimulateAiming(player:Int, toggle:Bool):Void;
	static function SetPlayerUnderwaterTimeRemaining(player:Int, percentage:Float):Int;
	static function SetPlayerTargetingMode(targetMode:Int):Void;
	static function SetPlayerStealthPerceptionModifier(player:Int, value:Float):Void;
	static function SetPlayerWantedCentrePosition(player:Int, position:Vector3, p2:Bool, p3:Bool):Void;
	static function SetPlayerVehicleDefenseModifier(player:Int, modifier:Float):Void;
	static function SetPlayerSprint(player:Int, toggle:Bool):Void;
	static function SetPlayerTeam(player:Int, team:Int):Void;
	static function SetPlayerVehicleDamageModifier(player:Int, modifier:Float):Void;
	static function SetPlayerWantedLevel(player:Int, wantedLevel:Int, delayedResponse:Bool):Void;
	static function SetPlayerWantedLevelNoDrop(player:Int, wantedLevel:Int, delayedResponse:Bool):Void;
	static function SetPlayerWeaponDamageModifier(player:Int, modifier:Float):Void;
	static function SetPlayerWeaponDefenseModifier(player:Int, modifier:Float):Void;
	static function SetPlayerWantedLevelNow(player:Int, p1:Bool):Void;
	static function SetSpecialAbility(player:Int, p1:Int):Void;
	static function SetPoliceIgnorePlayer(player:Int, toggle:Bool):Void;
	static function SetPoliceRadarBlips(toggle:Bool):Void;
	static function SetPlayerWeaponDefenseModifier2(player:Int, modifier:Float):Void;
	static function SetSwimMultiplierForPlayer(player:Int, multiplier:Float):Void;
	static function SetSpecialAbilityMultiplier(multiplier:Float):Void;
	static function SetRunSprintMultiplierForPlayer(player:Int, multiplier:Float):Void;
	static function SetWantedLevelHiddenEvasionTime(player:Int, wantedLevel:Int, lossTime:Int):Void;
	static function SetWantedLevelDifficulty(player:Int, difficulty:Float):Void;
	static function SpecialAbilityActivate(player:Int):Void;
	static function SetWantedLevelMultiplier(multiplier:Float):Void;
	static function SpecialAbilityChargeContinuous(player:Int, p2:Int):Void;
	static function SimulatePlayerInputGait(player:Int, amount:Float, gaitType:Int, rotationSpeed:Float, p4:Bool, p5:Bool):Void;
	static function SpecialAbilityChargeLarge(player:Int, p1:Bool, p2:Bool):Void;
	static function SpecialAbilityDeplete(p0:Int):Void;
	static function SpecialAbilityChargeAbsolute(player:Int, p1:Int, p2:Bool):Void;
	static function SpecialAbilityChargeMedium(player:Int, p1:Bool, p2:Bool):Void;
	static function SpecialAbilityReset(player:Int):Void;
	static function SpecialAbilityChargeNormalized(player:Int, normalizedValue:Float, p2:Bool):Void;
	static function SpecialAbilityChargeSmall(player:Int, p1:Bool, p2:Bool):Void;
	static function StopPlayerTeleport():Void;
	static function SpecialAbilityChargeOnMissionFailed(player:Int):Void;
	static function SpecialAbilityDeactivate(player:Int):Void;
	static function SpecialAbilityDeactivateFast(player:Int):Void;
	static function SpecialAbilityLock(playerModel:Int):Void;
	static function SpecialAbilityDepleteMeter(player:Int, p1:Bool):Void;
	static function SpecialAbilityFillMeter(player:Int, p1:Bool):Void;
	static function SpecialAbilityUnlock(playerModel:Int):Void;
	static function StartPlayerTeleport(player:Int, x:Float, y:Float, z:Float, heading:Float, teleportWithVehicle:Bool, findCollisionLand:Bool, p7:Bool):Void;
	static function StartFiringAmnesty(duration:Int):Void;
	static function SwitchCrimeType(player:Int, p1:Int):Void;
	static function UpdatePlayerTeleport(player:Int):Bool;
	static function IsRecording():Bool;
	static function DisableRockstarEditorCameraChanges():Void;
	static function SaveRecordingClip():Bool;
	static function StopRecordingAndSaveClip():Void;
	static function StopRecordingThisFrame():Void;
	static function StartRecording(mode:Int):Void;
	static function StopRecordingAndDiscardClip():Void;
	static function ActivateRockstarEditor():Void;
	static function IsInteriorRenderingDisabled():Bool;
	static function ResetEditorValues():Void;
	static function AddPedDecorationFromHashes(ped:Int, collection:Int, overlay:Int):Void;
	static function AddArmourToPed(ped:Int, amount:Int):Void;
	static function AddPedDecorationFromHashesInCorona(ped:Int, collection:Int, overlay:Int):Void;
	static function AddRelationshipGroup(name:String, groupHash:Int):Int;
	static function ApplyDamageToPed(ped:Int, damageAmount:Int, armorFirst:Bool):Void;
	static function ApplyPedBlood(ped:Int, boneIndex:Int, xRot:Float, yRot:Float, zRot:Float, woundType:String):Void;
	static function AddScenarioBlockingArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, p6:Bool, p7:Bool, p8:Bool, p9:Bool):Int;
	static function ApplyPedBloodByZone(ped:Int, p1:Int, p2:Float, p3:Float, p4:Int):Void;
	static function ApplyPedBloodSpecific(ped:Int, p1:Int, p2:Float, p3:Float, p4:Float, p5:Float, p6:Int, p7:Float, p8:Int):Void;
	static function ApplyPedBloodDamageByZone(ped:Int, p1:Int, p2:Float, p3:Float, p4:Int):Void;
	static function CanCreateRandomCops():Bool;
	static function ApplyPedDamageDecal(ped:Int, damageZone:Int, xOffset:Float, yOffset:Float, heading:Float, scale:Float, alpha:Float, variation:Int,
		fadeIn:Bool, decalName:String):Void;
	static function AttachSynchronizedSceneToEntity(sceneID:Int, entity:Int, boneIndex:Int):Void;
	static function CanKnockPedOffVehicle(ped:Int):Bool;
	static function ApplyPedDamagePack(ped:Int, damagePack:String, damage:Float, mult:Float):Void;
	static function BlockPedDeadBodyShockingEvents(ped:Int, toggle:Bool):Void;
	static function CanCreateRandomBikeRider():Bool;
	static function CanPedRagdoll(ped:Int):Bool;
	static function CanCreateRandomPed(unk:Bool):Bool;
	static function CanCreateRandomDriver():Bool;
	static function CanPedInCombatSeeTarget(ped:Int, target:Int):Bool;
	static function CanPedSeeHatedPed(ped1:Int, ped2:Int):Bool;
	static function ClearFacialIdleAnimOverride(ped:Int):Void;
	static function ClearAllPedVehicleForcedSeatUsage(ped:Int):Void;
	static function ClearAllPedProps(ped:Int):Void;
	static function ClearPedDamageDecalByZone(ped:Int, p1:Int, p2:String):Void;
	static function ClearPedAlternateMovementAnim(ped:Int, stance:Int, p2:Float):Void;
	static function ClearFacialClipsetOverride(ped:Int):Void;
	static function ClearPedAlternateWalkAnim(ped:Int, p1:Float):Void;
	static function ClearPedBloodDamage(ped:Int):Void;
	static function ClearPedBloodDamageByZone(ped:Int, p1:Int):Void;
	static function ClearPedCoverClipsetOverride(ped:Int):Void;
	static function ClearPedEnvDirt(ped:Int):Void;
	static function ClearPedDecorations(ped:Int):Void;
	static function ClearPedDecorationsLeaveScars(ped:Int):Void;
	static function ClearPedDriveByClipsetOverride(ped:Int):Void;
	static function ClearPedStoredHatProp(ped:Int):Void;
	static function ClearPedLastDamageBone(ped:Int):Void;
	static function ClearPedNonCreationArea():Void;
	static function ClearRagdollBlockingFlags(ped:Int, flags:Int):Void;
	static function ClearPedParachutePackVariation(ped:Int):Void;
	static function ClearPedProp(ped:Int, propId:Int):Void;
	static function ClearPedWetness(ped:Int):Void;
	static function ClearPedScubaGearVariation(ped:Int):Void;
	static function ClearRelationshipBetweenGroups(relationship:Int, group1:Int, group2:Int):Void;
	static function ClonePedToTarget(ped:Int, targetPed:Int):Void;
	static function ClonePed(ped:Int, isNetwork:Bool, bScriptHostPed:Bool, copyHeadBlendFlag:Bool):Int;
	static function ClonePedToTargetEx(ped:Int, targetPed:Int, p2:Int):Void;
	static function ClonePedEx(ped:Int, heading:Float, isNetwork:Bool, bScriptHostPed:Bool, p4:Int):Int;
	static function CreateNmMessage(startImmediately:Bool, messageId:Int):Void;
	static function CreatePed(pedType:Int, modelHash:Int, x:Float, y:Float, z:Float, heading:Float, isNetwork:Bool, bScriptHostPed:Bool):Int;
	static function CreateGroup(unused:Int):Int;
	static function CreateParachuteBagObject(ped:Int, p1:Bool, p2:Bool):Dynamic;
	static function CreateRandomPed(posX:Float, posY:Float, posZ:Float):Int;
	static function CreateRandomPedAsDriver(vehicle:Int, returnHandle:Bool):Int;
	static function CreatePedInsideVehicle(vehicle:Int, pedType:Int, modelHash:Int, seat:Int, isNetwork:Bool, bScriptHostPed:Bool):Int;
	static function CreateSynchronizedScene(x:Float, y:Float, z:Float, roll:Float, pitch:Float, yaw:Float, p6:Int):Int;
	static function DisableHeadBlendPaletteColor(ped:Int):Void;
	static function CreateSynchronizedScene2(x:Float, y:Float, z:Float, radius:Float, object:Int):Int;
	static function DetachSynchronizedScene(sceneID:Int):Void;
	static function DeletePed(ped:Int):Void;
	static function DisablePedHeatscaleOverride(ped:Int):Void;
	static function DropAmbientProp(ped:Int):Void;
	static function DoesGroupExist(groupId:Int):Bool;
	static function ForcePedAiAndAnimationUpdate(ped:Int, p1:Bool, p2:Bool):Void;
	static function DoesRelationshipGroupExist(groupHash:Int):Bool;
	static function DisposeSynchronizedScene(scene:Int):Void;
	static function ExplodePedHead(ped:Int, weaponHash:Int):Void;
	static function GetAnimInitialOffsetPosition(animDict:String, animName:String, x:Float, y:Float, z:Float, xRot:Float, yRot:Float, zRot:Float, p8:Float,
		p9:Int):Vector3;
	static function DoesScenarioBlockingAreaExist(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float):Bool;
	static function FinalizeHeadBlend(ped:Int):Void;
	static function ForcePedMotionState(ped:Int, motionStateHash:Int, p2:Bool, p3:Int, p4:Bool):Bool;
	static function ForcePedToOpenParachute(ped:Int):Void;
	static function FreezePedCameraRotation(ped:Int):Void;
	static function GetDeadPedPickupCoords(ped:Int, p1:Float, p2:Float):Vector3;
	static function GetAnimInitialOffsetRotation(animDict:String, animName:String, x:Float, y:Float, z:Float, xRot:Float, yRot:Float, zRot:Float, p8:Float,
		p9:Int):Vector3;
	static function GetClosestPed(x:Float, y:Float, z:Float, radius:Float, p4:Bool, p5:Bool, outPed:Int, p7:Bool, p8:Bool, pedType:Int):Bool;
	static function GetMount(ped:Int):Int;
	static function GetGroupSize(groupID:Int, unknown:Int, sizeInMembers:Int):Void;
	static function GetMeleeTargetForPed(ped:Int):Int;
	static function GetCombatFloat(ped:Int, p1:Int):Float;
	static function GetNumMakeupColors():Int;
	static function GetJackTarget(ped:Int):Int;
	static function GetNumberOfPedDrawableVariations(ped:Int, componentId:Int):Int;
	static function GetNumHairColors():Int;
	static function GetPedAccuracy(ped:Int):Int;
	static function GetNumberOfPedPropDrawableVariations(ped:Int, propId:Int):Int;
	static function GetNumberOfPedTextureVariations(ped:Int, componentId:Int, drawableId:Int):Int;
	static function GetNumberOfPedPropTextureVariations(ped:Int, propId:Int, drawableId:Int):Int;
	static function GetPedAsGroupLeader(groupID:Int):Int;
	static function GetPedArmour(ped:Int):Int;
	static function GetPedAlertness(ped:Int):Int;
	static function GetPedAsGroupMember(groupID:Int, memberNumber:Int):Int;
	static function GetPedCauseOfDeath(ped:Int):Int;
	static function GetPedCombatMovement(ped:Int):Int;
	static function GetPedBoneCoords(ped:Int, boneId:Int, offsetX:Float, offsetY:Float, offsetZ:Float):Vector3;
	static function GetPedCombatRange(ped:Int):Int;
	static function GetPedDecorationsState(ped:Int):Int;
	static function GetPedConfigFlag(ped:Int, flagId:Int, p2:Bool):Bool;
	static function GetPedBoneIndex(ped:Int, boneId:Int):Int;
	static function GetPedCurrentMovementSpeed(ped:Int, speedX:Float, speedY:Float):Bool;
	static function GetPedDefensiveAreaPosition(ped:Int, p1:Bool):Vector3;
	static function GetPedEnveffScale(ped:Int):Float;
	static function GetPedDecorationZoneFromHashes(collection:Int, overlay:Int):Int;
	static function GetPedEmissiveIntensity(ped:Int):Float;
	static function GetPedEyeColor(ped:Int):Int;
	static function GetPedDrawableVariation(ped:Int, componentId:Int):Int;
	static function GetPedEventData(ped:Int, eventType:Int, outData:Int):Bool;
	static function GetPedDiesInWater(ped:Int):Bool;
	static function GetPedExtractedDisplacement(ped:Int, worldSpace:Bool):Vector3;
	static function GetPedHairRgbColor(hairColorIndex:Int, outR:Int, outG:Int, outB:Int):Void;
	static function GetPedHeadBlendFirstIndex(type:Int):Int;
	static function GetPedHeadBlendNumHeads(type:Int):Int;
	static function GetPedHeadOverlayNum(overlayID:Int):Int;
	static function GetPedMakeupRgbColor(makeupColorIndex:Int, outR:Int, outG:Int, outB:Int):Void;
	static function GetPedGroupIndex(ped:Int):Int;
	static function GetPedHelmetStoredHatPropIndex(ped:Int):Int;
	static function GetPedHelmetStoredHatTexIndex(ped:Int):Int;
	static function GetPedMoney(ped:Int):Int;
	static function GetPedHeadBlendData(ped:Int, headBlendData:Int):Bool;
	static function GetPedNearbyPeds(ped:Int, sizeAndPeds:Int, ignore:Int):Int;
	static function GetPedMaxHealth(ped:Int):Int;
	static function GetPedParachuteState(ped:Int):Int;
	static function GetPedHeadOverlayValue(ped:Int, overlayID:Int):Int;
	static function GetPedPaletteVariation(ped:Int, componentId:Int):Int;
	static function GetPedParachuteTintIndex(ped:Int, outTintIndex:Int):Void;
	static function GetPedLastDamageBone(ped:Int, outBone:Int):Bool;
	static function GetPedPropTextureIndex(ped:Int, componentId:Int):Int;
	static function GetPedPropIndex(ped:Int, componentId:Int):Int;
	static function GetPedRagdollBoneIndex(ped:Int, bone:Int):Int;
	static function GetPedNearbyVehicles(ped:Int, sizeAndVehs:Int):Int;
	static function GetPedSourceOfDeath(ped:Int):Int;
	static function GetPedResetFlag(ped:Int, flagId:Int):Bool;
	static function GetPedRelationshipGroupHash(ped:Int):Int;
	static function GetPedParachuteLandingType(ped:Int):Int;
	static function GetPedStealthMovement(ped:Int):Bool;
	static function GetPedTaskCombatTarget(ped:Int, p1:Int):Int;
	static function GetPedTextureVariation(ped:Int, componentId:Int):Int;
	static function GetPedRelationshipGroupDefaultHash(ped:Int):Int;
	static function GetPedVisualFieldCenterAngle(ped:Int):Float;
	static function GetPedheadshotTxdString(id:Int):String;
	static function GetPedTimeOfDeath(ped:Int):Int;
	static function GetPedsJacker(ped:Int):Int;
	static function GetRandomPedAtCoord(x:Float, y:Float, z:Float, xRadius:Float, yRadius:Float, zRadius:Float, pedType:Int):Int;
	static function GetPedType(ped:Int):Int;
	static function GetPlayerPedIsFollowing(ped:Int):Int;
	static function GetRelationshipBetweenGroups(group1:Int, group2:Int):Int;
	static function GetRelationshipBetweenPeds(ped1:Int, ped2:Int):Int;
	static function GetSynchronizedScenePhase(sceneID:Int):Float;
	static function GetSynchronizedSceneRate(sceneID:Int):Float;
	static function GetVehiclePedIsEntering(ped:Int):Int;
	static function GetTimeOfLastPedWeaponDamage(ped:Int, weaponHash:Int):Int;
	static function GetSeatPedIsTryingToEnter(ped:Int):Int;
	static function GetVehiclePedIsTryingToEnter(ped:Int):Int;
	static function GetVehiclePedIsUsing(ped:Int):Int;
	static function GetVehiclePedIsIn(ped:Int, lastVehicle:Bool):Int;
	static function HasActionModeAssetLoaded(asset:String):Bool;
	static function HasPedHeadBlendFinished(ped:Int):Bool;
	static function GivePedNmMessage(ped:Int):Void;
	static function GivePedHelmet(ped:Int, cannotRemove:Bool, helmetFlag:Int, textureIndex:Int):Void;
	static function HasStealthModeAssetLoaded(asset:String):Bool;
	static function HasPedheadshotImgUploadFailed():Bool;
	static function HasPedPreloadPropDataFinished(ped:Int):Bool;
	static function HasPedPreloadVariationDataFinished(ped:Int):Bool;
	static function IsAnyHostilePedNearPoint(ped:Int, x:Float, y:Float, z:Float, radius:Float):Bool;
	static function HasPedReceivedEvent(ped:Int, eventId:Int):Bool;
	static function HasPedheadshotImgUploadSucceeded():Bool;
	static function IsCopPedInArea3d(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float):Bool;
	static function HidePedBloodDamageByZone(ped:Int, p1:Int, p2:Bool):Void;
	static function InstantlyFillPedPopulation():Void;
	static function HaveAllStreamingRequestsCompleted(ped:Int):Bool;
	static function IsPedBeingStealthKilled(ped:Int):Bool;
	static function IsConversationPedDead(ped:Int):Bool;
	static function IsPedBlushColorValid(colorID:Int):Bool;
	static function IsAnyPedNearPoint(x:Float, y:Float, z:Float, radius:Float):Bool;
	static function IsAnyPedShootingInArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, p6:Bool, p7:Bool):Bool;
	static function IsPedBlushColorValid2(colorId:Int):Bool;
	static function IsPedAPlayer(ped:Int):Bool;
	static function IsPedAimingFromCover(ped:Int):Bool;
	static function IsPedBeingJacked(ped:Int):Bool;
	static function IsPedBeingStunned(ped:Int, p1:Int):Bool;
	static function IsPedComponentVariationValid(ped:Int, componentId:Int, drawableId:Int, textureId:Int):Bool;
	static function IsPedBodyBlemishValid(colorID:Int):Bool;
	static function IsPedClimbing(ped:Int):Bool;
	static function IsPedDefensiveAreaActive(ped:Int, p1:Bool):Bool;
	static function IsPedDeadOrDying(ped:Int, p1:Bool):Bool;
	static function IsPedDiving(ped:Int):Bool;
	static function IsPedFacingPed(ped:Int, otherPed:Int, angle:Float):Bool;
	static function IsPedDoingBeastJump(ped:Int):Bool;
	static function IsPedFatallyInjured(ped:Int):Bool;
	static function IsPedDoingDriveby(ped:Int):Bool;
	static function IsPedDucking(ped:Int):Bool;
	static function IsPedGoingIntoCover(ped:Int):Bool;
	static function IsPedFalling(ped:Int):Bool;
	static function IsPedEvasiveDiving(ped:Int, evadingEntity:Int):Bool;
	static function IsPedGettingIntoAVehicle(ped:Int):Bool;
	static function IsPedHairColorValid2(colorId:Int):Bool;
	static function IsPedHairColorValid(colorID:Int):Bool;
	static function IsPedFleeing(ped:Int):Bool;
	static function IsPedHangingOnToVehicle(ped:Int):Bool;
	static function IsPedHeadtrackingPed(ped1:Int, ped2:Int):Bool;
	static function IsPedGroupMember(ped:Int, groupId:Int):Bool;
	static function IsPedHeadtrackingEntity(ped:Int, entity:Int):Bool;
	static function IsPedHeadingTowardsPosition(ped:Int, x:Float, y:Float, z:Float, p4:Float):Bool;
	static function IsPedInAnyBoat(ped:Int):Bool;
	static function IsPedHelmetUnk(ped:Int):Bool;
	static function IsPedHuman(ped:Int):Bool;
	static function IsPedInAnyPlane(ped:Int):Bool;
	static function IsPedInAnyHeli(ped:Int):Bool;
	static function IsPedInAnyPoliceVehicle(ped:Int):Bool;
	static function IsPedHurt(ped:Int):Bool;
	static function IsPedInAnyTaxi(ped:Int):Bool;
	static function IsPedInCombat(ped:Int, target:Int):Bool;
	static function IsPedInAnyVehicle(ped:Int, atGetIn:Bool):Bool;
	static function IsPedInAnySub(ped:Int):Bool;
	static function IsPedInGroup(ped:Int):Bool;
	static function IsPedInFlyingVehicle(ped:Int):Bool;
	static function IsPedInCoverFacingLeft(ped:Int):Bool;
	static function IsPedInAnyTrain(ped:Int):Bool;
	static function IsPedInHighCover(ped:Int):Bool;
	static function IsPedInCover(ped:Int, exceptUseWeapon:Bool):Bool;
	static function IsPedInModel(ped:Int, modelHash:Int):Bool;
	static function IsPedInVehicle(ped:Int, vehicle:Int, atGetIn:Bool):Bool;
	static function IsPedInMeleeCombat(ped:Int):Bool;
	static function IsPedInjured(ped:Int):Bool;
	static function IsPedInParachuteFreeFall(ped:Int):Bool;
	static function IsPedJumpingOutOfVehicle(ped:Int):Bool;
	static function IsPedJacking(ped:Int):Bool;
	static function IsPedMale(ped:Int):Bool;
	static function IsPedOnMount(ped:Int):Bool;
	static function IsPedLipstickColorValid2(colorId:Int):Bool;
	static function IsPedJumping(ped:Int):Bool;
	static function IsPedOnFoot(ped:Int):Bool;
	static function IsPedOnAnyBike(ped:Int):Bool;
	static function IsPedLipstickColorValid(colorID:Int):Bool;
	static function IsPedOpeningADoor(ped:Int):Bool;
	static function IsPedModel(ped:Int, modelHash:Int):Bool;
	static function IsPedOnVehicle(ped:Int):Bool;
	static function IsPedPerformingStealthKill(ped:Int):Bool;
	static function IsPedPerformingMeleeAction(ped:Int):Bool;
	static function IsPedOnSpecificVehicle(ped:Int, vehicle:Int):Bool;
	static function IsPedProne(ped:Int):Bool;
	static function IsPedReloading(ped:Int):Bool;
	static function IsPedPerformingDependentComboLimit(ped:Int):Bool;
	static function IsPedRagdoll(ped:Int):Bool;
	static function IsPedShaderEffectValid(ped:Int):Bool;
	static function IsPedPlantingBomb(ped:Int):Bool;
	static function IsPedRunningMeleeTask(ped:Int):Bool;
	static function IsPedRunningRagdollTask(ped:Int):Bool;
	static function IsPedSittingInVehicle(ped:Int, vehicle:Int):Bool;
	static function IsPedSittingInAnyVehicle(ped:Int):Bool;
	static function IsPedShooting(ped:Int):Bool;
	static function IsPedRespondingToEvent(ped:Int, event:Int):Bool;
	static function IsPedSwimmingUnderWater(ped:Int):Bool;
	static function IsPedRunningMobilePhoneTask(ped:Int):Bool;
	static function IsPedStopped(ped:Int):Bool;
	static function IsPedSwimming(ped:Int):Bool;
	static function IsPedTracked(ped:Int):Bool;
	static function IsPedTakingOffHelmet(ped:Int):Bool;
	static function IsPedShootingInArea(ped:Int, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, p7:Bool, p8:Bool):Bool;
	static function IsPedSwappingWeapon(Ped:Int):Bool;
	static function IsPedTryingToEnterALockedVehicle(ped:Int):Bool;
	static function IsPedUsingAnyScenario(ped:Int):Bool;
	static function IsPedUsingActionMode(ped:Int):Bool;
	static function IsPedUsingScenario(ped:Int, scenario:String):Bool;
	static function IsPedWearingHelmet(ped:Int):Bool;
	static function IsPedVaulting(ped:Int):Bool;
	static function IsPedheadshotReady(id:Int):Bool;
	static function IsScubaGearLightEnabled(ped:Int):Bool;
	static function IsPedheadshotValid(id:Int):Bool;
	static function IsPedheadshotImgUploadAvailable():Bool;
	static function IsSynchronizedSceneRunning(sceneId:Int):Bool;
	static function IsSynchronizedSceneLooped(sceneID:Int):Bool;
	static function KnockPedOffVehicle(ped:Int):Void;
	static function IsScriptedScenarioPedUsingConditionalAnim(ped:Int, animDict:String, anim:String):Bool;
	static function KnockOffPedProp(ped:Int, p1:Bool, p2:Bool, p3:Bool, p4:Bool):Void;
	static function IsTrackedPedVisible(ped:Int):Bool;
	static function IsSynchronizedSceneHoldLastFrame(sceneID:Int):Bool;
	static function RegisterPedheadshot(ped:Int):Int;
	static function RegisterHatedTargetsAroundPed(ped:Int, radius:Float):Void;
	static function PlayFacialAnim(ped:Int, animName:String, animDict:String):Void;
	static function RegisterTarget(ped:Int, target:Int):Void;
	static function RegisterPedheadshotTransparent(ped:Int):Int;
	static function RegisterPedheadshot3(ped:Int):Int;
	static function ReleasePedPreloadVariationData(ped:Int):Void;
	static function ReleasePedheadshotImgUpload(id:Int):Void;
	static function RemovePedDefensiveArea(ped:Int, toggle:Bool):Void;
	static function RemoveGroup(groupId:Int):Void;
	static function ReleasePedPreloadPropData(ped:Int):Void;
	static function RemovePedElegantly(ped:Int):Void;
	static function RemovePedHelmet(ped:Int, instantly:Bool):Void;
	static function RemovePedFromGroup(ped:Int):Void;
	static function RemoveActionModeAsset(asset:String):Void;
	static function RemoveRelationshipGroup(groupHash:Int):Void;
	static function RemoveScenarioBlockingAreas():Void;
	static function RemovePedPreferredCoverSet(ped:Int):Void;
	static function RemoveScenarioBlockingArea(p0:Int, p1:Bool):Void;
	static function RequestPedVisibilityTracking(ped:Int):Void;
	static function RequestActionModeAsset(asset:String):Void;
	static function RequestPedVehicleVisibilityTracking(ped:Int, p1:Bool):Void;
	static function RemoveStealthModeAsset(asset:String):Void;
	static function RequestPedheadshotImgUpload(id:Int):Bool;
	static function RequestStealthModeAsset(asset:String):Void;
	static function ResetAiMeleeWeaponDamageModifier():Void;
	static function ResetPedInVehicleContext(ped:Int):Void;
	static function ResetPedLastVehicle(ped:Int):Void;
	static function ResetGroupFormationDefaultSpacing(groupHandle:Int):Void;
	static function ResetAiWeaponDamageModifier():Void;
	static function ResetPedVisibleDamage(ped:Int):Void;
	static function ResetPedRagdollTimer(ped:Int):Void;
	static function ResetPedMovementClipset(ped:Int, transitionSpeed:Float):Void;
	static function ResetPedWeaponMovementClipset(ped:Int):Void;
	static function SetAiMeleeWeaponDamageModifier(modifier:Float):Void;
	static function ReviveInjuredPed(ped:Int):Void;
	static function ResetPedStrafeClipset(ped:Int):Void;
	static function SetBlockingOfNonTemporaryEvents(ped:Int, toggle:Bool):Void;
	static function ResurrectPed(ped:Int):Void;
	static function SetAmbientPedsDropMoney(p0:Bool):Void;
	static function SetCombatFloat(ped:Int, combatType:Int, p2:Float):Void;
	static function SetAiWeaponDamageModifier(value:Float):Void;
	static function SetCreateRandomCops(toggle:Bool):Void;
	static function SetDriverAbility(driver:Int, ability:Float):Void;
	static function SetCreateRandomCopsNotOnScenarios(toggle:Bool):Void;
	static function SetCanAttackFriendly(ped:Int, toggle:Bool, p2:Bool):Void;
	static function SetCreateRandomCopsOnScenarios(toggle:Bool):Void;
	static function SetEnableHandcuffs(ped:Int, toggle:Bool):Void;
	static function SetFacialClipsetOverride(ped:Int, animDict:String):Void;
	static function SetDriverAggressiveness(driver:Int, aggressiveness:Float):Void;
	static function SetEnableBoundAnkles(ped:Int, toggle:Bool):Void;
	static function SetDriverRacingModifier(driver:Int, modifier:Float):Void;
	static function SetEnableScubaGearLight(ped:Int, toggle:Bool):Void;
	static function SetEnablePedEnveffScale(ped:Int, toggle:Bool):Void;
	static function SetEnableScuba(ped:Int, toggle:Bool):Void;
	static function SetForceFootstepUpdate(ped:Int, toggle:Bool):Void;
	static function SetFacialIdleAnimOverride(ped:Int, animName:String, animDict:String):Void;
	static function SetForceStepType(ped:Int, p1:Bool, type:Int, p3:Int):Void;
	static function SetGroupFormationSpacing(groupId:Int, p1:Float, p2:Float, p3:Float):Void;
	static function SetGroupSeparationRange(groupHandle:Int, separationRange:Float):Void;
	static function SetGroupFormation(groupId:Int, formationType:Int):Void;
	static function SetIkTarget(ped:Int, ikIndex:Int, entityLookAt:Int, boneLookAt:Int, offsetX:Float, offsetY:Float, offsetZ:Float, p7:Int,
		blendInDuration:Int, blendOutDuration:Int):Void;
	static function SetHeadBlendPaletteColor(ped:Int, r:Int, g:Int, b:Int, id:Int):Void;
	static function SetPedAccuracy(ped:Int, accuracy:Int):Void;
	static function SetPedAlternateWalkAnim(ped:Int, animDict:String, animName:String, p3:Float, p4:Bool):Void;
	static function SetPedAlertness(ped:Int, value:Int):Void;
	static function SetMovementModeOverride(ped:Int, name:String):Void;
	static function SetPedAllowedToDuck(ped:Int, toggle:Bool):Void;
	static function SetPedArmour(ped:Int, amount:Int):Void;
	static function SetPedAllowVehiclesOverride(ped:Int, toggle:Bool):Void;
	static function SetPedAlternateMovementAnim(ped:Int, stance:Int, animDictionary:String, animationName:String, p4:Float, p5:Bool):Void;
	static function SetPedAoBlobRendering(ped:Int, toggle:Bool):Void;
	static function SetPedAngledDefensiveArea(ped:Int, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Float, p7:Float, p8:Bool, p9:Bool):Void;
	static function SetPedAsGroupMember(ped:Int, groupId:Int):Void;
	static function SetPedAsCop(ped:Int, toggle:Bool):Void;
	static function SetPedBlocksPathingWhenDead(ped:Int, toggle:Bool):Void;
	static function SetPedAsEnemy(ped:Int, toggle:Bool):Void;
	static function SetPedCanBeDraggedOut(ped:Int, toggle:Bool):Void;
	static function SetPedAsGroupLeader(ped:Int, groupId:Int):Void;
	static function SetPedBlendFromParents(ped:Int, father:Int, mother:Int, fathersSide:Float, mothersSide:Float):Void;
	static function SetPedCanBeTargetedWithoutLos(ped:Int, toggle:Bool):Void;
	static function SetPedBoundsOrientation(ped:Int, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float):Void;
	static function SetPedCanArmIk(ped:Int, toggle:Bool):Void;
	static function SetPedCanBeTargetted(ped:Int, toggle:Bool):Void;
	static function SetPedCanBeKnockedOffVehicle(ped:Int, state:Int):Void;
	static function SetPedCanBeTargetedWhenInjured(ped:Int, toggle:Bool):Void;
	static function SetPedCanBeShotInVehicle(ped:Int, toggle:Bool):Void;
	static function SetPedCanCowerInCover(ped:Int, toggle:Bool):Void;
	static function SetPedCanBeTargettedByPlayer(ped:Int, player:Int, toggle:Bool):Void;
	static function SetPedCanBeTargettedByTeam(ped:Int, team:Int, toggle:Bool):Void;
	static function SetPedCanEvasiveDive(ped:Int, toggle:Bool):Void;
	static function SetPedCanHeadIk(ped:Int, toggle:Bool):Void;
	static function SetPedCanLegIk(ped:Int, toggle:Bool):Void;
	static function SetPedCanPeekInCover(ped:Int, toggle:Bool):Void;
	static function SetPedCanLosePropsOnDamage(ped:Int, loseProps:Bool, p2:Int):Void;
	static function SetPedCanPlayGestureAnims(ped:Int, toggle:Bool):Void;
	static function SetPedCanPlayAmbientAnims(ped:Int, toggle:Bool):Void;
	static function SetPedCanPlayAmbientBaseAnims(ped:Int, toggle:Bool):Void;
	static function SetPedCanPlayInjuredAnims(ped:Int, p1:Bool):Void;
	static function SetPedCanRagdoll(ped:Int, toggle:Bool):Void;
	static function SetPedCanRagdollFromPlayerImpact(ped:Int, toggle:Bool):Void;
	static function SetPedCanPlayVisemeAnims(ped:Int, toggle:Bool, p2:Bool):Void;
	static function SetPedCanTorsoIk(ped:Int, toggle:Bool):Void;
	static function SetPedCanSmashGlass(ped:Int, p1:Bool, p2:Bool):Void;
	static function SetPedCanSwitchWeapon(ped:Int, toggle:Bool):Void;
	static function SetPedCanTorsoReactIk(ped:Int, p1:Bool):Void;
	static function SetPedCanTorsoVehicleIk(ped:Int, p1:Bool):Void;
	static function SetPedCapsule(ped:Int, value:Float):Void;
	static function SetPedClothProne(p0:Int, p1:Int):Void;
	static function SetPedClothPackageIndex(ped:Int, p1:Int):Void;
	static function SetPedCombatAbility(ped:Int, p1:Int):Void;
	static function SetPedCombatMovement(ped:Int, combatMovement:Int):Void;
	static function SetPedCanTeleportToGroupLeader(pedHandle:Int, groupHandle:Int, toggle:Bool):Void;
	static function SetPedComponentVariation(ped:Int, componentId:Int, drawableId:Int, textureId:Int, paletteId:Int):Void;
	static function SetPedCoordsKeepVehicle(ped:Int, posX:Float, posY:Float, posZ:Float):Void;
	static function SetPedCanUseAutoConversationLookat(ped:Int, toggle:Bool):Void;
	static function SetPedCoverClipsetOverride(ped:Int, p1:String):Void;
	static function SetPedCoordsNoGang(ped:Int, posX:Float, posY:Float, posZ:Float):Void;
	static function SetPedCombatAttributes(ped:Int, attributeIndex:Int, enabled:Bool):Void;
	static function SetPedDefensiveAreaDirection(ped:Int, p1:Float, p2:Float, p3:Float, p4:Bool):Void;
	static function SetPedDefaultComponentVariation(ped:Int):Void;
	static function SetPedCombatRange(ped:Int, p1:Int):Void;
	static function SetPedDefensiveAreaAttachedToPed(ped:Int, attachPed:Int, p2:Float, p3:Float, p4:Float, p5:Float, p6:Float, p7:Float, p8:Float, p9:Bool,
		p10:Bool):Void;
	static function SetPedDefensiveSphereAttachedToPed(ped:Int, target:Int, xOffset:Float, yOffset:Float, zOffset:Float, radius:Float, p6:Bool):Void;
	static function SetPedDesiredHeading(ped:Int, heading:Float):Void;
	static function SetPedDiesInSinkingVehicle(ped:Int, toggle:Bool):Void;
	static function SetPedConfigFlag(ped:Int, flagId:Int, value:Bool):Void;
	static function SetPedDefensiveSphereAttachedToVehicle(ped:Int, target:Int, xOffset:Float, yOffset:Float, zOffset:Float, radius:Float, p6:Bool):Void;
	static function SetPedCowerHash(ped:Int, p1:String):Void;
	static function SetPedDiesInWater(ped:Int, toggle:Bool):Void;
	static function SetPedDensityMultiplierThisFrame(multiplier:Float):Void;
	static function SetPedDucking(ped:Int, toggle:Bool):Void;
	static function SetPedDriveByClipsetOverride(ped:Int, clipset:String):Void;
	static function SetPedDiesInstantlyInWater(ped:Int, toggle:Bool):Void;
	static function SetPedEnveffScale(ped:Int, value:Float):Void;
	static function SetPedEnveffColorModulator(ped:Int, r:Int, g:Int, b:Int):Void;
	static function SetPedDiesInVehicle(ped:Int, toggle:Bool):Void;
	static function SetPedEmissiveIntensity(ped:Int, intensity:Float):Void;
	static function SetPedFleeAttributes(ped:Int, attributeFlags:Int, enable:Bool):Void;
	static function SetPedDiesWhenInjured(ped:Int, toggle:Bool):Void;
	static function SetPedEnableWeaponBlocking(ped:Int, toggle:Bool):Void;
	static function SetPedFiringPattern(ped:Int, patternHash:Int):Void;
	static function SetPedGestureGroup(ped:Int, animGroupGesture:String):Void;
	static function SetPedEyeColor(ped:Int, index:Int):Void;
	static function SetPedGetOutUpsideDownVehicle(ped:Int, toggle:Bool):Void;
	static function SetPedHairColor(ped:Int, colorID:Int, highlightColorID:Int):Void;
	static function SetPedGeneratesDeadBodyEvents(ped:Int, toggle:Bool):Void;
	static function SetPedFaceFeature(ped:Int, index:Int, scale:Float):Void;
	static function SetPedGroupMemberPassengerIndex(ped:Int, index:Int):Void;
	static function SetPedHeadOverlayColor(ped:Int, overlayID:Int, colorType:Int, colorID:Int, secondColorID:Int):Void;
	static function SetPedGravity(ped:Int, toggle:Bool):Void;
	static function SetPedHeadOverlay(ped:Int, overlayID:Int, index:Int, opacity:Float):Void;
	static function SetPedHelmet(ped:Int, canWearHelmet:Bool):Void;
	static function SetPedHeadBlendData(ped:Int, shapeFirstID:Int, shapeSecondID:Int, shapeThirdID:Int, skinFirstID:Int, skinSecondID:Int, skinThirdID:Int,
		shapeMix:Float, skinMix:Float, thirdMix:Float, isParent:Bool):Void;
	static function SetPedHeatscaleOverride(ped:Int, heatScale:Float):Void;
	static function SetPedHearingRange(ped:Int, value:Float):Void;
	static function SetPedHelmetTextureIndex(ped:Int, textureIndex:Int):Void;
	static function SetPedHelmetFlag(ped:Int, helmetFlag:Int):Void;
	static function SetPedIdRange(ped:Int, value:Float):Void;
	static function SetPedHelmetUnk(ped:Int, p1:Bool, p2:Int, p3:Int):Void;
	static function SetPedHelmetPropIndex(ped:Int, propIndex:Int):Void;
	static function SetPedInVehicleContext(ped:Int, context:Int):Void;
	static function SetPedLegIkMode(ped:Int, mode:Int):Void;
	static function SetPedMaxHealth(ped:Int, value:Int):Void;
	static function SetPedHighlyPerceptive(ped:Int, toggle:Bool):Void;
	static function SetPedLodMultiplier(ped:Int, multiplier:Float):Void;
	static function SetPedMaxMoveBlendRatio(ped:Int, value:Float):Void;
	static function SetPedIntoVehicle(ped:Int, vehicle:Int, seatIndex:Int):Void;
	static function SetPedIncreasedAvoidanceRadius(ped:Int):Void;
	static function SetPedMinGroundTimeForStungun(ped:Int, ms:Int):Void;
	static function SetPedKeepTask(ped:Int, toggle:Bool):Void;
	static function SetPedMaxTimeInWater(ped:Int, value:Float):Void;
	static function SetPedMinMoveBlendRatio(ped:Int, value:Float):Void;
	static function SetPedMoney(ped:Int, amount:Int):Void;
	static function SetPedMotionBlur(ped:Int, toggle:Bool):Void;
	static function SetPedMaxTimeUnderwater(ped:Int, value:Float):Void;
	static function SetPedMoveRateOverride(ped:Int, value:Float):Void;
	static function SetPedMoveAnimsBlendOut(ped:Int):Void;
	static function SetPedNonCreationArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float):Void;
	static function SetPedMovementClipset(ped:Int, clipSet:String, transitionSpeed:Float):Void;
	static function SetPedModelIsSuppressed(model:Int, toggle:Bool):Void;
	static function SetPedPanicExitScenario(ped:Int, x:Float, y:Float, z:Float):Int;
	static function SetPedNeverLeavesGroup(ped:Int, toggle:Bool):Void;
	static function SetPedNameDebug(ped:Int, name:String):Void;
	static function SetPedPinnedDown(ped:Int, pinned:Bool, i:Int):Int;
	static function SetPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped:Int, toggle:Bool):Void;
	static function SetPedParachuteTintIndex(ped:Int, tintIndex:Int):Void;
	static function SetPedPrimaryLookat(ped:Int, lookAt:Int):Void;
	static function SetPedPreloadPropData(ped:Int, componentId:Int, drawableId:Int, textureId:Int):Bool;
	static function SetPedPreferredCoverSet(ped:Int, itemSet:Int):Void;
	static function SetPedRagdollOnCollision(ped:Int, toggle:Bool):Void;
	static function SetPedPreloadVariationData(ped:Int, slot:Int, drawableId:Int, textureId:Int):Int;
	static function SetPedRandomComponentVariation(ped:Int, p1:Int):Void;
	static function SetPedPropIndex(ped:Int, componentId:Int, drawableId:Int, textureId:Int, attach:Bool):Void;
	static function SetPedRelationshipGroupHash(ped:Int, hash:Int):Void;
	static function SetPedRandomProps(ped:Int):Void;
	static function SetPedResetFlag(ped:Int, flagId:Int, doReset:Bool):Void;
	static function SetPedRagdollForceFall(ped:Int):Void;
	static function SetPedRelationshipGroupDefaultHash(ped:Int, hash:Int):Void;
	static function SetPedReserveParachuteTintIndex(ped:Int, p1:Int):Void;
	static function SetPedScubaGearVariation(ped:Int):Void;
	static function SetPedSeeingRange(ped:Int, value:Float):Void;
	static function SetPedShouldPlayFleeScenarioExit(ped:Int, p1:Int, p2:Int, p3:Int):Int;
	static function SetPedShootsAtCoord(ped:Int, x:Float, y:Float, z:Float, toggle:Bool):Void;
	static function SetPedSphereDefensiveArea(ped:Int, x:Float, y:Float, z:Float, radius:Float, p5:Bool, p6:Bool):Void;
	static function SetPedShouldPlayNormalScenarioExit(ped:Int):Void;
	static function SetPedShootRate(ped:Int, shootRate:Int):Void;
	static function SetPedShouldPlayImmediateScenarioExit(ped:Int):Void;
	static function SetPedShouldPlayDirectedScenarioExit(p0:Int, p1:Int, p2:Int, p3:Int):Int;
	static function SetPedStealthMovement(ped:Int, p1:Bool, action:String):Void;
	static function SetPedStayInVehicleWhenJacked(ped:Int, toggle:Bool):Void;
	static function SetPedSteersAroundObjects(ped:Int, toggle:Bool):Void;
	static function SetPedSteersAroundVehicles(ped:Int, toggle:Bool):Void;
	static function SetPedSteersAroundPeds(ped:Int, toggle:Bool):Void;
	static function SetPedSuffersCriticalHits(ped:Int, toggle:Bool):Void;
	static function SetPedStrafeClipset(ped:Int, clipSet:String):Void;
	static function SetPedSweat(ped:Int, sweat:Float):Void;
	static function SetPedTargetLossResponse(ped:Int, responseType:Int):Void;
	static function SetPedToLoadCover(ped:Int, toggle:Bool):Void;
	static function SetPedToRagdoll(ped:Int, time1:Int, time2:Int, ragdollType:Int, p4:Bool, p5:Bool, p6:Bool):Bool;
	static function SetPedUsingActionMode(ped:Int, p1:Bool, p2:Int, action:String):Void;
	static function SetPedToRagdollWithFall(ped:Int, time:Int, p2:Int, ragdollType:Int, x:Float, y:Float, z:Float, p7:Float, p8:Float, p9:Float, p10:Float,
		p11:Float, p12:Float, p13:Float):Bool;
	static function SetPedToInformRespectedFriends(ped:Int, radius:Float, maxFriends:Int):Void;
	static function SetPedVehicleForcedSeatUsage(ped:Int, vehicle:Int, seatIndex:Int, flags:Int):Void;
	static function SetPedVisualFieldCenterAngle(ped:Int, angle:Float):Void;
	static function SetPedVisualFieldMaxAngle(ped:Int, value:Float):Void;
	static function SetPedVisualFieldPeripheralRange(ped:Int, range:Float):Void;
	static function SetPedVisualFieldMaxElevationAngle(ped:Int, angle:Float):Void;
	static function SetPedWetnessEnabledThisFrame(ped:Int):Void;
	static function SetPedVisualFieldMinAngle(ped:Int, value:Float):Void;
	static function SetPedVisualFieldMinElevationAngle(ped:Int, angle:Float):Void;
	static function SetScenarioPedDensityMultiplierThisFrame(p0:Float, p1:Float):Void;
	static function SetPedWeaponMovementClipset(ped:Int, clipSet:String):Void;
	static function SetPedWetnessHeight(ped:Int, height:Float):Void;
	static function SetPopControlSphereThisFrame(x:Float, y:Float, z:Float, min:Float, max:Float):Void;
	static function SetScenarioPedsSpawnInSphereArea(x:Float, y:Float, z:Float, range:Float, p4:Int):Void;
	static function SetScenarioPedsToBeReturnedByNextCommand(value:Bool):Void;
	static function SetRelationshipBetweenGroups(relationship:Int, group1:Int, group2:Int):Void;
	static function SetRagdollBlockingFlags(ped:Int, flags:Int):Void;
	static function SetSynchronizedSceneRate(sceneID:Int, rate:Float):Void;
	static function SetRelationshipGroupDontAffectWantedLevel(group:Int, p1:Bool):Void;
	static function SetScriptedAnimSeatOffset(ped:Int, p1:Float):Void;
	static function SetSynchronizedSceneLooped(sceneID:Int, toggle:Bool):Void;
	static function SpawnpointsGetNumSearchResults():Int;
	static function SetSynchronizedSceneHoldLastFrame(sceneID:Int, toggle:Bool):Void;
	static function SpawnpointsCancelSearch():Void;
	static function SetScriptedConversionCoordThisFrame(x:Float, y:Float, z:Float):Void;
	static function SetSynchronizedSceneOrigin(sceneID:Int, x:Float, y:Float, z:Float, roll:Float, pitch:Float, yaw:Float, p7:Bool):Void;
	static function SpawnpointsGetSearchResultFlags(p0:Int, p1:Int):Void;
	static function StopAnyPedModelBeingSuppressed():Void;
	static function SetSynchronizedScenePhase(sceneID:Int, phase:Float):Void;
	static function SpawnpointsIsSearchActive():Bool;
	static function SpawnpointsIsSearchComplete():Bool;
	static function UnregisterPedheadshot(id:Int):Void;
	static function SpawnpointsGetSearchResult(randomInt:Int, x:Float, y:Float, z:Float):Void;
	static function SpawnpointsIsSearchFailed():Bool;
	static function WasPedKilledByStealth(ped:Int):Bool;
	static function SpawnpointsStartSearchInAngledArea(x:Float, y:Float, z:Float, p3:Float, p4:Float, p5:Float, p6:Float, interiorFlags:Int, scale:Float,
		duration:Int):Void;
	static function StopPedWeaponFiringWhenDropped(ped:Int):Void;
	static function SpawnpointsStartSearch(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, interiorFlags:Int, scale:Float, duration:Int):Void;
	static function WasPedKnockedOut(ped:Int):Bool;
	static function UpdatePedHeadBlendData(ped:Int, shapeMix:Float, skinMix:Float, thirdMix:Float):Void;
	static function WasPedKilledByTakedown(ped:Int):Bool;
	static function WasPedSkeletonUpdated(ped:Int):Bool;
	static function BgStartContext(contextName:String):Void;
	static function BgEndContextHash(contextHash:Int):Void;
	static function BgEndContext(contextName:String):Void;
	static function DoesScriptExist(scriptName:String):Bool;
	static function DoesScriptWithNameHashExist(scriptHash:Int):Bool;
	static function GetEventData(eventGroup:Int, eventIndex:Int, eventData:Int, eventDataSize:Int):Bool;
	static function BgStartContextHash(contextHash:Int):Void;
	static function GetEventAtIndex(eventGroup:Int, eventIndex:Int):Int;
	static function GetNameOfThread(threadId:Int):String;
	static function GetHashOfThisScriptName():Int;
	static function GetIdOfThisThread():Int;
	static function GetEventExists(eventGroup:Int, eventIndex:Int):Bool;
	static function GetNoLoadingScreen():Bool;
	static function GetNumberOfEvents(eventGroup:Int):Int;
	static function GetThisScriptName():String;
	static function GetNumberOfReferencesOfScriptWithNameHash(scriptHash:Int):Int;
	static function HasScriptLoaded(scriptName:String):Bool;
	static function IsThreadActive(threadId:Int):Bool;
	static function HasScriptWithNameHashLoaded(scriptHash:Int):Bool;
	static function LockLoadingScreenButtons():Void;
	static function RequestScriptWithNameHash(scriptHash:Int):Void;
	static function ScriptThreadIteratorReset():Void;
	static function RequestScript(scriptName:String):Void;
	static function SetScriptAsNoLongerNeeded(scriptName:String):Void;
	static function SetNoLoadingScreen(toggle:Bool):Void;
	static function TriggerScriptEvent2(eventGroup:Int, eventData:Int, eventDataSize:Int, playerBits:Int):Void;
	static function ScriptThreadIteratorGetNextThreadId():Int;
	static function ShutdownLoadingScreen():Void;
	static function TerminateThisThread():Void;
	static function SetScriptWithNameHashAsNoLongerNeeded(scriptHash:Int):Void;
	static function TriggerScriptEvent(eventGroup:Int, eventData:Int, eventDataSize:Int, playerBits:Int):Void;
	static function TerminateThread(threadId:Int):Void;
	static function GetShapeTestResult(shapeTestHandle:Int, hit:Bool, endCoords:Vector3, surfaceNormal:Vector3, entityHit:Int):Int;
	static function StartShapeTestBox(x:Float, y:Float, z:Float, x1:Float, y1:Float, z1:Float, rotX:Float, rotY:Float, rotZ:Float, p9:Int, flags:Int,
		entity:Int, p12:Int):Int;
	static function StartShapeTestBoundingBox(entity:Int, flags1:Int, flags2:Int):Int;
	static function GetShapeTestResultIncludingMaterial(shapeTestHandle:Int, hit:Bool, endCoords:Vector3, surfaceNormal:Vector3, materialHash:Int,
		entityHit:Int):Int;
	static function ReleaseScriptGuidFromEntity(entity:Int):Void;
	static function StartShapeTestLosProbe(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, flags:Int, entity:Int, p8:Int):Int;
	static function StartShapeTestBound(entity:Int, flags1:Int, flags2:Int):Int;
	static function StartExpensiveSynchronousShapeTestLosProbe(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, flags:Int, entity:Int, p8:Int):Int;
	static function StartShapeTestCapsule(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, radius:Float, flags:Int, entity:Int, p9:Int):Int;
	static function StartShapeTestSurroundingCoords(pVec1:Vector3, pVec2:Vector3, flag:Int, entity:Int, flag2:Int):Int;
	static function StartShapeTestSweptSphere(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, radius:Float, flags:Int, entity:Int, p9:Int):Int;
	static function IsRockstarMessageReadyForScript():Bool;
	static function RockstarMessageGetString():String;
	static function ScEmailMessagePushGamerToRecipList(networkHandle:Int):Void;
	static function ScGamerdataGetBool(name:String):Bool;
	static function ScEmailMessageClearRecipList():Void;
	static function ScGamerdataGetFloat(name:String, outValue:Float):Bool;
	static function ScGamerdataGetInt(name:String, outValue:Int):Bool;
	static function ScGetNickname():String;
	static function ScGetHasAchievementBeenPassed(achievement:Int):Bool;
	static function ScInboxGetEmails(offset:Int, limit:Int):Void;
	static function ScInboxGetMessageIsReadAtIndex(msgIndex:Int):Bool;
	static function ScInboxGetMessageTypeAtIndex(msgIndex:Int):Int;
	static function ScInboxMessageDoApply(p0:Int):Bool;
	static function ScInboxGetTotalNumMessages():Int;
	static function ScInboxMessageGetBountyData(index:Int, outData:Int):Bool;
	static function ScInboxMessageGetDataBool(p0:Int, p1:String):Bool;
	static function ScInboxMessageGetDataString(p0:Int, context:String, out:String):Bool;
	static function ScInboxMessageGetString(p0:Int):String;
	static function ScInboxMessagePushGamerToEventRecipList(networkHandle:Int):Void;
	static function ScInboxMessageSendBountyPresenceEvent(data:String):Bool;
	static function ScInboxMessagePop(p0:Int):Bool;
	static function ScInboxMessageGetDataInt(p0:Int, context:String, out:Int):Bool;
	static function ScInboxMessageGetUgcdata(p0:Int, p1:Int):Bool;
	static function ScLicenseplateAdd(plateText:String, plateData:String, tokenOut:Int):Bool;
	static function ScLicenseplateGetPlate(token:Int, plateIndex:Int):String;
	static function ScLicenseplateGetAddStatus(token:Int):Int;
	static function ScLicenseplateGetAddIsPending(token:Int):Bool;
	static function ScInboxMessageSendUgcStatUpdateEvent(data:String):Void;
	static function ScLicenseplateSetPlateData(oldPlateText:String, newPlateText:String, plateData:String):Bool;
	static function ScProfanityCheckString(string:String, token:Int):Bool;
	static function ScLicenseplateGetIsvalidIsPending(token:Int):Bool;
	static function ScLicenseplateGetPlateData(token:Int, plateIndex:Int):String;
	static function ScLicenseplateGetCount(token:Int):Int;
	static function ScLicenseplateIsvalid(plateText:String, tokenOut:Int):Bool;
	static function ScLicenseplateGetIsvalidStatus(token:Int):Int;
	static function ScProfanityGetCheckIsValid(token:Int):Bool;
	static function ScPresenceAttrSetString(attrHash:Int, value:String):Bool;
	static function ScProfanityGetStringStatus(token:Int):Int;
	static function ScPresenceAttrSetFloat():Bool;
	static function ScPresenceAttrSetInt(attrHash:Int, value:Int):Bool;
	static function ScProfanityCheckUgcString(string:String, token:Int):Bool;
	static function ScProfanityGetCheckIsPending(token:Int):Bool;
	static function ScProfanityGetStringPassed(token:Int):Bool;
	static function SetHandleRockstarMessageViaScript(toggle:Bool):Void;
	static function AddModelToCreatorBudget(modelHash:Int):Bool;
	static function AllowPlayerSwitchPan():Void;
	static function AllowPlayerSwitchAscent():Void;
	static function DisableSwitchOutroFx():Void;
	static function AllowPlayerSwitchOutro():Void;
	static function AllowPlayerSwitchDescent():Void;
	static function EndSrl():Void;
	static function ClearFocus():Void;
	static function BeginSrl():Void;
	static function ClearHdArea():Void;
	static function GetIdealPlayerSwitchType(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float):Int;
	static function DoesAnimDictExist(animDict:String):Bool;
	static function GetPlayerSwitchInterpOutCurrentTime():Int;
	static function EnableSwitchPauseBeforeDescent():Void;
	static function GetPlayerSwitchInterpOutDuration():Int;
	static function GetLodscale():Float;
	static function GetGlobalWaterType():Int;
	static function GetPlayerShortSwitchState():Int;
	static function HasAnimSetLoaded(animSet:String):Bool;
	static function GetNumberOfStreamingRequests():Int;
	static function GetPlayerSwitchState():Int;
	static function GetPlayerSwitchJumpCutIndex():Int;
	static function HasCollisionForModelLoaded(model:Int):Bool;
	static function GetUsedCreatorModelMemoryPercentage():Float;
	static function GetPlayerSwitchType():Int;
	static function HasPtfxAssetLoaded():Bool;
	static function HasAnimDictLoaded(animDict:String):Bool;
	static function HasNamedPtfxAssetLoaded(fxName:String):Bool;
	static function HasModelLoaded(model:Int):Bool;
	static function IsEntityFocus(entity:Int):Bool;
	static function HasClipSetLoaded(clipSet:String):Bool;
	static function IsIplActive(iplName:String):Bool;
	static function IsModelInCdimage(model:Int):Bool;
	static function InitCreatorBudget():Void;
	static function IsNetworkLoadingScene():Bool;
	static function IsModelAVehicle(model:Int):Bool;
	static function IsNewLoadSceneLoaded():Bool;
	static function IsModelAPed(model:Int):Bool;
	static function IsModelValid(model:Int):Bool;
	static function IsStreamvolActive():Bool;
	static function IsPlayerSwitchInProgress():Bool;
	static function IsNewLoadSceneActive():Bool;
	static function IsSwitchSkippingDescent():Bool;
	static function LoadAllObjectsNow():Void;
	static function IsSrlLoaded():Bool;
	static function IsSwitchReadyForDescent():Bool;
	static function LoadGlobalWaterType(waterType:Int):Void;
	static function LoadScene(x:Float, y:Float, z:Float):Void;
	static function NewLoadSceneStartSphere(x:Float, y:Float, z:Float, radius:Float, p4:Int):Bool;
	static function NetworkUpdateLoadScene():Bool;
	static function NetworkStopLoadScene():Void;
	static function OverrideLodscaleThisFrame(scaling:Float):Void;
	static function RemoveAnimDict(animDict:String):Void;
	static function RemoveAnimSet(animSet:String):Void;
	static function PrefetchSrl(srl:String):Void;
	static function RemoveIpl(iplName:String):Void;
	static function NewLoadSceneStart(posX:Float, posY:Float, posZ:Float, offsetX:Float, offsetY:Float, offsetZ:Float, radius:Float, p7:Int):Bool;
	static function RemoveNamedPtfxAsset(fxName:String):Void;
	static function NewLoadSceneStop():Void;
	static function RemoveModelFromCreatorBudget(modelHash:Int):Void;
	static function RemoveClipSet(clipSet:String):Void;
	static function RequestAdditionalCollisionAtCoord(x:Float, y:Float, z:Float):Void;
	static function RequestAnimDict(animDict:String):Void;
	static function RequestClipSet(clipSet:String):Void;
	static function RemovePtfxAsset():Void;
	static function RequestCollisionAtCoord(x:Float, y:Float, z:Float):Void;
	static function RequestMenuPedModel(model:Int):Void;
	static function RequestCollisionForModel(model:Int):Void;
	static function RequestAnimSet(animSet:String):Void;
	static function RequestIpl(iplName:String):Void;
	static function RequestModelsInRoom(interior:Int, roomName:String):Void;
	static function RequestModel(model:Int):Void;
	static function RequestPtfxAsset():Void;
	static function SetGamePausesForStreaming(toggle:Bool):Void;
	static function SetDitchPoliceModels(toggle:Bool):Void;
	static function RequestNamedPtfxAsset(fxName:String):Void;
	static function SetIslandEnabled(islandName:String, toggle:Bool):Void;
	static function SetHdArea(x:Float, y:Float, z:Float, radius:Float):Void;
	static function SetPlayerSwitchEstablishingShot(name:String):Void;
	static function SetFocusPosAndVel(x:Float, y:Float, z:Float, offsetX:Float, offsetY:Float, offsetZ:Float):Void;
	static function SetFocusEntity(entity:Int):Void;
	static function SetMapdatacullboxEnabled(name:String, toggle:Bool):Void;
	static function SetPedPopulationBudget(p0:Int):Void;
	static function SetInteriorActive(interiorID:Int, toggle:Bool):Void;
	static function SetPlayerShortSwitchStyle(style:Int):Void;
	static function SetReducePedModelBudget(toggle:Bool):Void;
	static function SetModelAsNoLongerNeeded(model:Int):Void;
	static function SetRenderHdOnly(toggle:Bool):Void;
	static function SetPlayerSwitchOutro(cameraCoordX:Float, cameraCoordY:Float, cameraCoordZ:Float, camRotationX:Float, camRotationY:Float,
		camRotationZ:Float, camFov:Float, camFarClip:Float, rotationOrder:Int):Void;
	static function SetVehiclePopulationBudget(p0:Int):Void;
	static function SetSrlTime(p0:Float):Void;
	static function SetReduceVehicleModelBudget(toggle:Bool):Void;
	static function StopPlayerSwitch():Void;
	static function StartPlayerSwitch(from:Int, to:Int, flags:Int, switchType:Int):Void;
	static function StreamvolCreateFrustum(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Float, p7:Int, p8:Int):Int;
	static function StreamvolDelete(unused:Int):Void;
	static function SetStreaming(toggle:Bool):Void;
	static function StreamvolIsValid(unused:Int):Bool;
	static function StreamvolCreateSphere(x:Float, y:Float, z:Float, rad:Float, p4:Int, p5:Int):Int;
	static function ShutdownCreatorBudget():Void;
	static function SwitchToMultiSecondpart(ped:Int):Void;
	static function SwitchToMultiFirstpart(ped:Int, flags:Int, switchType:Int):Void;
	static function StreamvolHasLoaded(unused:Int):Bool;
	static function StreamvolCreateLine(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Int):Int;
	static function Cos(value:Float):Float;
	static function Ceil(value:Float):Int;
	static function Log10(value:Float):Float;
	static function Pow(base:Float, exponent:Float):Float;
	static function Round(value:Float):Int;
	static function ShiftRight(value:Int, bitShift:Int):Int;
	static function Floor(value:Float):Int;
	static function Settimera(value:Int):Void;
	static function StartNewScript(scriptName:String, stackSize:Int):Int;
	static function Sin(value:Float):Float;
	static function SetThreadPriority(priority:Int):Void;
	static function ShiftLeft(value:Int, bitShift:Int):Int;
	static function StartNewScriptWithNameHashAndArgs(scriptHash:Int, args:Int, argCount:Int, stackSize:Int):Int;
	static function Timera():Int;
	static function Settimerb(value:Int):Void;
	static function Timestep():Float;
	static function ToFloat(value:Int):Float;
	static function Sqrt(value:Float):Float;
	static function StartNewScriptWithNameHash(scriptHash:Int, stackSize:Int):Int;
	static function StartNewScriptWithArgs(scriptName:String, args:Int, argCount:Int, stackSize:Int):Int;
	static function Timerb():Int;
	static function Vdist(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float):Float;
	static function Vdist2(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float):Float;
	static function Wait(ms:Int):Void;
	static function Vmag(x:Float, y:Float, z:Float):Float;
	static function Vmag2(x:Float, y:Float, z:Float):Float;
	static function GetNgstatBoolHash(index:Int, spStat:Bool, charStat:Bool, character:Int, section:String):Int;
	static function GetPackedBoolStatKey(index:Int, spStat:Bool, charStat:Bool, character:Int):Int;
	static function GetPackedIntStatKey(index:Int, spStat:Bool, charStat:Bool, character:Int):Int;
	static function GetNgstatIntHash(index:Int, spStat:Bool, charStat:Bool, character:Int, section:String):Int;
	static function GetPackedTuBoolStatKey(index:Int, spStat:Bool, charStat:Bool, character:Int):Int;
	static function GetPackedTuIntStatKey(index:Int, spStat:Bool, charStat:Bool, character:Int):Int;
	static function HiredLimo(p0:Int, p1:Int):Void;
	static function Leaderboards2ReadByPlatform(p0:Int, gamerHandleCsv:String, platformName:String):Bool;
	static function Leaderboards2ReadByHandle(p0:Int, p1:Int):Bool;
	static function Leaderboards2ReadByRadius(p0:Int, p1:Int, p2:Int):Bool;
	static function Leaderboards2ReadByScoreFloat(p0:Int, p1:Float, p2:Int):Bool;
	static function Leaderboards2ReadByRow(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int):Bool;
	static function Leaderboards2ReadByRank(p0:Int, p1:Int, p2:Int):Bool;
	static function Leaderboards2ReadByScoreInt(p0:Int, p1:Int, p2:Int):Bool;
	static function Leaderboards2ReadRankPrediction(p0:Int, p1:Int, p2:Int):Bool;
	static function Leaderboards2WriteData(p0:Int):Bool;
	static function LeaderboardsCacheDataRow(p0:Int):Bool;
	static function Leaderboards2ReadFriendsByRow(p0:Int, p1:Int, p2:Int, p3:Bool, p4:Int, p5:Int):Bool;
	static function Leaderboards2WriteDataForEventType(p0:Int, p1:Int):Bool;
	static function LeaderboardsDeaths(statName:Int, value:Float):Void;
	static function LeaderboardsClearCacheData():Void;
	static function LeaderboardsGetCacheDataRow(p0:Int, p1:Int, p2:Int):Bool;
	static function LeaderboardsGetCacheTime(p0:Int):Int;
	static function LeaderboardsGetCacheNumberOfRows(p0:Int):Int;
	static function LeaderboardsGetColumnId(p0:Int, p1:Int, p2:Int):Int;
	static function LeaderboardsReadAnyPending():Bool;
	static function LeaderboardsGetCacheExists(p0:Int):Bool;
	static function LeaderboardsGetColumnType(p0:Int, p1:Int, p2:Int):Int;
	static function LeaderboardsReadSuccessful(p0:Int, p1:Int, p2:Int):Bool;
	static function LeaderboardsReadPending(p0:Int, p1:Int, p2:Int):Bool;
	static function LeaderboardsGetNumberOfColumns(p0:Int, p1:Int):Int;
	static function LeaderboardsReadClear(p0:Int, p1:Int, p2:Int):Int;
	static function LeaderboardsReadClearAll():Int;
	static function LeaderboardsWriteAddColumn(p0:Int, p1:Int, p2:Float):Void;
	static function LeaderboardsWriteAddColumnLong(p0:Int, p1:Int, p2:Int):Void;
	static function OrderedBossVehicle(p0:Int, p1:Int, vehicleHash:Int):Void;
	static function PlaystatsAcquiredHiddenPackage(p0:Int):Void;
	static function PlaystatsActivityDone(p0:Int, p1:Int):Void;
	static function PlaystatsArenaWarsEnded(data:Int):Void;
	static function PlaystatsArcadegame(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int):Void;
	static function PlaystatsAwardXp(amount:Int, type:Int, category:Int):Void;
	static function PlaystatsAwardBadsport(id:Int):Void;
	static function PlaystatsArenaWarSpectator(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function PlaystatsBuyContraband(data:Int):Void;
	static function PlaystatsCarclubChallenge(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function PlaystatsCasinoBlackjack(p0:Int):Void;
	static function PlaystatsBanAlert(p0:Int):Void;
	static function PlaystatsBackgroundScriptAction(action:String, value:Int):Void;
	static function PlaystatsCasinoInsidetrackLight(p0:Int):Void;
	static function PlaystatsCarclubPrize(p0:Int, p1:Int):Void;
	static function PlaystatsCarclubPoints(p0:Int):Void;
	static function PlaystatsCasinoChip(p0:Int):Void;
	static function PlaystatsCasinoMissionEnded(data:Int):Void;
	static function PlaystatsCasinoBlackjackLight(p0:Int):Void;
	static function PlaystatsCasinoInsidetrack(p0:Int):Void;
	static function PlaystatsCasinoStoryMissionEnded(p0:Int, p1:Int):Void;
	static function PlaystatsCasinoLuckyseven(p0:Int):Void;
	static function PlaystatsCasinoSlotmachine(p0:Int):Void;
	static function PlaystatsCasinoRoulette(p0:Int):Void;
	static function PlaystatsChangeMcEmblem(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function PlaystatsCasinoThreecardpokerLight(p0:Int):Void;
	static function PlaystatsCasinoRouletteLight(p0:Int):Void;
	static function PlaystatsCasinoSlotmachineLight(p0:Int):Void;
	static function PlaystatsCheatApplied(cheat:String):Void;
	static function PlaystatsCopyRankIntoNewSlot(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int):Void;
	static function PlaystatsCasinoThreecardpoker(p0:Int):Void;
	static function PlaystatsCollectible(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int, p7:Int, p8:Int, p9:Int):Void;
	static function PlaystatsDarMissionEnd(data:Int):Void;
	static function PlaystatsClothChange(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function PlaystatsDupeDetection(data:Int):Void;
	static function PlaystatsDefendContraband(data:Int):Void;
	static function PlaystatsCrateDropMissionDone(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int):Void;
	static function PlaystatsDirectorMode(p0:Int):Void;
	static function PlaystatsCrateCreated(p0:Float, p1:Float, p2:Float):Void;
	static function PlaystatsExtraEvent(p0:Int):Void;
	static function PlaystatsEnterSessionPack(data:Int):Void;
	static function PlaystatsEarnedMcPoints(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int):Void;
	static function PlaystatsDroneUsage(p0:Int, p1:Int, p2:Int):Void;
	static function PlaystatsFriendActivity(p0:Int, p1:Int):Void;
	static function PlaystatsH2FmprepEnd(data:Int):Void;
	static function PlaystatsIdleKick(time:Int):Void;
	static function PlaystatsH2InstanceEnd(data:Int, p1:Int, p2:Int, p3:Int):Void;
	static function PlaystatsGunrunMissionEnded(data:Int):Void;
	static function PlaystatsInventory(p0:Int):Void;
	static function PlaystatsHeistSaveCheat(hash:Int, p1:Int):Void;
	static function PlaystatsMatchStarted(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int):Void;
	static function PlaystatsHoldUpMissionDone(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function PlaystatsJobBend(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function PlaystatsLeaveJobChain(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function PlaystatsMissionCheckpoint(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function PlaystatsImportExportMissionDone(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function PlaystatsMissionStarted(p0:Int, p1:Int, p2:Int, p3:Bool):Void;
	static function PlaystatsOddjobDone(p0:Int, p1:Int, p2:Int):Void;
	static function PlaystatsPassiveMode(p0:Bool, p1:Int, p2:Int, p3:Int):Void;
	static function PlaystatsNpcInvite(p0:Int):Void;
	static function PlaystatsMissionOver(p0:Int, p1:Int, p2:Int, p3:Bool, p4:Bool, p5:Bool):Void;
	static function PlaystatsPegasaircraft(modelHash:Int):Void;
	static function PlaystatsPropChange(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function PlaystatsQuickfixTool(element:Int, item:String):Void;
	static function PlaystatsPiMenuHideSettings(data:Int):Void;
	static function PlaystatsRaceToPointMissionDone(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int, p7:Int, p8:Int, p9:Int):Void;
	static function PlaystatsRandomMissionDone(name:String, p1:Int, p2:Int, p3:Int):Void;
	static function PlaystatsRobberyPrep(p0:Int):Void;
	static function PlaystatsRaceCheckpoint(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function PlaystatsRankUp(rank:Int):Void;
	static function PlaystatsRobberyFinale(p0:Int):Void;
	static function PlaystatsShopItem(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function PlaystatsRecoverContraband(data:Int):Void;
	static function PlaystatsSellContraband(data:Int):Void;
	static function PlaystatsSmugMissionEnded(data:Int):Void;
	static function PlaystatsRosBet(amount:Int, act:Int, player:Int, cm:Float):Void;
	static function PlaystatsSpentPiCustomLoadout(amount:Int):Void;
	static function PlaystatsSetJoinType(joinType:Int):Void;
	static function PlaystatsStuntPerformedEventDisallowTrigger():Void;
	static function PlaystatsSpectatorWheelSpin(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function PlaystatsStartOfflineMode():Void;
	static function PlaystatsStoneHatchetEnd(data:Int):Void;
	static function PlaystatsStuntPerformedEventAllowTrigger():Void;
	static function PlaystatsWeaponModeChange(weaponHash:Int, componentHashTo:Int, componentHashFrom:Int):Void;
	static function PlaystatsWebsiteVisited(scaleformHash:Int, p1:Int):Void;
	static function SetProfileSettingPrologueComplete():Void;
	static function PresenceEventUpdatestatInt(statHash:Int, value:Int, p2:Int):Void;
	static function PresenceEventUpdatestatFloat(statHash:Int, value:Float, p2:Int):Void;
	static function SetSaveMigrationTransactionId(transactionId:Int):Void;
	static function StatDeleteSlot(p0:Int):Int;
	static function SetHasContentUnlocksFlags(value:Int):Void;
	static function StatGetDate(statHash:Int, p1:Int, p2:Int, p3:Int):Bool;
	static function StatGetBoolMasked(statName:Int, mask:Int, p2:Int):Bool;
	static function StatGetBool(statHash:Int, outValue:Bool, p2:Int):Bool;
	static function StatClearSlotForReload(statSlot:Int):Int;
	static function StatGetInt(statHash:Int, outValue:Int, p2:Int):Bool;
	static function StatGetFloat(statHash:Int, outValue:Float, p2:Int):Bool;
	static function StatGetCancelSaveMigrationStatus():Int;
	static function StatGetNumberOfDays(statName:Int):Int;
	static function StatGetMaskedInt(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Bool;
	static function StatGetLicensePlate(statName:Int):String;
	static function StatGetPackedBoolMask(p0:Int):Int;
	static function StatGetNumberOfSeconds(statName:Int):Int;
	static function StatGetNumberOfMinutes(statName:Int):Int;
	static function StatGetSaveMigrationStatus(data:Int):Int;
	static function StatGetNumberOfHours(statName:Int):Int;
	static function StatGetSaveMigrationConsumeContentUnlockStatus(p0:Int):Int;
	static function StatGetPos(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Bool;
	static function StatGetPackedIntMask(p0:Int):Int;
	static function StatLoad(p0:Int):Bool;
	static function StatIncrement(statName:Int, value:Float):Void;
	static function StatSave(p0:Int, p1:Bool, p2:Int):Bool;
	static function StatGetUserId(p0:Int):String;
	static function StatGetString(statHash:Int, p1:Int):String;
	static function StatSaveMigrationConsumeContentUnlock(contentId:Int, srcPlatform:String, srcGamerHandle:String):Bool;
	static function StatLoadPending(p0:Int):Bool;
	static function StatMigrateSave(platformName:String):Bool;
	static function StatSaveMigrationCancel():Bool;
	static function StatSavePending():Bool;
	static function StatSetBlockSaves(toggle:Bool):Void;
	static function StatSavePendingOrRequested():Bool;
	static function StatSaveMigrationStatusStart():Bool;
	static function StatSetBoolMasked(statName:Int, value:Bool, mask:Int, save:Bool):Bool;
	static function StatSetBool(statName:Int, value:Bool, save:Bool):Bool;
	static function StatSetCheatIsActive():Void;
	static function StatSetFloat(statName:Int, value:Float, save:Bool):Bool;
	static function StatSetDate(statName:Int, value:Int, numFields:Int, save:Bool):Bool;
	static function StatSetCurrentPosixTime(statName:Int, p1:Bool):Bool;
	static function StatSetLicensePlate(statName:Int, str:String):Bool;
	static function StatSetGxtLabel(statName:Int, value:String, save:Bool):Bool;
	static function StatSetString(statName:Int, value:String, save:Bool):Bool;
	static function StatSetProfileSettingValue(profileSetting:Int, value:Int):Void;
	static function StatSetInt(statName:Int, value:Int, save:Bool):Bool;
	static function StatSetPos(statName:Int, x:Float, y:Float, z:Float, save:Bool):Bool;
	static function StatSetMaskedInt(statName:Int, p1:Int, p2:Int, p3:Int, save:Bool):Bool;
	static function StatSlotIsLoaded(p0:Int):Bool;
	static function StatSetUserId(statName:Int, value:String, save:Bool):Bool;
	static function AddCoverBlockingArea(playerX:Float, playerY:Float, playerZ:Float, radiusX:Float, radiusY:Float, radiusZ:Float, p6:Bool, p7:Bool, p8:Bool,
		p9:Bool):Void;
	static function AddCoverPoint(p0:Float, p1:Float, p2:Float, p3:Float, p4:Int, p5:Int, p6:Int, p7:Bool):Int;
	static function AddPatrolRouteLink(id1:Int, id2:Int):Void;
	static function AddVehicleSubtaskAttackCoord(ped:Int, x:Float, y:Float, z:Float):Void;
	static function AddVehicleSubtaskAttackPed(ped:Int, ped2:Int):Void;
	static function AssistedMovementRemoveRoute(route:String):Void;
	static function AddPatrolRouteNode(id:Int, guardScenario:String, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, waitTime:Int):Void;
	static function AssistedMovementIsRouteLoaded(route:String):Bool;
	static function AssistedMovementRequestRoute(route:String):Void;
	static function AssistedMovementOverrideLoadDistanceThisFrame(dist:Float):Void;
	static function ClearDrivebyTaskUnderneathDrivingTask(ped:Int):Void;
	static function ClearPedTasks(ped:Int):Void;
	static function AssistedMovementSetRouteProperties(route:String, props:Int):Void;
	static function ClearPedSecondaryTask(ped:Int):Void;
	static function ClearSequenceTask(taskSequenceId:Int):Void;
	static function ClearVehicleTasks(vehicle:Int):Void;
	static function ClearPedTasksImmediately(ped:Int):Void;
	static function CloseSequenceTask(taskSequenceId:Int):Void;
	static function CreatePatrolRoute():Void;
	static function ControlMountedWeapon(ped:Int):Bool;
	static function DoesScenarioGroupExist(scenarioGroup:String):Bool;
	static function ClosePatrolRoute():Void;
	static function DoesScenarioOfTypeExistInArea(p0:Float, p1:Float, p2:Float, p3:String, p4:Float, p5:Bool):Bool;
	static function DoesScenarioExistInArea(x:Float, y:Float, z:Float, radius:Float, b:Bool):Bool;
	static function DeletePatrolRoute(patrolRoute:String):Void;
	static function DoesScriptedCoverPointExistAtCoords(x:Float, y:Float, z:Float):Bool;
	static function GetActiveVehicleMissionType(vehicle:Int):Int;
	static function GetClipSetForScriptedGunTask(p0:Int):String;
	static function GetIsTaskActive(ped:Int, taskIndex:Int):Bool;
	static function GetIsWaypointRecordingLoaded(name:String):Bool;
	static function GetNavmeshRouteDistanceRemaining(ped:Int, distanceRemaining:Float, isPathReady:Bool):Int;
	static function GetPhoneGestureAnimTotalTime(ped:Int):Float;
	static function GetNavmeshRouteResult(ped:Int):Int;
	static function GetPedDesiredMoveBlendRatio(ped:Int):Float;
	static function GetPhoneGestureAnimCurrentTime(ped:Int):Float;
	static function GetPedWaypointDistance(p0:Int):Float;
	static function GetSequenceProgress(ped:Int):Int;
	static function GetPedWaypointProgress(ped:Int):Int;
	static function GetScriptedCoverPointCoords(coverpoint:Int):Vector3;
	static function GetTaskMoveNetworkSignalBool(ped:Int, signalName:String):Bool;
	static function GetScriptTaskStatus(ped:Int, taskHash:Int):Int;
	static function GetTaskMoveNetworkSignalFloat(ped:Int, signalName:String):Float;
	static function GetTaskMoveNetworkState(ped:Int):String;
	static function GetVehicleWaypointProgress(vehicle:Int):Int;
	static function IsMoveBlendRatioRunning(ped:Int):Bool;
	static function GetWaypointDistanceAlongRoute(p0:String, p1:Int):Float;
	static function IsMountedWeaponTaskUnderneathDrivingTask(ped:Int):Bool;
	static function GetTaskMoveNetworkEvent(ped:Int, eventName:String):Bool;
	static function IsDrivebyTaskUnderneathDrivingTask(ped:Int):Bool;
	static function IsPedActiveInScenario(ped:Int):Bool;
	static function GetVehicleWaypointTargetPoint(vehicle:Int):Int;
	static function IsMoveBlendRatioStill(ped:Int):Bool;
	static function IsPedGettingUp(ped:Int):Bool;
	static function IsMoveBlendRatioWalking(ped:Int):Bool;
	static function IsMoveBlendRatioSprinting(ped:Int):Bool;
	static function IsPedSprinting(ped:Int):Bool;
	static function IsPedBeingArrested(ped:Int):Bool;
	static function IsPedCuffed(ped:Int):Bool;
	static function IsPedStrafing(ped:Int):Bool;
	static function IsPedRunningArrestTask(ped:Int):Bool;
	static function IsPedInWrithe(ped:Int):Bool;
	static function IsPedRunning(ped:Int):Bool;
	static function IsPlayingPhoneGestureAnim(ped:Int):Bool;
	static function IsPedWalking(ped:Int):Bool;
	static function IsScenarioOccupied(p0:Float, p1:Float, p2:Float, p3:Float, p4:Bool):Bool;
	static function IsPedPlayingBaseClipInScenario(ped:Int):Bool;
	static function IsScenarioGroupEnabled(scenarioGroup:String):Bool;
	static function IsScenarioTypeEnabled(scenarioType:String):Bool;
	static function IsPedStill(ped:Int):Bool;
	static function IsTaskMoveNetworkActive(ped:Int):Bool;
	static function IsWaypointPlaybackGoingOnForPed(p0:Int):Bool;
	static function IsWaypointPlaybackGoingOnForVehicle(vehicle:Int):Bool;
	static function IsTaskMoveNetworkReadyForTransition(ped:Int):Bool;
	static function OpenSequenceTask(taskSequenceId:Int):Void;
	static function OpenPatrolRoute(patrolRoute:String):Void;
	static function PedHasUseScenarioTask(ped:Int):Bool;
	static function PlayAnimOnRunningScenario(ped:Int, animDict:String, animName:String):Void;
	static function RemoveAllCoverBlockingAreas():Void;
	static function RemoveWaypointRecording(name:String):Void;
	static function RequestTaskMoveNetworkStateTransition(ped:Int, name:String):Bool;
	static function PlayEntityScriptedAnim(p0:Int, p1:Int, p2:Int, p3:Int, p4:Float, p5:Float):Void;
	static function RemoveCoverPoint(coverpoint:Int):Void;
	static function ResetExclusiveScenarioGroup():Void;
	static function RequestWaypointRecording(name:String):Void;
	static function ResetScenarioGroupsEnabled():Void;
	static function SetAnimLooped(p0:Int, p1:Bool, p2:Int, p3:Bool):Void;
	static function SetAnimPhase(entity:Int, p1:Float, p2:Int, p3:Bool):Void;
	static function ResetScenarioTypesEnabled():Void;
	static function SetAnimRate(p0:Int, p1:Float, p2:Int, p3:Bool):Void;
	static function SetDriveTaskCruiseSpeed(driver:Int, cruiseSpeed:Float):Void;
	static function SetAnimWeight(p0:Int, p1:Float, p2:Int, p3:Int, p4:Bool):Void;
	static function SetDriveTaskDrivingStyle(ped:Int, drivingStyle:Int):Void;
	static function SetDriveTaskMaxCruiseSpeed(p0:Int, p1:Float):Void;
	static function SetExclusiveScenarioGroup(scenarioGroup:String):Void;
	static function SetDrivebyTaskTarget(shootingPed:Int, targetPed:Int, targetVehicle:Int, x:Float, y:Float, z:Float):Void;
	static function SetGlobalMinBirdFlightHeight(height:Float):Void;
	static function SetParachuteTaskTarget(ped:Int, x:Float, y:Float, z:Float):Void;
	static function SetHighFallTask(ped:Int, duration:Int, p2:Int, p3:Int):Void;
	static function SetMountedWeaponTarget(shootingPed:Int, targetPed:Int, targetVehicle:Int, x:Float, y:Float, z:Float):Void;
	static function SetPedCanPlayAmbientIdles(ped:Int, p1:Bool, p2:Bool):Void;
	static function SetNextDesiredMoveState(p0:Float):Void;
	static function SetPedPathCanUseClimbovers(ped:Int, Toggle:Bool):Void;
	static function SetParachuteTaskThrust(ped:Int, thrust:Float):Void;
	static function SetPedPathMayEnterWater(ped:Int, mayEnterWater:Bool):Void;
	static function SetPedDesiredMoveBlendRatio(ped:Int, p1:Float):Void;
	static function SetPedPathCanDropFromHeight(ped:Int, Toggle:Bool):Void;
	static function SetPedPathClimbCostModifier(ped:Int, modifier:Float):Void;
	static function SetPedPathPreferToAvoidWater(ped:Int, avoidWater:Bool):Void;
	static function SetScenarioTypeEnabled(scenarioType:String, toggle:Bool):Void;
	static function SetPedPathAvoidFire(ped:Int, avoidFire:Bool):Void;
	static function SetPedWaypointRouteOffset(p0:Int, p1:Int, p2:Int, p3:Int):Int;
	static function SetSequenceToRepeat(taskSequenceId:Int, repeat:Bool):Void;
	static function SetTaskMoveNetworkSignalFloat(ped:Int, signalName:String, value:Float):Void;
	static function SetPedPathCanUseLadders(ped:Int, Toggle:Bool):Void;
	static function SetTaskMoveNetworkSignalBool(ped:Int, signalName:String, value:Bool):Void;
	static function SetTaskVehicleChaseIdealPursuitDistance(ped:Int, distance:Float):Void;
	static function SetScenarioGroupEnabled(scenarioGroup:String, p1:Bool):Void;
	static function SetTaskVehicleChaseBehaviorFlag(ped:Int, flag:Int, set:Bool):Void;
	static function StopAnimTask(ped:Int, animDictionary:String, animationName:String, animExitSpeed:Float):Void;
	static function StopAnimPlayback(ped:Int, p1:Int, p2:Bool):Void;
	static function TaskAimGunAtCoord(ped:Int, x:Float, y:Float, z:Float, time:Int, p5:Bool, p6:Bool):Void;
	static function TaskAimGunAtEntity(ped:Int, entity:Int, duration:Int, p3:Bool):Void;
	static function SetTaskMoveNetworkSignalFloat2(ped:Int, signalName:String, value:Float):Void;
	static function TaskBoatMission(pedDriver:Int, boat:Int, p2:Int, p3:Int, x:Float, y:Float, z:Float, p7:Int, maxSpeed:Float, drivingStyle:Int, p10:Float,
		p11:Int):Void;
	static function TaskAimGunScripted(ped:Int, scriptTask:Int, p2:Bool, p3:Bool):Void;
	static function TaskAchieveHeading(ped:Int, heading:Float, timeout:Int):Void;
	static function TaskAimGunScriptedWithTarget(p0:Int, p1:Int, p2:Float, p3:Float, p4:Float, p5:Int, p6:Bool, p7:Bool):Void;
	static function TaskClearLookAt(ped:Int):Void;
	static function TaskChatToPed(ped:Int, target:Int, p2:Int, p3:Float, p4:Float, p5:Float, p6:Float, p7:Float):Void;
	static function TaskAgitatedAction(ped:Int, ped2:Int):Void;
	static function TaskClimb(ped:Int, unused:Bool):Void;
	static function TaskClimbLadder(ped:Int, p1:Int):Void;
	static function TaskArrestPed(ped:Int, target:Int):Void;
	static function TaskCombatHatedTargetsAroundPedTimed(p0:Int, p1:Float, p2:Int, p3:Int):Void;
	static function TaskClearDefensiveArea(p0:Int):Void;
	static function TaskCombatHatedTargetsAroundPed(ped:Int, radius:Float, p2:Int):Void;
	static function TaskCombatPed(ped:Int, targetPed:Int, p2:Int, p3:Int):Void;
	static function TaskCombatHatedTargetsInArea(ped:Int, x:Float, y:Float, z:Float, radius:Float, p5:Int):Void;
	static function TaskCombatPedTimed(p0:Int, ped:Int, p2:Int, p3:Int):Void;
	static function TaskDriveBy(driverPed:Int, targetPed:Int, targetVehicle:Int, targetX:Float, targetY:Float, targetZ:Float, distanceToShoot:Float,
		pedAccuracy:Int, p8:Bool, firingPattern:Int):Void;
	static function TaskCower(ped:Int, duration:Int):Void;
	static function TaskExtendRoute(x:Float, y:Float, z:Float):Void;
	static function TaskEveryoneLeaveVehicle(vehicle:Int):Void;
	static function TaskEnterVehicle(ped:Int, vehicle:Int, timeout:Int, seatIndex:Int, speed:Float, flag:Int, p6:Int):Void;
	static function TaskFollowToOffsetOfEntity(ped:Int, entity:Int, offsetX:Float, offsetY:Float, offsetZ:Float, movementSpeed:Float, timeout:Int,
		stoppingRange:Float, persistFollowing:Bool):Void;
	static function TaskFlushRoute():Void;
	static function TaskExitCover(p0:Int, p1:Int, p2:Float, p3:Float, p4:Float):Void;
	static function TaskGoStraightToCoord(ped:Int, x:Float, y:Float, z:Float, speed:Float, timeout:Int, targetHeading:Float, distanceToSlide:Float):Void;
	static function TaskFollowNavMeshToCoord(ped:Int, x:Float, y:Float, z:Float, speed:Float, timeout:Int, stoppingRange:Float, persistFollowing:Bool,
		unk:Float):Void;
	static function TaskFollowPointRoute(ped:Int, speed:Float, unknown:Int):Void;
	static function TaskFollowNavMeshToCoordAdvanced(ped:Int, x:Float, y:Float, z:Float, speed:Float, timeout:Int, unkFloat:Float, unkInt:Int, unkX:Float,
		unkY:Float, unkZ:Float, unk_40000f:Float):Void;
	static function TaskFollowWaypointRecording(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int):Void;
	static function TaskGetOffBoat(ped:Int, boat:Int):Void;
	static function TaskForceMotionState(ped:Int, state:Int, p2:Bool):Void;
	static function TaskGoStraightToCoordRelativeToEntity(entity1:Int, entity2:Int, p2:Float, p3:Float, p4:Float, p5:Float, p6:Int):Void;
	static function TaskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle:Int, goToLocationX:Float, goToLocationY:Float, goToLocationZ:Float,
		focusLocationX:Float, focusLocationY:Float, focusLocationZ:Float, speed:Float, shootAtEnemies:Bool, distanceToStopAt:Float, noRoadsDistance:Float,
		unkTrue:Bool, unkFlag:Int, aimingFlag:Int, firingPattern:Int):Void;
	static function TaskGoToEntityWhileAimingAtCoord(p0:Int, p1:Int, p2:Float, p3:Float, p4:Float, p5:Float, p6:Bool, p7:Float, p8:Float, p9:Bool, p10:Bool,
		p11:Int):Void;
	static function TaskGoToCoordAnyMeans(ped:Int, x:Float, y:Float, z:Float, speed:Float, p5:Int, p6:Bool, walkingStyle:Int, p8:Float):Void;
	static function TaskGoToCoordAnyMeansExtraParams(ped:Int, x:Float, y:Float, z:Float, speed:Float, p5:Int, p6:Bool, walkingStyle:Int, p8:Float, p9:Int,
		p10:Int, p11:Int):Void;
	static function TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped:Int, x:Float, y:Float, z:Float, speed:Float, p5:Int, p6:Bool, walkingStyle:Int,
		p8:Float, p9:Int, p10:Int, p11:Int, p12:Int):Void;
	static function TaskGotoEntityOffset(ped:Int, p1:Int, p2:Int, x:Float, y:Float, z:Float, duration:Int):Void;
	static function TaskGoToEntityWhileAimingAtEntity(ped:Int, entityToWalkTo:Int, entityToAimAt:Int, speed:Float, shootatEntity:Bool, p5:Float, p6:Float,
		p7:Bool, p8:Bool, firingPattern:Int):Void;
	static function TaskGoToCoordWhileAimingAtCoord(ped:Int, x:Float, y:Float, z:Float, aimAtX:Float, aimAtY:Float, aimAtZ:Float, moveSpeed:Float, shoot:Bool,
		p9:Float, p10:Float, p11:Bool, flags:Int, p13:Bool, firingPattern:Int):Void;
	static function TaskGoToCoordWhileAimingAtEntity(p0:Int, p1:Float, p2:Float, p3:Float, p4:Int, p5:Float, p6:Bool, p7:Float, p8:Float, p9:Bool, p10:Int,
		p11:Bool, p12:Int, p13:Int):Void;
	static function TaskGuardSphereDefensiveArea(p0:Int, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Int, p7:Float, p8:Float, p9:Float,
		p10:Float):Void;
	static function TaskGuardAssignedDefensiveArea(p0:Int, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Int):Void;
	static function TaskGotoEntityAiming(ped:Int, target:Int, distanceToStopAt:Float, StartAimingDist:Float):Void;
	static function TaskGoToEntity(entity:Int, target:Int, duration:Int, distance:Float, speed:Float, p5:Float, p6:Int):Void;
	static function TaskHeliChase(pilot:Int, entityToFollow:Int, x:Float, y:Float, z:Float):Void;
	static function TaskHeliEscortHeli(pilot:Int, heli1:Int, heli2:Int, p3:Float, p4:Float, p5:Float):Void;
	static function TaskJump(ped:Int, unused:Bool):Void;
	static function TaskLookAtCoord(entity:Int, x:Float, y:Float, z:Float, duration:Int, p5:Int, p6:Int):Void;
	static function TaskGotoEntityOffsetXy(ped:Int, entity:Int, duration:Int, xOffset:Float, yOffset:Float, zOffset:Float, moveBlendRatio:Float,
		useNavmesh:Bool):Void;
	static function TaskGuardCurrentPosition(p0:Int, p1:Float, p2:Float, p3:Bool):Void;
	static function TaskHandsUp(ped:Int, duration:Int, facingPed:Int, p3:Int, p4:Bool):Void;
	static function TaskMoveNetworkByName(ped:Int, task:String, multiplier:Float, p3:Bool, animDict:String, flags:Int):Void;
	static function TaskLeaveAnyVehicle(ped:Int, p1:Int, flags:Int):Void;
	static function TaskParachute(ped:Int, p1:Bool):Void;
	static function TaskLookAtEntity(ped:Int, lookAt:Int, duration:Int, unknown1:Int, unknown2:Int):Void;
	static function TaskHeliMission(pilot:Int, aircraft:Int, targetVehicle:Int, targetPed:Int, destinationX:Float, destinationY:Float, destinationZ:Float,
		missionFlag:Int, maxSpeed:Float, landingRadius:Float, targetHeading:Float, unk1:Int, unk2:Int, unk3:Float, landingFlags:Int):Void;
	static function TaskPause(ped:Int, ms:Int):Void;
	static function TaskLeaveVehicle(ped:Int, vehicle:Int, flags:Int):Void;
	static function TaskPerformSequence(ped:Int, taskSequenceId:Int):Void;
	static function TaskMoveNetworkAdvancedByName(ped:Int, p1:String, p2:Float, p3:Float, p4:Float, p5:Float, p6:Float, p7:Float, p8:Int, p9:Float, p10:Bool,
		animDict:String, flags:Int):Void;
	static function TaskMoveNetworkByNameWithInitParams(ped:Int, p1:String, data:Int, p3:Float, p4:Bool, animDict:String, flags:Int):Void;
	static function TaskPatrol(ped:Int, p1:String, p2:Int, p3:Bool, p4:Bool):Void;
	static function TaskOpenVehicleDoor(ped:Int, vehicle:Int, timeOut:Int, seat:Int, speed:Float):Void;
	static function TaskPlaneChase(pilot:Int, entityToFollow:Int, x:Float, y:Float, z:Float):Void;
	static function TaskParachuteToTarget(ped:Int, x:Float, y:Float, z:Float):Void;
	static function TaskPerformSequenceFromProgress(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function TaskPedSlideToCoordHdgRate(ped:Int, x:Float, y:Float, z:Float, heading:Float, p5:Float, p6:Float):Void;
	static function TaskPlaneLand(pilot:Int, plane:Int, runwayStartX:Float, runwayStartY:Float, runwayStartZ:Float, runwayEndX:Float, runwayEndY:Float,
		runwayEndZ:Float):Void;
	static function TaskPlaneGotoPreciseVtol(ped:Int, vehicle:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int, p7:Int, p8:Int, p9:Int):Void;
	static function TaskPerformSequenceLocally(ped:Int, taskSequenceId:Int):Void;
	static function TaskPedSlideToCoord(ped:Int, x:Float, y:Float, z:Float, heading:Float, duration:Float):Void;
	static function TaskPlaneTaxi(pilot:Int, aircraft:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Int):Void;
	static function TaskPlantBomb(ped:Int, x:Float, y:Float, z:Float, heading:Float):Void;
	static function TaskPlaneMission(pilot:Int, aircraft:Int, targetVehicle:Int, targetPed:Int, destinationX:Float, destinationY:Float, destinationZ:Float,
		missionFlag:Int, angularDrag:Float, unk:Float, targetHeading:Float, maxZ:Float, minZ:Float):Void;
	static function TaskPutPedDirectlyIntoCover(ped:Int, x:Float, y:Float, z:Float, timeout:Int, p5:Bool, p6:Float, p7:Bool, p8:Bool, p9:Int, p10:Bool):Void;
	static function TaskPlayAnim(ped:Int, animDictionary:String, animationName:String, blendInSpeed:Float, blendOutSpeed:Float, duration:Int, flag:Int,
		playbackRate:Float, lockX:Bool, lockY:Bool, lockZ:Bool):Void;
	static function TaskRappelFromHeli(ped:Int, unused:Float):Void;
	static function TaskPlayPhoneGestureAnimation(ped:Int, animDict:String, animation:String, boneMaskType:String, p4:Float, p5:Float, p6:Bool, p7:Bool):Void;
	static function TaskPutPedDirectlyIntoMelee(ped:Int, meleeTarget:Int, p2:Float, p3:Float, p4:Float, p5:Bool):Void;
	static function TaskPlayAnimAdvanced(ped:Int, animDict:String, animName:String, posX:Float, posY:Float, posZ:Float, rotX:Float, rotY:Float, rotZ:Float,
		animEnterSpeed:Float, animExitSpeed:Float, duration:Int, flag:Int, animTime:Float, p14:Int, p15:Int):Void;
	static function TaskSeekCoverFromPed(ped:Int, target:Int, duration:Int, p3:Bool):Void;
	static function TaskRappelDownWall(ped:Int, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, minZ:Float, ropeId:Int, clipset:String,
		p10:Int):Void;
	static function TaskScriptedAnimation(ped:Int, p1:Int, p2:Int, p3:Int, p4:Float, p5:Float):Void;
	static function TaskReactAndFleePed(ped:Int, fleeTarget:Int):Void;
	static function TaskReloadWeapon(ped:Int, unused:Bool):Void;
	static function TaskSeekCoverFromPos(ped:Int, x:Float, y:Float, z:Float, duration:Int, p5:Bool):Void;
	static function TaskSetBlockingOfNonTemporaryEvents(ped:Int, toggle:Bool):Void;
	static function TaskSeekCoverToCoverPoint(p0:Int, p1:Int, p2:Float, p3:Float, p4:Float, p5:Int, p6:Bool):Void;
	static function TaskSetDecisionMaker(ped:Int, p1:Int):Void;
	static function TaskSeekCoverToCoords(ped:Int, x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, p7:Int, p8:Bool):Void;
	static function TaskShockingEventReact(ped:Int, eventHandle:Int):Void;
	static function TaskSetSphereDefensiveArea(p0:Int, p1:Float, p2:Float, p3:Float, p4:Float):Void;
	static function TaskShootAtCoord(ped:Int, x:Float, y:Float, z:Float, duration:Int, firingPattern:Int):Void;
	static function TaskSkyDive(ped:Int):Void;
	static function TaskShuffleToNextVehicleSeat(ped:Int, vehicle:Int):Void;
	static function TaskShootAtEntity(entity:Int, target:Int, duration:Int, firingPattern:Int):Void;
	static function TaskSmartFleeCoord(ped:Int, x:Float, y:Float, z:Float, distance:Float, time:Int, p6:Bool, p7:Bool):Void;
	static function TaskSmartFleePed(ped:Int, fleeTarget:Int, distance:Float, fleeTime:Int, p4:Bool, p5:Bool):Void;
	static function TaskStandStill(ped:Int, time:Int):Void;
	static function TaskStandGuard(ped:Int, x:Float, y:Float, z:Float, heading:Float, scenarioName:String):Void;
	static function TaskStayInCover(ped:Int):Void;
	static function TaskStartScenarioInPlace(ped:Int, scenarioName:String, unkDelay:Int, playEnterAnim:Bool):Void;
	static function TaskStartScenarioAtPosition(ped:Int, scenarioName:String, x:Float, y:Float, z:Float, heading:Float, duration:Int, sittingScenario:Bool,
		teleport:Bool):Void;
	static function TaskStealthKill(killer:Int, target:Int, actionType:Int, p3:Float, p4:Int):Void;
	static function TaskSubmarineGotoAndStop(p0:Int, submarine:Int, x:Float, y:Float, z:Float, p5:Int):Void;
	static function TaskStopPhoneGestureAnimation(ped:Int):Void;
	static function TaskSweepAimEntity(ped:Int, anim:String, p2:String, p3:String, p4:String, p5:Int, vehicle:Int, p7:Float, p8:Float):Void;
	static function TaskThrowProjectile(ped:Int, x:Float, y:Float, z:Float):Void;
	static function TaskSwapWeapon(ped:Int, p1:Bool):Void;
	static function TaskSweepAimPosition(p0:Int, p1:Int, p2:Int, p3:Int, p4:Int, p5:Int, p6:Float, p7:Float, p8:Float, p9:Float, p10:Float):Void;
	static function TaskSynchronizedScene(ped:Int, scene:Int, animDictionary:String, animationName:String, speed:Float, speedMultiplier:Float, duration:Int,
		flag:Int, playbackRate:Float, p9:Int):Void;
	static function TaskTurnPedToFaceEntity(ped:Int, entity:Int, duration:Int):Void;
	static function TaskUseMobilePhone(ped:Int, p1:Int):Void;
	static function TaskUseNearestScenarioChainToCoordWarp(p0:Int, p1:Float, p2:Float, p3:Float, p4:Float, p5:Int):Void;
	static function TaskUseNearestScenarioChainToCoord(p0:Int, p1:Float, p2:Float, p3:Float, p4:Float, p5:Int):Void;
	static function TaskToggleDuck(p0:Bool, p1:Bool):Void;
	static function TaskTurnPedToFaceCoord(ped:Int, x:Float, y:Float, z:Float, duration:Int):Void;
	static function TaskUseNearestScenarioToCoordWarp(ped:Int, x:Float, y:Float, z:Float, radius:Float, p5:Int):Void;
	static function TaskUseMobilePhoneTimed(ped:Int, duration:Int):Void;
	static function TaskVehicleDriveToCoord(ped:Int, vehicle:Int, x:Float, y:Float, z:Float, speed:Float, p6:Int, vehicleModel:Int, drivingMode:Int,
		stopRange:Float, p10:Float):Void;
	static function TaskVehicleAimAtCoord(ped:Int, x:Float, y:Float, z:Float):Void;
	static function TaskVehicleDriveWander(ped:Int, vehicle:Int, speed:Float, drivingStyle:Int):Void;
	static function TaskUseNearestScenarioToCoord(ped:Int, x:Float, y:Float, z:Float, distance:Float, duration:Int):Void;
	static function TaskVehicleFollow(driver:Int, vehicle:Int, targetEntity:Int, speed:Float, drivingStyle:Int, minDistance:Int):Void;
	static function TaskVehicleAimAtPed(ped:Int, target:Int):Void;
	static function TaskVehicleGotoNavmesh(ped:Int, vehicle:Int, x:Float, y:Float, z:Float, speed:Float, behaviorFlag:Int, stoppingRange:Float):Void;
	static function TaskVehicleChase(driver:Int, targetEnt:Int):Void;
	static function TaskVehicleHeliProtect(pilot:Int, vehicle:Int, entityToFollow:Int, targetSpeed:Float, p4:Int, radius:Float, altitude:Int, p7:Int):Void;
	static function TaskVehicleDriveToCoordLongrange(ped:Int, vehicle:Int, x:Float, y:Float, z:Float, speed:Float, driveMode:Int, stopRange:Float):Void;
	static function TaskVehicleEscort(ped:Int, vehicle:Int, targetVehicle:Int, mode:Int, speed:Float, drivingStyle:Int, minDistance:Float, p7:Int,
		noRoadsDistance:Float):Void;
	static function TaskVehicleMissionCoorsTarget(ped:Int, vehicle:Int, x:Float, y:Float, z:Float, p5:Int, p6:Int, p7:Int, p8:Float, p9:Float,
		DriveAgainstTraffic:Bool):Void;
	static function TaskVehiclePlayAnim(vehicle:Int, animationSet:String, animationName:String):Void;
	static function TaskVehicleFollowWaypointRecording(ped:Int, vehicle:Int, WPRecording:String, p3:Int, p4:Int, p5:Int, p6:Int, p7:Float, p8:Bool,
		p9:Float):Void;
	static function TaskVehicleShootAtCoord(ped:Int, x:Float, y:Float, z:Float, p4:Float):Void;
	static function TaskVehiclePark(ped:Int, vehicle:Int, x:Float, y:Float, z:Float, heading:Float, mode:Int, radius:Float, keepEngineOn:Bool):Void;
	static function TaskVehicleMission(driver:Int, vehicle:Int, vehicleTarget:Int, missionType:Int, p4:Float, p5:Int, p6:Float, p7:Float,
		DriveAgainstTraffic:Bool):Void;
	static function TaskWanderInArea(ped:Int, x:Float, y:Float, z:Float, radius:Float, minimalLength:Int, timeBetweenWalks:Float):Void;
	static function TaskWrithe(ped:Int, target:Int, time:Int, p3:Int):Void;
	static function TaskVehicleMissionPedTarget(ped:Int, vehicle:Int, pedTarget:Int, missionType:Int, maxSpeed:Float, drivingStyle:Int, minDistance:Float,
		p7:Float, DriveAgainstTraffic:Bool):Void;
	static function TaskVehicleShootAtPed(ped:Int, target:Int, p2:Float):Void;
	static function UpdateTaskHandsUpDuration(ped:Int, duration:Int):Void;
	static function TaskWanderStandard(ped:Int, p1:Float, p2:Int):Void;
	static function TaskVehicleTempAction(driver:Int, vehicle:Int, action:Int, time:Int):Void;
	static function UncuffPed(ped:Int):Void;
	static function TaskWanderSpecific(p0:Int, p1:Int, p2:Int, p3:Int):Void;
	static function UseWaypointRecordingAsAssistedMovementRoute(name:String, p1:Bool, p2:Float, p3:Float):Void;
	static function VehicleWaypointPlaybackResume(vehicle:Int):Void;
	static function TaskWarpPedIntoVehicle(ped:Int, vehicle:Int, seatIndex:Int):Void;
	static function VehicleWaypointPlaybackPause(vehicle:Int):Void;
	static function WaypointPlaybackGetIsPaused(p0:Int):Bool;
	static function UpdateTaskSweepAimPosition(p0:Int, p1:Float, p2:Float, p3:Float):Void;
	static function UpdateTaskAimGunScriptedTarget(p0:Int, p1:Int, p2:Float, p3:Float, p4:Float, p5:Bool):Void;
	static function WaypointPlaybackResume(p0:Int, p1:Bool, p2:Int, p3:Int):Void;
	static function VehicleWaypointPlaybackOverrideSpeed(vehicle:Int, speed:Float):Void;
	static function UpdateTaskSweepAimEntity(ped:Int, entity:Int):Void;
	static function WaypointPlaybackOverrideSpeed(p0:Int, p1:Float, p2:Bool):Void;
	static function WaypointPlaybackUseDefaultSpeed(p0:Int):Void;
	static function WaypointPlaybackPause(p0:Int, p1:Bool, p2:Bool):Void;
	static function VehicleWaypointPlaybackUseDefaultSpeed(vehicle:Int):Void;
	static function WaypointPlaybackStartAimingAtCoord(p0:Int, p1:Float, p2:Float, p3:Float, p4:Bool):Void;
	static function WaypointPlaybackStartShootingAtCoord(p0:Int, p1:Float, p2:Float, p3:Float, p4:Bool, p5:Int):Void;
	static function WaypointPlaybackStopAimingOrShooting(p0:Int):Void;
	static function WaypointRecordingGetSpeedAtPoint(name:String, point:Int):Float;
	static function WaypointPlaybackStartAimingAtPed(p0:Int, p1:Int, p2:Bool):Void;
	static function WaypointRecordingGetClosestWaypoint(name:String, x:Float, y:Float, z:Float, point:Int):Bool;
	static function WaypointRecordingGetNumPoints(name:String, points:Int):Bool;
	static function WaypointPlaybackStartShootingAtPed(p0:Int, p1:Int, p2:Bool, p3:Int):Void;
	static function WaypointRecordingGetCoord(name:String, point:Int, coord:Vector3):Bool;
	static function GetWaterHeightNoWaves(x:Float, y:Float, z:Float, height:Float):Bool;
	static function AddExtraCalmingQuad(xLow:Float, yLow:Float, xHigh:Float, yHigh:Float, height:Float):Int;
	static function GetDeepOceanScaler():Float;
	static function ModifyWater(x:Float, y:Float, height:Float, radius:Float):Void;
	static function SetDeepOceanScaler(intensity:Float):Void;
	static function GetWaterHeight(x:Float, y:Float, z:Float, height:Float):Bool;
	static function ResetDeepOceanScaler():Void;
	static function TestProbeAgainstAllWater(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, flag:Int, result:Vector3):Bool;
	static function TestVerticalProbeAgainstAllWater(x:Float, y:Float, z:Float, flag:Int, height:Float):Bool;
	static function TestProbeAgainstWater(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, result:Vector3):Bool;
	static function RemoveCurrentRise(p0:Int):Void;
	static function ClearPopscheduleOverrideVehicleModel(scheduleId:Int):Void;
	static function GetHashOfMapAreaAtCoords(x:Float, y:Float, z:Float):Int;
	static function OverridePopscheduleVehicleModel(scheduleId:Int, vehicleHash:Int):Void;
	static function GetZoneFromNameId(zoneName:String):Int;
	static function GetNameOfZone(x:Float, y:Float, z:Float):String;
	static function GetZoneScumminess(zoneId:Int):Int;
	static function GetZoneAtCoords(x:Float, y:Float, z:Float):Int;
	static function GetZonePopschedule(zoneId:Int):Int;
	static function SetZoneEnabled(zoneId:Int, toggle:Bool):Void;
	static function CanUseWeaponOnParachute(weaponHash:Int):Bool;
	static function CreateAirDefenseArea(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Float, p7:Float, p8:Float, p9:Float,
		weaponHash:Int):Int;
	static function AddAmmoToPedByType(ped:Int, ammoType:Int, ammo:Int):Void;
	static function AddAmmoToPed(ped:Int, weaponHash:Int, ammo:Int):Void;
	static function ClearEntityLastWeaponDamage(entity:Int):Void;
	static function ClearPedLastWeaponDamage(ped:Int):Void;
	static function DoesAirDefenseZoneExist(zoneId:Int):Bool;
	static function ExplodeProjectiles(ped:Int, weaponHash:Int, p2:Bool):Void;
	static function CreateWeaponObject(weaponHash:Int, ammoCount:Int, x:Float, y:Float, z:Float, showWorldModel:Bool, scale:Float, p7:Int):Dynamic;
	static function CreateAirDefenseSphere(x:Float, y:Float, z:Float, radius:Float, p4:Float, p5:Float, p6:Float, weaponHash:Int):Int;
	static function GetAmmoInPedWeapon(ped:Int, weaponhash:Int):Int;
	static function DoesWeaponTakeWeaponComponent(weaponHash:Int, componentHash:Int):Bool;
	static function GetAmmoInClip(ped:Int, weaponHash:Int, ammo:Int):Bool;
	static function EnableLaserSightRendering(toggle:Bool):Void;
	static function GetIsPedGadgetEquipped(ped:Int, gadgetHash:Int):Bool;
	static function GetCurrentPedWeaponEntityIndex(ped:Int):Int;
	static function GetBestPedWeapon(ped:Int, p1:Bool):Int;
	static function FireAirDefenseWeapon(zoneId:Int, x:Float, y:Float, z:Float):Void;
	static function GetMaxAmmoInClip(ped:Int, weaponHash:Int, p2:Bool):Int;
	static function GetMaxAmmo(ped:Int, weaponHash:Int, ammo:Int):Bool;
	static function GetPedAmmoTypeFromWeapon(ped:Int, weaponHash:Int):Int;
	static function GetCurrentPedVehicleWeapon(ped:Int, weaponHash:Int):Bool;
	static function GetCurrentPedWeapon(ped:Int, weaponHash:Int, p2:Bool):Bool;
	static function GetMaxRangeOfCurrentPedWeapon(ped:Int):Float;
	static function GetPedWeaponLiveryColor(ped:Int, weaponHash:Int, camoComponentHash:Int):Int;
	static function GetPedAmmoTypeFromWeapon2(ped:Int, weaponHash:Int):Int;
	static function GetLockonDistanceOfCurrentPedWeapon(ped:Int):Float;
	static function GetMaxAmmoByType(ped:Int, ammoType:Int, ammo:Int):Bool;
	static function GetPedAmmoByType(ped:Int, ammoType:Int):Int;
	static function GetPedWeapontypeInSlot(ped:Int, weaponSlot:Int):Int;
	static function GetPedWeaponTintIndex(ped:Int, weaponHash:Int):Int;
	static function GetPedLastWeaponImpactCoord(ped:Int, coords:Vector3):Bool;
	static function GetWeaponClipSize(weaponHash:Int):Int;
	static function GetWeaponComponentVariantExtraComponentModel(componentHash:Int, extraComponentIndex:Int):Int;
	static function GetSelectedPedWeapon(ped:Int):Int;
	static function GetWeaponComponentTypeModel(componentHash:Int):Int;
	static function GetWeaponObjectFromPed(ped:Int, p1:Bool):Dynamic;
	static function GetWeaponComponentVariantExtraComponentCount(componentHash:Int):Int;
	static function GetWeaponComponentHudStats(componentHash:Int, outData:Int):Bool;
	static function GetWeaponDamage(weaponHash:Int, componentHash:Int):Float;
	static function GetWeaponObjectTintIndex(weapon:Dynamic):Int;
	static function GetWeaponDamageType(weaponHash:Int):Int;
	static function GetWeapontypeSlot(weaponHash:Int):Int;
	static function GetWeaponHudStats(weaponHash:Int, outData:Int):Bool;
	static function GetWeaponObjectLiveryColor(weaponObject:Dynamic, camoComponentHash:Int):Int;
	static function GetWeaponTintCount(weaponHash:Int):Int;
	static function GetWeaponTimeBetweenShots(weaponHash:Int):Float;
	static function GetWeapontypeModel(weaponHash:Int):Int;
	static function GiveDelayedWeaponToPed(ped:Int, weaponHash:Int, ammoCount:Int, bForceInHand:Bool):Void;
	static function GiveLoadoutToPed(ped:Int, loadoutHash:Int):Void;
	static function GiveWeaponComponentToWeaponObject(weaponObject:Dynamic, addonHash:Int):Void;
	static function GiveWeaponObjectToPed(weaponObject:Dynamic, ped:Int):Void;
	static function GiveWeaponToPed(ped:Int, weaponHash:Int, ammoCount:Int, isHidden:Bool, bForceInHand:Bool):Void;
	static function GetWeapontypeGroup(weaponHash:Int):Int;
	static function HasPedGotWeapon(ped:Int, weaponHash:Int, p2:Bool):Bool;
	static function HasEntityBeenDamagedByWeapon(entity:Int, weaponHash:Int, weaponType:Int):Bool;
	static function HasPedGotWeaponComponent(ped:Int, weaponHash:Int, componentHash:Int):Bool;
	static function GiveWeaponComponentToPed(ped:Int, weaponHash:Int, componentHash:Int):Void;
	static function HasWeaponGotWeaponComponent(weapon:Dynamic, addonHash:Int):Bool;
	static function HasVehicleGotProjectileAttached(driver:Int, vehicle:Int, weaponHash:Int, p3:Int):Bool;
	static function HasWeaponAssetLoaded(weaponHash:Int):Bool;
	static function HasPedBeenDamagedByWeapon(ped:Int, weaponHash:Int, weaponType:Int):Bool;
	static function IsAnyAirDefenseZoneInsideSphere(x:Float, y:Float, z:Float, radius:Float, SphereIndex:Int):Bool;
	static function IsPedCurrentWeaponSilenced(ped:Int):Bool;
	static function IsFlashLightOn(ped:Int):Bool;
	static function HidePedWeaponForScriptedCutscene(ped:Int, toggle:Bool):Void;
	static function IsPedWeaponComponentActive(ped:Int, weaponHash:Int, componentHash:Int):Bool;
	static function IsPedArmed(ped:Int, typeFlags:Int):Bool;
	static function IsWeaponValid(weaponHash:Int):Bool;
	static function IsPedWeaponReadyToShoot(ped:Int):Bool;
	static function MakePedReload(ped:Int):Bool;
	static function RemoveAllAirDefenseZones():Void;
	static function RemoveAirDefenseZone(zoneId:Int):Bool;
	static function RemoveWeaponFromPed(ped:Int, weaponHash:Int):Void;
	static function RefillAmmoInstantly(ped:Int):Bool;
	static function RemoveWeaponComponentFromPed(ped:Int, weaponHash:Int, componentHash:Int):Void;
	static function RequestWeaponHighDetailModel(weaponObject:Int):Void;
	static function RemoveAllPedWeapons(ped:Int, p1:Bool):Void;
	static function SetCanPedEquipAllWeapons(ped:Int, toggle:Bool):Void;
	static function RemoveWeaponAsset(weaponHash:Int):Void;
	static function RequestWeaponAsset(weaponHash:Int, p1:Int, p2:Int):Void;
	static function RemoveAllProjectilesOfType(weaponHash:Int, explode:Bool):Void;
	static function RemoveWeaponComponentFromWeaponObject(weaponObject:Dynamic, addonHash:Int):Void;
	static function SetAmmoInClip(ped:Int, weaponHash:Int, ammo:Int):Bool;
	static function SetCanPedEquipWeapon(ped:Int, weaponHash:Int, toggle:Bool):Void;
	static function SetCurrentPedWeapon(ped:Int, weaponHash:Int, bForceInHand:Bool):Void;
	static function SetFlashLightEnabled(ped:Int, toggle:Bool):Void;
	static function SetPedAmmo(ped:Int, weaponHash:Int, ammo:Int):Void;
	static function SetCurrentPedVehicleWeapon(ped:Int, weaponHash:Int):Bool;
	static function SetPedAmmoByType(ped:Int, ammoType:Int, ammo:Int):Void;
	static function SetFlashLightFadeDistance(distance:Float):Int;
	static function SetPedAmmoToDrop(ped:Int, ammo:Int):Void;
	static function SetPedDropsInventoryWeapon(ped:Int, weaponHash:Int, xOffset:Float, yOffset:Float, zOffset:Float, ammoCount:Int):Void;
	static function SetPedCurrentWeaponVisible(ped:Int, visible:Bool, deselectWeapon:Bool, p3:Bool, p4:Bool):Void;
	static function SetPedDropsWeapon(ped:Int):Void;
	static function SetPedChanceOfFiringBlanks(ped:Int, xBias:Float, yBias:Float):Void;
	static function SetPedDropsWeaponsWhenDead(ped:Int, toggle:Bool):Void;
	static function SetPedInfiniteAmmo(ped:Int, toggle:Bool, weaponHash:Int):Void;
	static function SetPedGadget(ped:Int, gadgetHash:Int, p2:Bool):Void;
	static function SetPedWeaponLiveryColor(ped:Int, weaponHash:Int, camoComponentHash:Int, colorIndex:Int):Void;
	static function SetPedInfiniteAmmoClip(ped:Int, toggle:Bool):Void;
	static function SetPedShootOrdnanceWeapon(ped:Int, p1:Float):Dynamic;
	static function SetPedWeaponTintIndex(ped:Int, weaponHash:Int, tintIndex:Int):Void;
	static function SetPickupAmmoAmountScaler(p0:Float):Void;
	static function SetPlayerAirDefenseZoneFlag(player:Int, zoneId:Int, enable:Bool):Void;
	static function SetWeaponAnimationOverride(ped:Int, animStyle:Int):Void;
	static function SetWeaponExplosionRadiusMultiplier(weaponHash:Int, multiplier:Float):Void;
	static function SetWeaponDamageModifier(weaponHash:Int, damageMultiplier:Float):Void;
	static function SetWeaponObjectLiveryColor(weaponObject:Dynamic, camoComponentHash:Int, colorIndex:Int):Void;
	static function SetWeaponObjectTintIndex(weapon:Dynamic, tintIndex:Int):Void;
	static function AddVehiclePhoneExplosiveDevice(vehicle:Int):Void;
	static function AddRoadNodeSpeedZone(x:Float, y:Float, z:Float, radius:Float, speed:Float, p5:Bool):Int;
	static function AddVehicleUpsidedownCheck(vehicle:Int):Void;
	static function AddVehicleCombatAngledAvoidanceArea(p0:Float, p1:Float, p2:Float, p3:Float, p4:Float, p5:Float, p6:Float):Int;
	static function AddVehicleStuckCheckWithWarp(p0:Int, p1:Float, p2:Int, p3:Bool, p4:Bool, p5:Bool, p6:Int):Void;
	static function AreAnyVehicleSeatsFree(vehicle:Int):Bool;
	static function AllowAmbientVehiclesToAvoidAdverseConditions(vehicle:Int):Void;
	static function ArePlanePropellersIntact(plane:Int):Bool;
	static function AreAllVehicleWindowsIntact(vehicle:Int):Bool;
	static function AreHeliStubWingsDeployed(vehicle:Int):Bool;
	static function AreOutriggerLegsDeployed(vehicle:Int):Bool;
	static function ArePlaneWingsIntact(plane:Int):Bool;
	static function AreBombBayDoorsOpen(aircraft:Int):Bool;
	static function AttachContainerToHandlerFrame(handler:Int, container:Int):Void;
	static function AttachVehicleToTrailer(vehicle:Int, trailer:Int, radius:Float):Void;
	static function AttachVehicleOnToTrailer(vehicle:Int, trailer:Int, offsetX:Float, offsetY:Float, offsetZ:Float, coordsX:Float, coordsY:Float,
		coordsZ:Float, rotationX:Float, rotationY:Float, rotationZ:Float, disableColls:Float):Void;
	static function AttachEntityToCargobob(vehicle:Int, entity:Int, p2:Int, x:Float, y:Float, z:Float):Void;
	static function AttachVehicleToCargobob(cargobob:Int, vehicle:Int, vehicleBoneIndex:Int, x:Float, y:Float, z:Float):Void;
	static function CanAnchorBoatHere(vehicle:Int):Bool;
	static function BringVehicleToHalt(vehicle:Int, distance:Float, duration:Int, bControlVerticalVelocity:Bool):Void;
	static function CanAnchorBoatHere2(vehicle:Int):Bool;
	static function CanShuffleSeat(vehicle:Int, seatIndex:Int):Bool;
	static function ClearVehiclePhoneExplosiveDevice():Void;
	static function AttachVehicleToTowTruck(towTruck:Int, vehicle:Int, rear:Bool, hookOffsetX:Float, hookOffsetY:Float, hookOffsetZ:Float):Void;
	static function ClearVehicleCustomSecondaryColour(vehicle:Int):Void;
	static function ClearLastDrivenVehicle():Void;
	static function ClearVehicleCustomPrimaryColour(vehicle:Int):Void;
	static function CloseBombBayDoors(vehicle:Int):Void;
	static function ClearVehicleRouteHistory(vehicle:Int):Void;
	static function CopyVehicleDamages(sourceVehicle:Int, targetVehicle:Int):Void;
	static function CreateMissionTrain(variation:Int, x:Float, y:Float, z:Float, direction:Bool):Int;
	static function CreateVehicle(modelHash:Int, x:Float, y:Float, z:Float, heading:Float, isNetwork:Bool, netMissionEntity:Bool):Int;
	static function DeleteAllTrains():Void;
	static function ControlLandingGear(vehicle:Int, state:Int):Void;
	static function DeleteMissionTrain(train:Int):Void;
	static function CreatePickUpRopeForCargobob(cargobob:Int, state:Int):Void;
	static function DetachContainerFromHandlerFrame(vehicle:Int):Void;
	static function CreateScriptVehicleGenerator(x:Float, y:Float, z:Float, heading:Float, p4:Float, p5:Float, modelHash:Int, p7:Int, p8:Int, p9:Int, p10:Int,
		p11:Bool, p12:Bool, p13:Bool, p14:Bool, p15:Bool, p16:Int):Int;
	static function DetachEntityFromCargobob(vehicle:Int, entity:Int):Int;
	static function DetachVehicleFromAnyCargobob(vehicle:Int):Bool;
	static function DeleteScriptVehicleGenerator(vehicleGenerator:Int):Void;
	static function DetonateVehiclePhoneExplosiveDevice():Void;
	static function DeleteVehicle(vehicle:Int):Void;
	static function DetachVehicleFromCargobob(cargobob:Int, vehicle:Int):Void;
	static function DetachVehicleFromAnyTowTruck(vehicle:Int):Bool;
	static function DisablePlaneAileron(vehicle:Int, p1:Bool, p2:Bool):Void;
	static function DisableVehicleTurretMovementThisFrame(vehicle:Int):Void;
	static function DetachVehicleFromTrailer(vehicle:Int):Void;
	static function DetachVehicleFromTowTruck(towTruck:Int, vehicle:Int):Void;
	static function DoesCargobobHavePickUpRope(cargobob:Int):Bool;
	static function DisableVehicleNeonLights(vehicle:Int, toggle:Bool):Void;
	static function DisableVehicleWorldCollision(vehicle:Int):Void;
	static function DisableIndividualPlanePropeller(vehicle:Int, propeller:Int):Void;
	static function DisableVehicleWeapon(disabled:Bool, weaponHash:Int, vehicle:Int, owner:Int):Void;
	static function DoesExtraExist(vehicle:Int, extraId:Int):Bool;
	static function DoesCargobobHavePickupMagnet(cargobob:Int):Bool;
	static function DoesScriptVehicleGeneratorExist(vehicleGenerator:Int):Bool;
	static function DoesVehicleExistWithDecorator(decorator:String):Bool;
	static function DoesVehicleHaveRoof(vehicle:Int):Bool;
	static function DoesVehicleAllowRappel(vehicle:Int):Bool;
	static function DoesVehicleHaveWeapons(vehicle:Int):Bool;
	static function DoesVehicleHaveStuckVehicleCheck(vehicle:Int):Bool;
	static function DoesVehicleHaveSearchlight(vehicle:Int):Bool;
	static function DoesVehicleHaveLandingGear(vehicle:Int):Bool;
	static function EjectJb700Roof(vehicle:Int, x:Float, y:Float, z:Float):Void;
	static function DoesVehicleTyreExist(vehicle:Int, tyreIndex:Int):Bool;
	static function ExplodeVehicle(vehicle:Int, isAudible:Bool, isInvisible:Bool):Void;
	static function FindRandomPointInSpace(ped:Int):Vector3;
	static function FindVehicleCarryingThisEntity(entity:Int):Int;
	static function GetAllVehicles(vehArray:Int):Int;
	static function FixVehicleWindow(vehicle:Int, windowIndex:Int):Void;
	static function ExplodeVehicleInCutscene(vehicle:Int, p1:Bool):Void;
	static function GetBoatBoomPositionRatio2(vehicle:Int, p1:Bool):Void;
	static function ForcePlaybackRecordedVehicleUpdate(vehicle:Int, p1:Bool):Void;
	static function ForceSubmarineSurfaceMode(vehicle:Int, toggle:Bool):Void;
	static function GetBoatVehicleModelAgility(modelHash:Int):Float;
	static function GetClosestVehicle(x:Float, y:Float, z:Float, radius:Float, modelHash:Int, flags:Int):Int;
	static function GetBoatBoomPositionRatio(vehicle:Int):Float;
	static function GetBoatBoomPositionRatio3(vehicle:Int, p1:Bool):Void;
	static function GetCurrentPlaybackForVehicle(vehicle:Int):Int;
	static function GetCanVehicleJump(vehicle:Int):Bool;
	static function GetCargobobHookPosition(cargobob:Int):Vector3;
	static function GetDoesVehicleHaveTombstone(vehicle:Int):Bool;
	static function GetDisplayNameFromVehicleModel(modelHash:Int):String;
	static function GetEntityAttachedToTowTruck(towTruck:Int):Int;
	static function GetConvertibleRoofState(vehicle:Int):Int;
	static function GetEntryPositionOfDoor(vehicle:Int, doorIndex:Int):Vector3;
	static function GetDriftTyresEnabled(vehicle:Int):Bool;
	static function GetHeliTailBoomHealth(vehicle:Int):Float;
	static function GetHasRocketBoost(vehicle:Int):Bool;
	static function GetEntityAttachedToCargobob(vehicle:Int):Int;
	static function GetHeliTailRotorHealth(vehicle:Int):Float;
	static function GetHeliMainRotorHealth(vehicle:Int):Float;
	static function GetHasRetractableWheels(vehicle:Int):Bool;
	static function GetIsBoatCapsized(vehicle:Int):Bool;
	static function GetHydraulicWheelValue(vehicle:Int, wheelId:Int):Float;
	static function GetIsDoorValid(vehicle:Int, doorIndex:Int):Bool;
	static function GetIsRightVehicleHeadlightDamaged(vehicle:Int):Bool;
	static function GetIsLeftVehicleHeadlightDamaged(vehicle:Int):Bool;
	static function GetIsVehicleEmpDisabled(vehicle:Int):Bool;
	static function GetIsVehicleEngineRunning(vehicle:Int):Bool;
	static function GetIsVehicleShuntBoostActive(vehicle:Int):Bool;
	static function GetIsVehiclePrimaryColourCustom(vehicle:Int):Bool;
	static function GetIsVehicleSecondaryColourCustom(vehicle:Int):Bool;
	static function GetLandingGearState(vehicle:Int):Int;
	static function GetIsWheelsLoweredStateActive(vehicle:Int):Bool;
	static function GetLastDrivenVehicle():Int;
	static function GetModSlotName(vehicle:Int, modType:Int):String;
	static function GetLastPedInVehicleSeat(vehicle:Int, seatIndex:Int):Int;
	static function GetLastRammedVehicle(vehicle:Int):Int;
	static function GetNumModKits(vehicle:Int):Int;
	static function GetNumberOfVehicleDoors(vehicle:Int):Int;
	static function GetModTextLabel(vehicle:Int, modType:Int, modValue:Int):String;
	static function GetMakeNameFromVehicleModel(modelHash:Int):String;
	static function GetLiveryName(vehicle:Int, liveryIndex:Int):String;
	static function GetNumberOfVehicleColours(vehicle:Int):Int;
	static function GetNumModColors(paintType:Int, p1:Bool):Int;
	static function GetNumVehicleMods(vehicle:Int, modType:Int):Int;
	static function GetPedInVehicleSeat(vehicle:Int, seatIndex:Int):Int;
	static function GetNumVehicleWindowTints():Int;
	static function GetPedUsingVehicleDoor(vehicle:Int, doorIndex:Int):Int;
	static function GetRandomVehicleBackBumperInSphere(p0:Float, p1:Float, p2:Float, p3:Float, p4:Int, p5:Int, p6:Int):Int;
	static function GetNumberOfVehicleNumberPlates():Int;
	static function GetPositionOfVehicleRecordingAtTime(recording:Int, time:Float, script:String):Vector3;
	static function GetRotationOfVehicleRecordingIdAtTime(id:Int, time:Float):Vector3;
	static function GetPositionInRecording(vehicle:Int):Float;
	static function GetRandomVehicleFrontBumperInSphere(p0:Float, p1:Float, p2:Float, p3:Float, p4:Int, p5:Int, p6:Int):Int;
	static function GetRandomVehicleInSphere(x:Float, y:Float, z:Float, radius:Float, modelHash:Int, flags:Int):Int;
	static function GetTimePositionInRecording(vehicle:Int):Float;
	static function GetPositionOfVehicleRecordingIdAtTime(id:Int, time:Float):Vector3;
	static function GetRotationOfVehicleRecordingAtTime(recording:Int, time:Float, script:String):Vector3;
	static function GetTotalDurationOfVehicleRecording(recording:Int, script:String):Float;
	static function GetRandomVehicleModelInMemory(p0:Bool, modelHash:Int, successIndicator:Int):Void;
	static function GetSubmarineIsBelowFirstCrushDepth(submarine:Int):Bool;
	static function GetSubmarineCrushDepthWarningState(submarine:Int):Int;
	static function GetTrainCarriage(train:Int, trailerNumber:Int):Int;
	static function GetVehicleAttachedToCargobob(cargobob:Int):Int;
	static function GetTotalDurationOfVehicleRecordingId(id:Int):Float;
	static function GetTyreWearMultiplier(vehicle:Int, wheelIndex:Int):Float;
	static function GetVehicleAcceleration(vehicle:Int):Float;
	static function GetVehicleBombCount(aircraft:Int):Int;
	static function GetTyreHealth(vehicle:Int, wheelIndex:Int):Float;
	static function GetVehicleCanActivateParachute(vehicle:Int):Bool;
	static function GetVehicleClass(vehicle:Int):Int;
	static function GetVehicleClassEstimatedMaxSpeed(vehicleClass:Int):Float;
	static function GetVehicleBodyHealth(vehicle:Int):Float;
	static function GetVehicleClassMaxAcceleration(vehicleClass:Int):Float;
	static function GetVehicleClassFromName(modelHash:Int):Int;
	static function GetVehicleClassMaxAgility(vehicleClass:Int):Float;
	static function GetVehicleCauseOfDestruction(vehicle:Int):Int;
	static function GetVehicleCountermeasureCount(aircraft:Int):Int;
	static function GetVehicleColourCombination(vehicle:Int):Int;
	static function GetVehicleClassMaxTraction(vehicleClass:Int):Float;
	static function GetVehicleCustomPrimaryColour(vehicle:Int, r:Int, g:Int, b:Int):Void;
	static function GetVehicleCurrentSlipstreamDraft(vehicle:Int):Float;
	static function GetVehicleDashboardColor(vehicle:Int, color:Int):Void;
	static function GetVehicleClassMaxBraking(vehicleClass:Int):Float;
	static function GetVehicleColor(vehicle:Int, r:Int, g:Int, b:Int):Void;
	static function GetVehicleDeformationAtPos(vehicle:Int, offsetX:Float, offsetY:Float, offsetZ:Float):Vector3;
	static function GetVehicleColours(vehicle:Int, colorPrimary:Int, colorSecondary:Int):Void;
	static function GetVehicleDoorAngleRatio(vehicle:Int, doorIndex:Int):Float;
	static function GetVehicleDirtLevel(vehicle:Int):Float;
	static function GetVehicleCustomSecondaryColour(vehicle:Int, r:Int, g:Int, b:Int):Void;
	static function GetVehicleEngineHealth(vehicle:Int):Float;
	static function GetVehicleEnveffScale(vehicle:Int):Float;
	static function GetVehicleFlightNozzlePosition(aircraft:Int):Float;
	static function GetVehicleDoorLockStatus(vehicle:Int):Int;
	static function GetVehicleDoorsLockedForPlayer(vehicle:Int, player:Int):Bool;
	static function GetVehicleHealthPercentage(vehicle:Int):Float;
	static function GetVehicleEstimatedMaxSpeed(vehicle:Int):Float;
	static function GetVehicleHomingLockonState(vehicle:Int):Int;
	static function GetVehicleExtraColours(vehicle:Int, pearlescentColor:Int, wheelColor:Int):Void;
	static function GetVehicleIndividualDoorLockStatus(vehicle:Int, doorIndex:Int):Int;
	static function GetVehicleHasParachute(vehicle:Int):Bool;
	static function GetVehicleHasKers(vehicle:Int):Bool;
	static function GetVehicleLayoutHash(vehicle:Int):Int;
	static function GetVehicleLivery(vehicle:Int):Int;
	static function GetVehicleLightsState(vehicle:Int, lightsOn:Bool, highbeamsOn:Bool):Bool;
	static function GetVehicleInteriorColor(vehicle:Int, color:Int):Void;
	static function GetVehicleLockOnTarget(vehicle:Int, entity:Int):Bool;
	static function GetVehicleMod(vehicle:Int, modType:Int):Int;
	static function GetVehicleIsMercenary(vehicle:Int):Bool;
	static function GetVehicleLiveryCount(vehicle:Int):Int;
	static function GetVehicleModColor2Name(vehicle:Int):String;
	static function GetVehicleMaxNumberOfPassengers(vehicle:Int):Int;
	static function GetVehicleMaxBraking(vehicle:Int):Float;
	static function GetVehicleMaxTraction(vehicle:Int):Float;
	static function GetVehicleModColor1(vehicle:Int, paintType:Int, color:Int, pearlescentColor:Int):Void;
	static function GetVehicleModelMaxBraking(modelHash:Int):Float;
	static function GetVehicleModColor2(vehicle:Int, paintType:Int, color:Int):Void;
	static function GetVehicleModColor1Name(vehicle:Int, p1:Bool):String;
	static function GetVehicleModelMaxBrakingMaxMods(modelHash:Int):Float;
	static function GetVehicleModKit(vehicle:Int):Int;
	static function GetVehicleModIdentifierHash(vehicle:Int, modType:Int, modIndex:Int):Int;
	static function GetVehicleModelNumberOfSeats(modelHash:Int):Int;
	static function GetVehicleModKitType(vehicle:Int):Int;
	static function GetVehicleModVariation(vehicle:Int, modType:Int):Bool;
	static function GetVehicleNumberOfBrokenOffBones(vehicle:Int):Int;
	static function GetVehicleModModifierValue(vehicle:Int, modType:Int, modIndex:Int):Int;
	static function GetVehicleModelEstimatedAgility(modelHash:Int):Float;
	static function GetVehicleModelAcceleration(modelHash:Int):Float;
	static function GetVehicleModelEstimatedMaxSpeed(modelHash:Int):Float;
	static function GetVehicleModelMaxKnots(modelHash:Int):Float;
	static function GetVehicleNumberPlateTextIndex(vehicle:Int):Int;
	static function GetVehicleModelValue(vehicleModel:Int):Int;
	static function GetVehicleModelMaxTraction(modelHash:Int):Float;
	static function GetVehicleNeonLightsColour(vehicle:Int, r:Int, g:Int, b:Int):Void;
	static function GetVehiclePetrolTankHealth(vehicle:Int):Float;
	static function GetVehicleNumberOfPassengers(vehicle:Int):Int;
	static function GetVehicleNumberOfBrokenBones(vehicle:Int):Int;
	static function GetVehicleSuspensionBounds(vehicle:Int, out1:Vector3, out2:Vector3):Void;
	static function GetVehicleNumberPlateText(vehicle:Int):String;
	static function GetVehicleRoofLiveryCount(vehicle:Int):Int;
	static function GetVehicleTyresCanBurst(vehicle:Int):Bool;
	static function GetVehiclePlateType(vehicle:Int):Int;
	static function GetVehicleRecordingId(recording:Int, script:String):Int;
	static function GetVehicleRoofLivery(vehicle:Int):Int;
	static function GetVehicleWeaponCapacity(vehicle:Int, weaponIndex:Int):Int;
	static function GetVehicleSuspensionHeight(vehicle:Int):Float;
	static function GetVehicleTyreSmokeColor(vehicle:Int, r:Int, g:Int, b:Int):Void;
	static function GetVehicleWheelType(vehicle:Int):Int;
	static function GetVehicleTrailerVehicle(vehicle:Int, trailer:Int):Bool;
	static function GetVehicleXenonLightsColor(vehicle:Int):Int;
	static function HasFilledVehiclePopulation():Bool;
	static function GetVehicleWindowTint(vehicle:Int):Int;
	static function HasPreloadModsFinished(p0:Int):Bool;
	static function HasVehicleAssetLoaded(vehicleAsset:Int):Bool;
	static function HasVehiclePhoneExplosiveDevice():Bool;
	static function IsAnyPedRappellingFromHeli(vehicle:Int):Bool;
	static function HaveVehicleModsStreamedIn(vehicle:Int):Bool;
	static function HasVehicleRecordingBeenLoaded(recording:Int, script:String):Bool;
	static function IsAnyEntityAttachedToHandlerFrame(vehicle:Int):Bool;
	static function IsBoatAnchoredAndFrozen(vehicle:Int):Bool;
	static function HideVehicleTombstone(vehicle:Int, toggle:Bool):Void;
	static function IsEntityAttachedToHandlerFrame(vehicle:Int, entity:Int):Bool;
	static function IsBigVehicle(vehicle:Int):Bool;
	static function InstantlyFillVehiclePopulation():Void;
	static function IsHeliLandingAreaBlocked(vehicle:Int):Bool;
	static function IsHandlerFrameAboveContainer(handler:Int, container:Int):Bool;
	static function IsAnyVehicleNearPoint(x:Float, y:Float, z:Float, radius:Float):Bool;
	static function IsHeliPartBroken(vehicle:Int, p1:Bool, p2:Bool, p3:Bool):Bool;
	static function IsCopVehicleInArea3d(x1:Float, x2:Float, y1:Float, y2:Float, z1:Float, z2:Float):Bool;
	static function IsMissionTrain(vehicle:Int):Bool;
	static function IsPlaneLandingGearIntact(plane:Int):Bool;
	static function IsPlaybackGoingOnForVehicle(vehicle:Int):Bool;
	static function IsPlaybackUsingAiGoingOnForVehicle(vehicle:Int):Bool;
	static function IsThisModelABicycle(model:Int):Bool;
	static function IsPedExclusiveDriverOfVehicle(ped:Int, vehicle:Int, outIndex:Int):Bool;
	static function IsTaxiLightOn(vehicle:Int):Bool;
	static function IsThisModelABoat(model:Int):Bool;
	static function IsThisModelACar(model:Int):Bool;
	static function IsSeatWarpOnly(vehicle:Int, seatIndex:Int):Bool;
	static function IsThisModelAPlane(model:Int):Bool;
	static function IsThisModelAJetski(model:Int):Bool;
	static function IsThisModelAnAmphibiousCar(model:Int):Bool;
	static function IsThisModelABike(model:Int):Bool;
	static function IsThisModelAHeli(model:Int):Bool;
	static function IsThisModelAQuadbike(model:Int):Bool;
	static function IsThisModelATrain(model:Int):Bool;
	static function IsThisModelAnAmphibiousQuadbike(model:Int):Bool;
	static function IsTurretSeat(vehicle:Int, seatIndex:Int):Bool;
	static function IsVehicleAlarmActivated(vehicle:Int):Bool;
	static function IsToggleModOn(vehicle:Int, modType:Int):Bool;
	static function IsVehicleAConvertible(vehicle:Int, p1:Bool):Bool;
	static function IsVehicleAttachedToTrailer(vehicle:Int):Bool;
	static function IsVehicleAttachedToCargobob(cargobob:Int, vehicleAttached:Int):Bool;
	static function IsVehicleAttachedToTowTruck(towTruck:Int, vehicle:Int):Bool;
	static function IsVehicleBumperBrokenOff(vehicle:Int, front:Bool):Bool;
	static function IsVehicleBeingHalted(vehicle:Int):Bool;
	static function IsVehicleDoorDamaged(veh:Int, doorID:Int):Bool;
	static function IsVehicleEngineOnFire(vehicle:Int):Bool;
	static function IsVehicleDamaged(vehicle:Int):Bool;
	static function IsVehicleBumperBouncing(vehicle:Int, frontBumper:Bool):Bool;
	static function IsVehicleHighDetail(vehicle:Int):Bool;
	static function IsVehicleInBurnout(vehicle:Int):Bool;
	static function IsVehicleDriveable(vehicle:Int, isOnFireCheck:Bool):Bool;
	static function IsVehicleDoorFullyOpen(vehicle:Int, doorIndex:Int):Bool;
	static function IsVehicleInSubmarineMode(vehicle:Int):Bool;
	static function IsVehicleExtraTurnedOn(vehicle:Int, extraId:Int):Bool;
	static function IsVehicleModel(vehicle:Int, model:Int):Bool;
	static function IsVehicleInGarageArea(garageName:String, vehicle:Int):Bool;
	static function IsVehicleRocketBoostActive(vehicle:Int):Bool;
	static function IsVehicleNeonLightEnabled(vehicle:Int, index:Int):Bool;
	static function IsVehicleSirenAudioOn(vehicle:Int):Bool;
	static function IsVehicleSeatAccessible(ped:Int, vehicle:Int, seatIndex:Int, side:Bool, onEnter:Bool):Bool;
	static function IsVehicleModHswExclusive(vehicle:Int, modType:Int, modIndex:Int):Bool;
	static function IsVehicleSprayable(vehicle:Int):Bool;
	static function IsVehicleOnAllWheels(vehicle:Int):Bool;
	static function IsVehicleParachuteActive(vehicle:Int):Bool;
	static function IsVehicleStoppedAtTrafficLights(vehicle:Int):Bool;
	static function IsVehicleSlipstreamLeader(vehicle:Int):Bool;
	static function IsVehicleSearchlightOn(vehicle:Int):Bool;
	static function IsVehicleStopped(vehicle:Int):Bool;
	static function IsVehicleWindowIntact(vehicle:Int, windowIndex:Int):Bool;
	static function IsVehicleSirenOn(vehicle:Int):Bool;
	static function IsVehicleSeatFree(vehicle:Int, seatIndex:Int):Bool;
	static function IsVehicleStuckOnRoof(vehicle:Int):Bool;
	static function IsVehicleVisible(vehicle:Int):Bool;
	static function IsVehicleStolen(vehicle:Int):Bool;
	static function LowerConvertibleRoof(vehicle:Int, instantlyLower:Bool):Void;
	static function IsVehicleTyreBurst(vehicle:Int, wheelID:Int, completely:Bool):Bool;
	static function IsVehicleStuckTimerUp(vehicle:Int, p1:Int, p2:Int):Bool;
	static function LowerRetractableWheels(vehicle:Int):Void;
	static function IsVehicleWeaponDisabled(weaponHash:Int, vehicle:Int, owner:Int):Bool;
	static function ModifyVehicleTopSpeed(vehicle:Int, value:Float):Void;
	static function EnableAircraftObstacleAvoidance(vehicle:Int, avoidObstacles:Bool):Void;
	static function NetworkUseHighPrecisionVehicleBlending(vehicle:Int, toggle:Bool):Void;
	static function PopOutVehicleWindscreen(vehicle:Int):Void;
	static function ReleasePreloadMods(vehicle:Int):Void;
	static function PausePlaybackRecordedVehicle(vehicle:Int):Void;
	static function OpenBombBayDoors(vehicle:Int):Void;
	static function PreloadVehicleMod(p0:Int, modType:Int, p2:Int):Void;
	static function RemovePickUpRopeForCargobob(cargobob:Int):Void;
	static function RaiseConvertibleRoof(vehicle:Int, instantlyRaise:Bool):Void;
	static function RemoveVehicleAsset(vehicleAsset:Int):Void;
	static function RaiseRetractableWheels(vehicle:Int):Void;
	static function RemoveVehicleMod(vehicle:Int, modType:Int):Void;
	static function RemoveVehicleCombatAvoidanceArea(p0:Int):Void;
	static function RemoveRoadNodeSpeedZone(speedzone:Int):Bool;
	static function RemoveVehicleHighDetailModel(vehicle:Int):Void;
	static function RemoveVehicleShadowEffect(vehicle:Int):Void;
	static function RemoveVehicleStuckCheck(vehicle:Int):Void;
	static function RemoveVehicleWindow(vehicle:Int, windowIndex:Int):Void;
	static function RemoveVehiclesFromGeneratorsInArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, unk:Int):Void;
	static function RemoveVehicleRecording(recording:Int, script:String):Void;
	static function RequestVehicleAsset(vehicleHash:Int, vehicleAsset:Int):Void;
	static function RemoveVehicleUpsidedownCheck(vehicle:Int):Void;
	static function ResetVehicleStuckTimer(vehicle:Int, nullAttributes:Int):Void;
	static function RequestVehicleHighDetailModel(vehicle:Int):Void;
	static function RequestVehicleRecording(recording:Int, script:String):Void;
	static function RequestVehicleDashboardScaleformMovie(vehicle:Int):Void;
	static function RollUpWindow(vehicle:Int, windowIndex:Int):Void;
	static function RollDownWindows(vehicle:Int):Void;
	static function ResetVehicleWheels(vehicle:Int, toggle:Bool):Void;
	static function RollDownWindow(vehicle:Int, windowIndex:Int):Void;
	static function SetAllVehicleGeneratorsActive():Void;
	static function SetAllLowPriorityVehicleGeneratorsActive(active:Bool):Void;
	static function SetBoatAnchor(vehicle:Int, toggle:Bool):Void;
	static function SetAllVehicleGeneratorsActiveInArea(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, p6:Bool, p7:Bool):Void;
	static function SetBoatMovementResistance(vehicle:Int, value:Float):Void;
	static function SetBikeOnStand(vehicle:Int, x:Float, y:Float):Void;
	static function SetAmbientVehicleRangeMultiplierThisFrame(range:Float):Void;
	static function SetBoatIsSinking(vehicle:Int):Void;
	static function SetCarHighSpeedBumpSeverityMultiplier(multiplier:Float):Void;
	static function SetBoatBoomPositionRatio(vehicle:Int, ratio:Float):Void;
	static function SetCamberedWheelsDisabled(vehicle:Int, toggle:Bool):Void;
	static function SetBoatDisableAvoidance(vehicle:Int, p1:Bool):Void;
	static function SetCargobobForceDontDetachVehicle(cargobob:Int, toggle:Bool):Void;
	static function SetBoatFrozenWhenAnchored(vehicle:Int, toggle:Bool):Void;
	static function SetBoatSinksWhenWrecked(vehicle:Int, toggle:Bool):Void;
	static function SetCargobobPickupMagnetActive(cargobob:Int, isActive:Bool):Void;
	static function SetCarBootOpen(vehicle:Int):Void;
	static function SetCargobobHookCanAttach(vehicle:Int, toggle:Bool):Void;
	static function SetCanResprayVehicle(vehicle:Int, state:Bool):Void;
	static function SetCargobobPickupMagnetFalloff(vehicle:Int, p1:Float):Void;
	static function SetCargobobPickupMagnetEffectRadius(vehicle:Int, p1:Float):Void;
	static function SetCargobobPickupMagnetReducedFalloff(cargobob:Int, p1:Float):Void;
	static function SetCargobobPickupMagnetPullStrength(cargobob:Int, p1:Float):Void;
	static function SetCargobobPickupMagnetReducedStrength(cargobob:Int, vehicle:Int):Void;
	static function SetCargobobPickupMagnetPullRopeLength(cargobob:Int, p1:Float):Void;
	static function SetConvertibleRoofLatchState(vehicle:Int, state:Bool):Void;
	static function SetCargobobPickupMagnetStrength(cargobob:Int, strength:Float):Void;
	static function SetDisableHoverModeFlight(vehicle:Int, toggle:Bool):Void;
	static function SetCargobobPickupRopeDampingMultiplier(cargobob:Int, p1:Float):Void;
	static function SetCargobobPickupRopeType(vehicle:Int, state:Int):Void;
	static function SetDeployHeliStubWings(vehicle:Int, deploy:Bool, p2:Bool):Void;
	static function SetDisableTurretMovementThisFrame(vehicle:Int, turretIdx:Int):Void;
	static function SetDisablePretendOccupants(vehicle:Int, toggle:Bool):Void;
	static function SetDisableRandomTrainsThisFrame(toggle:Bool):Void;
	static function SetConvertibleRoof(vehicle:Int, toggle:Bool):Void;
	static function SetDisableVehiclePetrolTankFires(vehicle:Int, toggle:Bool):Void;
	static function SetDisableVehicleFlightNozzlePosition(vehicle:Int, direction:Bool):Void;
	static function SetDisableSuperdummyMode(vehicle:Int, p1:Bool):Void;
	static function SetDisableVehiclePetrolTankDamage(vehicle:Int, toggle:Bool):Void;
	static function SetDisableVehicleUnk(toggle:Bool):Void;
	static function SetDisableVehicleUnk2(toggle:Bool):Void;
	static function SetDisableVehicleEngineFires(vehicle:Int, toggle:Bool):Void;
	static function SetDisableVehicleWindowCollisions(vehicle:Int, toggle:Bool):Void;
	static function SetDistantCarsEnabled(toggle:Bool):Void;
	static function SetEnableVehicleSlipstreaming(toggle:Bool):Void;
	static function SetDriftTyresEnabled(vehicle:Int, toggle:Bool):Void;
	static function SetForkliftForkHeight(vehicle:Int, height:Float):Void;
	static function SetForceHdVehicle(vehicle:Int, toggle:Bool):Void;
	static function SetFarDrawVehicles(toggle:Bool):Void;
	static function SetForcedBoatLocationWhenAnchored(vehicle:Int, toggle:Bool):Void;
	static function SetHeliBladesFullSpeed(vehicle:Int):Void;
	static function SetHeliCombatOffset(vehicle:Int, x:Float, y:Float, z:Float):Void;
	static function SetGarbageTrucks(toggle:Bool):Void;
	static function SetHeliMainRotorHealth(vehicle:Int, health:Float):Void;
	static function SetHeliTailExplodeThrowDashboard(vehicle:Int, p1:Bool):Void;
	static function SetHeliTailRotorHealth(vehicle:Int, health:Float):Void;
	static function SetHeliBladesSpeed(vehicle:Int, speed:Float):Void;
	static function SetHelicopterRollPitchYawMult(helicopter:Int, multiplier:Float):Void;
	static function SetHeliTurbulenceScalar(vehicle:Int, p1:Float):Void;
	static function SetHoverModeWingRatio(vehicle:Int, ratio:Float):Void;
	static function SetHydraulicWheelState(vehicle:Int, state:Int):Void;
	static function SetHydraulicRaised(vehicle:Int, toggle:Bool):Void;
	static function SetHydraulicWheelValue(vehicle:Int, wheelId:Int, value:Float):Void;
	static function SetHydraulicWheelStateTransition(vehicle:Int, wheelId:Int, state:Int, value:Float, p4:Float):Void;
	static function SetLastDrivenVehicle(vehicle:Int):Void;
	static function SetMissionTrainAsNoLongerNeeded(train:Int, p1:Bool):Void;
	static function SetLightsCutoffDistanceTweak(distance:Float):Void;
	static function SetNumberOfParkedVehicles(value:Int):Void;
	static function SetOpenRearDoorsOnExplosion(vehicle:Int, toggle:Bool):Void;
	static function SetPlanePropellersHealth(plane:Int, health:Float):Void;
	static function SetOppressorTransformState(vehicle:Int, extend:Bool):Void;
	static function SetMissionTrainCoords(train:Int, x:Float, y:Float, z:Float):Void;
	static function SetPlaneTurbulenceMultiplier(vehicle:Int, multiplier:Float):Void;
	static function SetParkedVehicleDensityMultiplierThisFrame(multiplier:Float):Void;
	static function SetPlaneEngineHealth(vehicle:Int, health:Float):Void;
	static function SetPlaybackSpeed(vehicle:Int, speed:Float):Void;
	static function SetPickupRopeLengthForCargobob(cargobob:Int, length1:Float, length2:Float, state:Bool):Void;
	static function SetPlaneResistToExplosion(vehicle:Int, toggle:Bool):Void;
	static function SetPoliceFocusWillTrackVehicle(vehicle:Int, p1:Bool):Void;
	static function SetPlaybackToUseAiTryToRevertBackLater(vehicle:Int, time:Int, drivingStyle:Int, p3:Bool):Void;
	static function SetPlaneSectionDamageScale(vehicle:Int, damageSection:Int, damageScale:Float):Void;
	static function SetPlayersLastVehicle(vehicle:Int):Void;
	static function SetRandomTrains(toggle:Bool):Void;
	static function SetRenderTrainAsDerailed(train:Int, toggle:Bool):Void;
	static function SetRandomBoats(toggle:Bool):Void;
	static function SetPlaybackToUseAi(vehicle:Int, drivingStyle:Int):Void;
	static function SetScriptVehicleGenerator(vehicleGenerator:Int, enabled:Bool):Void;
	static function SetReduceDriftVehicleSuspension(vehicle:Int, enable:Bool):Void;
	static function SetRandomBoatsInMp(toggle:Bool):Void;
	static function SetSpecialFlightModeTargetRatio(vehicle:Int, state:Float):Void;
	static function SetTaskVehicleGotoPlaneMinHeightAboveTerrain(plane:Int, height:Int):Void;
	static function SetSpecialFlightModeAllowed(vehicle:Int, toggle:Bool):Void;
	static function SetTrainCruiseSpeed(train:Int, speed:Float):Void;
	static function SetRandomVehicleDensityMultiplierThisFrame(multiplier:Float):Void;
	static function SetTrailerInverseMassScale(vehicle:Int, p1:Float):Void;
	static function SetSubmarineCrushDepths(vehicle:Int, toggle:Bool, depth1:Float, depth2:Float, depth3:Float):Void;
	static function SetTrailerLegsLowered():Void;
	static function SetTrainSpeed(train:Int, speed:Float):Void;
	static function SetTrailerLegsRaised(vehicle:Int):Void;
	static function SetSpecialFlightModeRatio(vehicle:Int, ratio:Float):Void;
	static function SetTrainTrackSpawnFrequency(trackIndex:Int, frequency:Int):Void;
	static function SetTaxiLights(vehicle:Int, state:Bool):Void;
	static function SetTyreHealth(vehicle:Int, wheelIndex:Int, health:Float):Void;
	static function SetTyreTractionLossMultiplier(vehicle:Int, wheelIndex:Int, multiplier:Float):Void;
	static function SetUnkBool0x102ForSubmarineVehicleTask(vehicle:Int, value:Bool):Void;
	static function SetTyreSoftnessMultiplier(vehicle:Int, wheelIndex:Int, multiplier:Float):Void;
	static function SetVehicleActiveForPedNavigation(vehicle:Int, toggle:Bool):Void;
	static function SetUnkFloat0x104ForSubmarineVehicleTask(vehicle:Int, value:Float):Void;
	static function SetVehicleAllowNoPassengersLockon(veh:Int, toggle:Bool):Void;
	static function SetTyreWearMultiplier(vehicle:Int, wheelIndex:Int, multiplier:Float):Void;
	static function SetVehicleActiveDuringPlayback(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleActAsIfHighSpeedForFragSmashing(vehicle:Int, actHighSpeed:Bool):Void;
	static function SetUseHigherVehicleJumpForce(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleAlarm(vehicle:Int, state:Bool):Void;
	static function SetVehicleAutomaticallyAttaches(vehicle:Int, p1:Bool, p2:Int):Int;
	static function SetVehicleBrake(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleBodyHealth(vehicle:Int, value:Float):Void;
	static function SetVehicleBombCount(aircraft:Int, bombCount:Int):Void;
	static function SetVehicleCanBeLockedOn(vehicle:Int, canBeLockedOn:Bool, unk:Bool):Void;
	static function SetVehicleBrakeLights(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleBurnout(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleCanBeVisiblyDamaged(vehicle:Int, state:Bool):Void;
	static function SetVehicleCanBreak(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleCanEngineOperateOnFire(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleBulldozerArmPosition(vehicle:Int, position:Float, p2:Bool):Void;
	static function SetVehicleCanBeTargetted(vehicle:Int, state:Bool):Void;
	static function SetVehicleCanLeakOil(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleCeilingHeight(vehicle:Int, height:Float):Void;
	static function SetVehicleCanDeformWheels(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleColourCombination(vehicle:Int, colorCombination:Int):Void;
	static function SetVehicleCanBeUsedByFleeingPeds(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleControlsInverted(vehicle:Int, state:Bool):Void;
	static function SetVehicleCanSaveInGarage(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleCanLeakPetrol(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleDamage(vehicle:Int, xOffset:Float, yOffset:Float, zOffset:Float, damage:Float, radius:Float, focusOnModel:Bool):Void;
	static function SetVehicleCountermeasureCount(aircraft:Int, count:Int):Void;
	static function SetVehicleCheatPowerIncrease(vehicle:Int, value:Float):Void;
	static function SetVehicleDashboardColor(vehicle:Int, color:Int):Void;
	static function SetVehicleColours(vehicle:Int, colorPrimary:Int, colorSecondary:Int):Void;
	static function SetVehicleCustomSecondaryColour(vehicle:Int, r:Int, g:Int, b:Int):Void;
	static function SetVehicleCustomPrimaryColour(vehicle:Int, r:Int, g:Int, b:Int):Void;
	static function SetVehicleDamageModifier(vehicle:Int, p1:Float):Int;
	static function SetVehicleDensityMultiplierThisFrame(multiplier:Float):Void;
	static function SetVehicleDisableTowing(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleDoorCanBreak(vehicle:Int, doorIndex:Int, isBreakable:Bool):Void;
	static function SetVehicleDeformationFixed(vehicle:Int):Void;
	static function SetVehicleDoorLatched(vehicle:Int, doorIndex:Int, forceClose:Bool, lock:Bool, p4:Bool):Void;
	static function SetVehicleDoorShut(vehicle:Int, doorIndex:Int, closeInstantly:Bool):Void;
	static function SetVehicleDirtLevel(vehicle:Int, dirtLevel:Float):Void;
	static function SetVehicleDoorsLocked(vehicle:Int, doorLockStatus:Int):Void;
	static function SetVehicleDoorBroken(vehicle:Int, doorIndex:Int, deleteDoor:Bool):Void;
	static function SetVehicleDoorOpen(vehicle:Int, doorIndex:Int, loose:Bool, openInstantly:Bool):Void;
	static function SetVehicleDoorControl(vehicle:Int, doorIndex:Int, speed:Int, angle:Float):Void;
	static function SetVehicleDoorsLockedForAllPlayers(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleDoorsLockedForNonScriptPlayers(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleDoorsLockedForTeam(vehicle:Int, team:Int, toggle:Bool):Void;
	static function SetVehicleDoorsShut(vehicle:Int, closeInstantly:Bool):Void;
	static function SetVehicleDoorsLockedForPlayer(vehicle:Int, player:Int, toggle:Bool):Void;
	static function SetVehicleDoorsLockedForUnk(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleEngineHealth(vehicle:Int, health:Float):Void;
	static function SetVehicleDropsMoneyWhenBlownUp(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleEnveffScale(vehicle:Int, fade:Float):Void;
	static function SetVehicleExclusiveDriver2(vehicle:Int, ped:Int, index:Int):Void;
	static function SetVehicleExclusiveDriver(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleEngineCanDegrade(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleExtendedRemovalRange(vehicle:Int, range:Int):Void;
	static function SetVehicleFixed(vehicle:Int):Void;
	static function SetVehicleExtra(vehicle:Int, extraId:Int, disable:Bool):Void;
	static function SetVehicleEngineOn(vehicle:Int, value:Bool, instantly:Bool, disableAutoStart:Bool):Void;
	static function SetVehicleFlightNozzlePosition(vehicle:Int, angleRatio:Float):Void;
	static function SetVehicleForceAfterburner(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleExplodesOnHighExplosionDamage(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleFrictionOverride(vehicle:Int, friction:Float):Void;
	static function SetVehicleFlightNozzlePositionImmediate(vehicle:Int, angle:Float):Void;
	static function SetVehicleGravity(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleExtraColours(vehicle:Int, pearlescentColor:Int, wheelColor:Int):Void;
	static function SetVehicleHandbrake(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleGeneratesEngineShockingEvents(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleHandlingHashForAi(vehicle:Int, hash:Int):Void;
	static function SetVehicleForwardSpeed(vehicle:Int, speed:Float):Void;
	static function SetVehicleHasBeenOwnedByPlayer(vehicle:Int, owned:Bool):Void;
	static function SetVehicleHasBeenDrivenFlag(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleFullbeam(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleHasUnbreakableLights(vehicle:Int, p1:Bool):Void;
	static function SetVehicleHasStrongAxles(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleIndicatorLights(vehicle:Int, turnSignal:Int, toggle:Bool):Void;
	static function SetVehicleIsRacing(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleIndividualDoorsLocked(vehicle:Int, doorIndex:Int, doorLockStatus:Int):Void;
	static function SetVehicleHasMutedSirens(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleInteriorlight(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleJetEngineOn(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleInteriorColor(vehicle:Int, color:Int):Void;
	static function SetVehicleIsStolen(vehicle:Int, isStolen:Bool):Void;
	static function SetVehicleLights(vehicle:Int, state:Int):Void;
	static function SetVehicleInactiveDuringPlayback(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleIsConsideredByPlayer(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleKersAllowed(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleLivery(vehicle:Int, livery:Int):Void;
	static function SetVehicleInfluencesWantedLevel(vehicle:Int, influenceWantedLevel:Bool):Void;
	static function SetVehicleModColor1(vehicle:Int, paintType:Int, color:Int, pearlescentColor:Int):Void;
	static function SetVehicleNameDebug(vehicle:Int, name:String):Void;
	static function SetVehicleLightMultiplier(vehicle:Int, multiplier:Float):Void;
	static function SetVehicleMaxSpeed(vehicle:Int, speed:Float):Void;
	static function SetVehicleMod(vehicle:Int, modType:Int, modIndex:Int, customTires:Bool):Void;
	static function SetVehicleIsWanted(vehicle:Int, state:Bool):Void;
	static function SetVehicleNeonLightsColor2(vehicle:Int, color:Int):Void;
	static function SetVehicleModColor2(vehicle:Int, paintType:Int, color:Int):Void;
	static function SetVehicleModelIsSuppressed(model:Int, suppressed:Bool):Void;
	static function SetVehicleLightsMode(vehicle:Int, p1:Int):Void;
	static function SetVehicleNeedsToBeHotwired(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleLodMultiplier(vehicle:Int, multiplier:Float):Void;
	static function SetVehicleNeonLightEnabled(vehicle:Int, index:Int, toggle:Bool):Void;
	static function SetVehicleNitroEnabled(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleModKit(vehicle:Int, modKit:Int):Void;
	static function SetVehicleNumberPlateText(vehicle:Int, plateText:String):Void;
	static function SetVehicleNumberPlateTextIndex(vehicle:Int, plateIndex:Int):Void;
	static function SetVehicleParachuteModel(vehicle:Int, modelHash:Int):Void;
	static function SetVehicleNeonLightsColour(vehicle:Int, r:Int, g:Int, b:Int):Void;
	static function SetVehicleParachuteActive(vehicle:Int, active:Bool):Void;
	static function SetVehicleOutOfControl(vehicle:Int, killDriver:Bool, explodeOnImpact:Bool):Void;
	static function SetVehicleRampLaunchModifier(vehicle:Int, p1:Float):Void;
	static function SetVehicleOnGroundProperly(vehicle:Int):Bool;
	static function SetVehicleProvidesCover(vehicle:Int, toggle:Bool):Void;
	static function SetVehiclePetrolTankHealth(vehicle:Int, health:Float):Void;
	static function SetVehicleRampSidewaysLaunchMotion(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleParachuteTextureVariation(vehicle:Int, textureVariation:Int):Void;
	static function SetVehicleRampUpwardsLaunchMotion(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleReduceTraction(vehicle:Int, val:Int):Void;
	static function SetVehicleReduceGrip(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleReceivesRampDamage(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleRocketBoostActive(vehicle:Int, active:Bool):Void;
	static function SetVehicleRocketBoostRefillTime(vehicle:Int, time:Float):Void;
	static function SetVehicleRudderBroken(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleShadowEffect(vehicle:Int, p1:Int, p2:Int):Void;
	static function SetVehicleSilent(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleRocketBoostPercentage(vehicle:Int, percentage:Float):Void;
	static function SetVehicleRoofLivery(vehicle:Int, livery:Int):Void;
	static function SetVehicleSteeringBiasScalar(vehicle:Int, scalar:Float):Void;
	static function SetVehicleSearchlight(heli:Int, toggle:Bool, canBeUsedByAI:Bool):Void;
	static function SetVehicleShootAtTarget(driver:Int, entity:Int, xTarget:Float, yTarget:Float, zTarget:Float):Void;
	static function SetVehicleTankTurretPosition(vehicle:Int, position:Float, p2:Bool):Void;
	static function SetVehicleTowTruckArmPosition(vehicle:Int, position:Float):Void;
	static function SetVehicleSteerBias(vehicle:Int, value:Float):Void;
	static function SetVehicleSiren(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleTyreBurst(vehicle:Int, index:Int, onRim:Bool, p3:Float):Void;
	static function SetVehicleTurretUnk(vehicle:Int, index:Int, toggle:Bool):Void;
	static function SetVehicleStrong(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleSt(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleTyreFixed(vehicle:Int, tyreIndex:Int):Void;
	static function SetVehicleTyresCanBurst(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleTimedExplosion(vehicle:Int, ped:Int, toggle:Bool):Void;
	static function SetVehicleUnkDamageMultiplier(vehicle:Int, multiplier:Float):Void;
	static function SetVehicleUndriveable(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleTurretSpeedThisFrame(vehicle:Int, speed:Float):Void;
	static function SetVehicleWeaponCapacity(vehicle:Int, weaponIndex:Int, capacity:Int):Void;
	static function SetVehicleUsePlayerLightSettings(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleWheelsCanBreak(vehicle:Int, enabled:Bool):Void;
	static function SetVehicleWheelType(vehicle:Int, wheelType:Int):Void;
	static function SetVehicleTyreSmokeColor(vehicle:Int, r:Int, g:Int, b:Int):Void;
	static function SetVehicleUseCutsceneWheelCompression(p0:Int, p1:Bool, p2:Bool, p3:Bool):Int;
	static function SetVehicleWindowTint(vehicle:Int, tint:Int):Void;
	static function SetVehicleUseAlternateHandling(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleUsesLargeRearRamp(vehicle:Int, toggle:Bool):Void;
	static function SetVehicleWeaponsDisabled(vehicle:Int, weaponSlot:Int):Void;
	static function SkipTimeInPlaybackRecordedVehicle(vehicle:Int, time:Float):Void;
	static function SetVehicleWheelsDealDamage(vehicle:Int, toggle:Bool):Void;
	static function StartPlaybackRecordedVehicle(vehicle:Int, recording:Int, script:String, p3:Bool):Void;
	static function SetVehicleWheelsCanBreakOffWhenBlowUp(vehicle:Int, toggle:Bool):Void;
	static function StartPlaybackRecordedVehicleWithFlags(vehicle:Int, recording:Int, script:String, flags:Int, time:Int, drivingStyle:Int):Void;
	static function SetVehicleXenonLightsColor(vehicle:Int, color:Int):Void;
	static function SmashVehicleWindow(vehicle:Int, windowIndex:Int):Void;
	static function StabiliseEntityAttachedToHeli(vehicle:Int, entity:Int, p2:Float):Void;
	static function StartVehicleHorn(vehicle:Int, duration:Int, mode:Int, forever:Bool):Void;
	static function StopAllGarageActivity():Void;
	static function StopPlaybackRecordedVehicle(vehicle:Int):Void;
	static function StopBringVehicleToHalt(vehicle:Int):Void;
	static function SkipToEndAndStopPlaybackRecordedVehicle(vehicle:Int):Void;
	static function TrackVehicleVisibility(vehicle:Int):Void;
	static function SwitchTrainTrack(trackId:Int, state:Bool):Void;
	static function ToggleVehicleMod(vehicle:Int, modType:Int, toggle:Bool):Void;
	static function StartPlaybackRecordedVehicleUsingAi(vehicle:Int, recording:Int, script:String, speed:Float, drivingStyle:Int):Void;
	static function TransformToSubmarine(vehicle:Int, instantly:Bool):Void;
	static function UnpausePlaybackRecordedVehicle(vehicle:Int):Void;
	static function StartVehicleAlarm(vehicle:Int):Void;
	static function TransformToCar(vehicle:Int, instantly:Bool):Void;
}
